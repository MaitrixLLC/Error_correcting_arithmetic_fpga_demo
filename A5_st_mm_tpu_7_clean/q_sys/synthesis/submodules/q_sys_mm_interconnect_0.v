// q_sys_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module q_sys_mm_interconnect_0 (
		input  wire        pll_0_50_outclk0_clk,                                         //                                       pll_0_50_outclk0.clk
		input  wire        jtag_uart_0_reset_reset_bridge_in_reset_reset,                //                jtag_uart_0_reset_reset_bridge_in_reset.reset
		input  wire        nios2_gen2_0_reset_reset_bridge_in_reset_reset,               //               nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire        product_info_0_clock_reset_reset_reset_bridge_in_reset_reset, // product_info_0_clock_reset_reset_reset_bridge_in_reset.reset
		input  wire [19:0] nios2_gen2_0_data_master_address,                             //                               nios2_gen2_0_data_master.address
		output wire        nios2_gen2_0_data_master_waitrequest,                         //                                                       .waitrequest
		input  wire [3:0]  nios2_gen2_0_data_master_byteenable,                          //                                                       .byteenable
		input  wire        nios2_gen2_0_data_master_read,                                //                                                       .read
		output wire [31:0] nios2_gen2_0_data_master_readdata,                            //                                                       .readdata
		input  wire        nios2_gen2_0_data_master_write,                               //                                                       .write
		input  wire [31:0] nios2_gen2_0_data_master_writedata,                           //                                                       .writedata
		input  wire        nios2_gen2_0_data_master_debugaccess,                         //                                                       .debugaccess
		input  wire [19:0] nios2_gen2_0_instruction_master_address,                      //                        nios2_gen2_0_instruction_master.address
		output wire        nios2_gen2_0_instruction_master_waitrequest,                  //                                                       .waitrequest
		input  wire        nios2_gen2_0_instruction_master_read,                         //                                                       .read
		output wire [31:0] nios2_gen2_0_instruction_master_readdata,                     //                                                       .readdata
		output wire [1:0]  in_fifo_used_s1_address,                                      //                                        in_fifo_used_s1.address
		input  wire [31:0] in_fifo_used_s1_readdata,                                     //                                                       .readdata
		output wire [1:0]  in_port_data_s1_address,                                      //                                        in_port_data_s1.address
		input  wire [31:0] in_port_data_s1_readdata,                                     //                                                       .readdata
		output wire [1:0]  in_port_dig_error_s1_address,                                 //                                   in_port_dig_error_s1.address
		input  wire [31:0] in_port_dig_error_s1_readdata,                                //                                                       .readdata
		output wire [1:0]  in_port_ec_flags_s1_address,                                  //                                    in_port_ec_flags_s1.address
		input  wire [31:0] in_port_ec_flags_s1_readdata,                                 //                                                       .readdata
		output wire [1:0]  in_port_freq_cnt_s1_address,                                  //                                    in_port_freq_cnt_s1.address
		input  wire [31:0] in_port_freq_cnt_s1_readdata,                                 //                                                       .readdata
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,                        //                          jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                          //                                                       .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                           //                                                       .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,                       //                                                       .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,                      //                                                       .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,                    //                                                       .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,                     //                                                       .chipselect
		output wire [8:0]  nios2_gen2_0_debug_mem_slave_address,                         //                           nios2_gen2_0_debug_mem_slave.address
		output wire        nios2_gen2_0_debug_mem_slave_write,                           //                                                       .write
		output wire        nios2_gen2_0_debug_mem_slave_read,                            //                                                       .read
		input  wire [31:0] nios2_gen2_0_debug_mem_slave_readdata,                        //                                                       .readdata
		output wire [31:0] nios2_gen2_0_debug_mem_slave_writedata,                       //                                                       .writedata
		output wire [3:0]  nios2_gen2_0_debug_mem_slave_byteenable,                      //                                                       .byteenable
		input  wire        nios2_gen2_0_debug_mem_slave_waitrequest,                     //                                                       .waitrequest
		output wire        nios2_gen2_0_debug_mem_slave_debugaccess,                     //                                                       .debugaccess
		output wire [15:0] onchip_memory2_0_s1_address,                                  //                                    onchip_memory2_0_s1.address
		output wire        onchip_memory2_0_s1_write,                                    //                                                       .write
		input  wire [31:0] onchip_memory2_0_s1_readdata,                                 //                                                       .readdata
		output wire [31:0] onchip_memory2_0_s1_writedata,                                //                                                       .writedata
		output wire [3:0]  onchip_memory2_0_s1_byteenable,                               //                                                       .byteenable
		output wire        onchip_memory2_0_s1_chipselect,                               //                                                       .chipselect
		output wire        onchip_memory2_0_s1_clken,                                    //                                                       .clken
		output wire [1:0]  out_port_batnum_s1_address,                                   //                                     out_port_batnum_s1.address
		output wire        out_port_batnum_s1_write,                                     //                                                       .write
		input  wire [31:0] out_port_batnum_s1_readdata,                                  //                                                       .readdata
		output wire [31:0] out_port_batnum_s1_writedata,                                 //                                                       .writedata
		output wire        out_port_batnum_s1_chipselect,                                //                                                       .chipselect
		output wire [1:0]  out_port_ctrl_s1_address,                                     //                                       out_port_ctrl_s1.address
		output wire        out_port_ctrl_s1_write,                                       //                                                       .write
		input  wire [31:0] out_port_ctrl_s1_readdata,                                    //                                                       .readdata
		output wire [31:0] out_port_ctrl_s1_writedata,                                   //                                                       .writedata
		output wire        out_port_ctrl_s1_chipselect,                                  //                                                       .chipselect
		output wire [1:0]  out_port_lut_adr_s1_address,                                  //                                    out_port_lut_adr_s1.address
		output wire        out_port_lut_adr_s1_write,                                    //                                                       .write
		input  wire [31:0] out_port_lut_adr_s1_readdata,                                 //                                                       .readdata
		output wire [31:0] out_port_lut_adr_s1_writedata,                                //                                                       .writedata
		output wire        out_port_lut_adr_s1_chipselect,                               //                                                       .chipselect
		output wire [1:0]  out_port_lut_data_s1_address,                                 //                                   out_port_lut_data_s1.address
		output wire        out_port_lut_data_s1_write,                                   //                                                       .write
		input  wire [31:0] out_port_lut_data_s1_readdata,                                //                                                       .readdata
		output wire [31:0] out_port_lut_data_s1_writedata,                               //                                                       .writedata
		output wire        out_port_lut_data_s1_chipselect,                              //                                                       .chipselect
		output wire [1:0]  out_port_prodnum_s1_address,                                  //                                    out_port_prodnum_s1.address
		output wire        out_port_prodnum_s1_write,                                    //                                                       .write
		input  wire [31:0] out_port_prodnum_s1_readdata,                                 //                                                       .readdata
		output wire [31:0] out_port_prodnum_s1_writedata,                                //                                                       .writedata
		output wire        out_port_prodnum_s1_chipselect,                               //                                                       .chipselect
		output wire [1:0]  product_info_0_avalon_slave_0_address,                        //                          product_info_0_avalon_slave_0.address
		output wire        product_info_0_avalon_slave_0_read,                           //                                                       .read
		input  wire [31:0] product_info_0_avalon_slave_0_readdata,                       //                                                       .readdata
		output wire        product_info_0_avalon_slave_0_chipselect,                     //                                                       .chipselect
		output wire [0:0]  sysid_qsys_0_control_slave_address,                           //                             sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata,                          //                                                       .readdata
		output wire [2:0]  timer_0_s1_address,                                           //                                             timer_0_s1.address
		output wire        timer_0_s1_write,                                             //                                                       .write
		input  wire [15:0] timer_0_s1_readdata,                                          //                                                       .readdata
		output wire [15:0] timer_0_s1_writedata,                                         //                                                       .writedata
		output wire        timer_0_s1_chipselect,                                        //                                                       .chipselect
		output wire [2:0]  uart_0_s1_address,                                            //                                              uart_0_s1.address
		output wire        uart_0_s1_write,                                              //                                                       .write
		output wire        uart_0_s1_read,                                               //                                                       .read
		input  wire [15:0] uart_0_s1_readdata,                                           //                                                       .readdata
		output wire [15:0] uart_0_s1_writedata,                                          //                                                       .writedata
		output wire        uart_0_s1_begintransfer,                                      //                                                       .begintransfer
		output wire        uart_0_s1_chipselect                                          //                                                       .chipselect
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [19:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;              // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire   [99:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [16:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [19:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire   [99:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [16:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                                    // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                                 // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [19:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                                     // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                               // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                        // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                                   // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                       // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                                  // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [100:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                             // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [100:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                             // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                     // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire   [31:0] product_info_0_avalon_slave_0_agent_m0_readdata;                                    // product_info_0_avalon_slave_0_translator:uav_readdata -> product_info_0_avalon_slave_0_agent:m0_readdata
	wire          product_info_0_avalon_slave_0_agent_m0_waitrequest;                                 // product_info_0_avalon_slave_0_translator:uav_waitrequest -> product_info_0_avalon_slave_0_agent:m0_waitrequest
	wire          product_info_0_avalon_slave_0_agent_m0_debugaccess;                                 // product_info_0_avalon_slave_0_agent:m0_debugaccess -> product_info_0_avalon_slave_0_translator:uav_debugaccess
	wire   [19:0] product_info_0_avalon_slave_0_agent_m0_address;                                     // product_info_0_avalon_slave_0_agent:m0_address -> product_info_0_avalon_slave_0_translator:uav_address
	wire    [3:0] product_info_0_avalon_slave_0_agent_m0_byteenable;                                  // product_info_0_avalon_slave_0_agent:m0_byteenable -> product_info_0_avalon_slave_0_translator:uav_byteenable
	wire          product_info_0_avalon_slave_0_agent_m0_read;                                        // product_info_0_avalon_slave_0_agent:m0_read -> product_info_0_avalon_slave_0_translator:uav_read
	wire          product_info_0_avalon_slave_0_agent_m0_readdatavalid;                               // product_info_0_avalon_slave_0_translator:uav_readdatavalid -> product_info_0_avalon_slave_0_agent:m0_readdatavalid
	wire          product_info_0_avalon_slave_0_agent_m0_lock;                                        // product_info_0_avalon_slave_0_agent:m0_lock -> product_info_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] product_info_0_avalon_slave_0_agent_m0_writedata;                                   // product_info_0_avalon_slave_0_agent:m0_writedata -> product_info_0_avalon_slave_0_translator:uav_writedata
	wire          product_info_0_avalon_slave_0_agent_m0_write;                                       // product_info_0_avalon_slave_0_agent:m0_write -> product_info_0_avalon_slave_0_translator:uav_write
	wire    [2:0] product_info_0_avalon_slave_0_agent_m0_burstcount;                                  // product_info_0_avalon_slave_0_agent:m0_burstcount -> product_info_0_avalon_slave_0_translator:uav_burstcount
	wire          product_info_0_avalon_slave_0_agent_rf_source_valid;                                // product_info_0_avalon_slave_0_agent:rf_source_valid -> product_info_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [100:0] product_info_0_avalon_slave_0_agent_rf_source_data;                                 // product_info_0_avalon_slave_0_agent:rf_source_data -> product_info_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          product_info_0_avalon_slave_0_agent_rf_source_ready;                                // product_info_0_avalon_slave_0_agent_rsp_fifo:in_ready -> product_info_0_avalon_slave_0_agent:rf_source_ready
	wire          product_info_0_avalon_slave_0_agent_rf_source_startofpacket;                        // product_info_0_avalon_slave_0_agent:rf_source_startofpacket -> product_info_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          product_info_0_avalon_slave_0_agent_rf_source_endofpacket;                          // product_info_0_avalon_slave_0_agent:rf_source_endofpacket -> product_info_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          product_info_0_avalon_slave_0_agent_rsp_fifo_out_valid;                             // product_info_0_avalon_slave_0_agent_rsp_fifo:out_valid -> product_info_0_avalon_slave_0_agent:rf_sink_valid
	wire  [100:0] product_info_0_avalon_slave_0_agent_rsp_fifo_out_data;                              // product_info_0_avalon_slave_0_agent_rsp_fifo:out_data -> product_info_0_avalon_slave_0_agent:rf_sink_data
	wire          product_info_0_avalon_slave_0_agent_rsp_fifo_out_ready;                             // product_info_0_avalon_slave_0_agent:rf_sink_ready -> product_info_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          product_info_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                     // product_info_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> product_info_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          product_info_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                       // product_info_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> product_info_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                       // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire          sysid_qsys_0_control_slave_agent_m0_waitrequest;                                    // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire          sysid_qsys_0_control_slave_agent_m0_debugaccess;                                    // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire   [19:0] sysid_qsys_0_control_slave_agent_m0_address;                                        // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire    [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                     // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire          sysid_qsys_0_control_slave_agent_m0_read;                                           // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire          sysid_qsys_0_control_slave_agent_m0_readdatavalid;                                  // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire          sysid_qsys_0_control_slave_agent_m0_lock;                                           // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire   [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                      // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire          sysid_qsys_0_control_slave_agent_m0_write;                                          // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire    [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                     // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire          sysid_qsys_0_control_slave_agent_rf_source_valid;                                   // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [100:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                    // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire          sysid_qsys_0_control_slave_agent_rf_source_ready;                                   // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire          sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                           // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                             // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                                // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [100:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                                 // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                                // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                     // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                  // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                  // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [19:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                      // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                         // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                    // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                        // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                   // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                 // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [100:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                  // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                 // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                         // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                           // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [100:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                              // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                           // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                           // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [19:0] onchip_memory2_0_s1_agent_m0_address;                                               // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                            // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                  // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                         // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                  // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                             // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                 // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                            // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                          // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [100:0] onchip_memory2_0_s1_agent_rf_source_data;                                           // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                          // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                  // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                    // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                       // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [100:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                        // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                       // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                               // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                 // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire   [31:0] timer_0_s1_agent_m0_readdata;                                                       // timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	wire          timer_0_s1_agent_m0_waitrequest;                                                    // timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	wire          timer_0_s1_agent_m0_debugaccess;                                                    // timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	wire   [19:0] timer_0_s1_agent_m0_address;                                                        // timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	wire    [3:0] timer_0_s1_agent_m0_byteenable;                                                     // timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	wire          timer_0_s1_agent_m0_read;                                                           // timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	wire          timer_0_s1_agent_m0_readdatavalid;                                                  // timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	wire          timer_0_s1_agent_m0_lock;                                                           // timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	wire   [31:0] timer_0_s1_agent_m0_writedata;                                                      // timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	wire          timer_0_s1_agent_m0_write;                                                          // timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	wire    [2:0] timer_0_s1_agent_m0_burstcount;                                                     // timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	wire          timer_0_s1_agent_rf_source_valid;                                                   // timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	wire  [100:0] timer_0_s1_agent_rf_source_data;                                                    // timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	wire          timer_0_s1_agent_rf_source_ready;                                                   // timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	wire          timer_0_s1_agent_rf_source_startofpacket;                                           // timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	wire          timer_0_s1_agent_rf_source_endofpacket;                                             // timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_valid;                                                // timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	wire  [100:0] timer_0_s1_agent_rsp_fifo_out_data;                                                 // timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	wire          timer_0_s1_agent_rsp_fifo_out_ready;                                                // timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	wire          timer_0_s1_agent_rsp_fifo_out_startofpacket;                                        // timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	wire          timer_0_s1_agent_rsp_fifo_out_endofpacket;                                          // timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	wire   [31:0] in_fifo_used_s1_agent_m0_readdata;                                                  // in_fifo_used_s1_translator:uav_readdata -> in_fifo_used_s1_agent:m0_readdata
	wire          in_fifo_used_s1_agent_m0_waitrequest;                                               // in_fifo_used_s1_translator:uav_waitrequest -> in_fifo_used_s1_agent:m0_waitrequest
	wire          in_fifo_used_s1_agent_m0_debugaccess;                                               // in_fifo_used_s1_agent:m0_debugaccess -> in_fifo_used_s1_translator:uav_debugaccess
	wire   [19:0] in_fifo_used_s1_agent_m0_address;                                                   // in_fifo_used_s1_agent:m0_address -> in_fifo_used_s1_translator:uav_address
	wire    [3:0] in_fifo_used_s1_agent_m0_byteenable;                                                // in_fifo_used_s1_agent:m0_byteenable -> in_fifo_used_s1_translator:uav_byteenable
	wire          in_fifo_used_s1_agent_m0_read;                                                      // in_fifo_used_s1_agent:m0_read -> in_fifo_used_s1_translator:uav_read
	wire          in_fifo_used_s1_agent_m0_readdatavalid;                                             // in_fifo_used_s1_translator:uav_readdatavalid -> in_fifo_used_s1_agent:m0_readdatavalid
	wire          in_fifo_used_s1_agent_m0_lock;                                                      // in_fifo_used_s1_agent:m0_lock -> in_fifo_used_s1_translator:uav_lock
	wire   [31:0] in_fifo_used_s1_agent_m0_writedata;                                                 // in_fifo_used_s1_agent:m0_writedata -> in_fifo_used_s1_translator:uav_writedata
	wire          in_fifo_used_s1_agent_m0_write;                                                     // in_fifo_used_s1_agent:m0_write -> in_fifo_used_s1_translator:uav_write
	wire    [2:0] in_fifo_used_s1_agent_m0_burstcount;                                                // in_fifo_used_s1_agent:m0_burstcount -> in_fifo_used_s1_translator:uav_burstcount
	wire          in_fifo_used_s1_agent_rf_source_valid;                                              // in_fifo_used_s1_agent:rf_source_valid -> in_fifo_used_s1_agent_rsp_fifo:in_valid
	wire  [100:0] in_fifo_used_s1_agent_rf_source_data;                                               // in_fifo_used_s1_agent:rf_source_data -> in_fifo_used_s1_agent_rsp_fifo:in_data
	wire          in_fifo_used_s1_agent_rf_source_ready;                                              // in_fifo_used_s1_agent_rsp_fifo:in_ready -> in_fifo_used_s1_agent:rf_source_ready
	wire          in_fifo_used_s1_agent_rf_source_startofpacket;                                      // in_fifo_used_s1_agent:rf_source_startofpacket -> in_fifo_used_s1_agent_rsp_fifo:in_startofpacket
	wire          in_fifo_used_s1_agent_rf_source_endofpacket;                                        // in_fifo_used_s1_agent:rf_source_endofpacket -> in_fifo_used_s1_agent_rsp_fifo:in_endofpacket
	wire          in_fifo_used_s1_agent_rsp_fifo_out_valid;                                           // in_fifo_used_s1_agent_rsp_fifo:out_valid -> in_fifo_used_s1_agent:rf_sink_valid
	wire  [100:0] in_fifo_used_s1_agent_rsp_fifo_out_data;                                            // in_fifo_used_s1_agent_rsp_fifo:out_data -> in_fifo_used_s1_agent:rf_sink_data
	wire          in_fifo_used_s1_agent_rsp_fifo_out_ready;                                           // in_fifo_used_s1_agent:rf_sink_ready -> in_fifo_used_s1_agent_rsp_fifo:out_ready
	wire          in_fifo_used_s1_agent_rsp_fifo_out_startofpacket;                                   // in_fifo_used_s1_agent_rsp_fifo:out_startofpacket -> in_fifo_used_s1_agent:rf_sink_startofpacket
	wire          in_fifo_used_s1_agent_rsp_fifo_out_endofpacket;                                     // in_fifo_used_s1_agent_rsp_fifo:out_endofpacket -> in_fifo_used_s1_agent:rf_sink_endofpacket
	wire   [31:0] in_port_data_s1_agent_m0_readdata;                                                  // in_port_data_s1_translator:uav_readdata -> in_port_data_s1_agent:m0_readdata
	wire          in_port_data_s1_agent_m0_waitrequest;                                               // in_port_data_s1_translator:uav_waitrequest -> in_port_data_s1_agent:m0_waitrequest
	wire          in_port_data_s1_agent_m0_debugaccess;                                               // in_port_data_s1_agent:m0_debugaccess -> in_port_data_s1_translator:uav_debugaccess
	wire   [19:0] in_port_data_s1_agent_m0_address;                                                   // in_port_data_s1_agent:m0_address -> in_port_data_s1_translator:uav_address
	wire    [3:0] in_port_data_s1_agent_m0_byteenable;                                                // in_port_data_s1_agent:m0_byteenable -> in_port_data_s1_translator:uav_byteenable
	wire          in_port_data_s1_agent_m0_read;                                                      // in_port_data_s1_agent:m0_read -> in_port_data_s1_translator:uav_read
	wire          in_port_data_s1_agent_m0_readdatavalid;                                             // in_port_data_s1_translator:uav_readdatavalid -> in_port_data_s1_agent:m0_readdatavalid
	wire          in_port_data_s1_agent_m0_lock;                                                      // in_port_data_s1_agent:m0_lock -> in_port_data_s1_translator:uav_lock
	wire   [31:0] in_port_data_s1_agent_m0_writedata;                                                 // in_port_data_s1_agent:m0_writedata -> in_port_data_s1_translator:uav_writedata
	wire          in_port_data_s1_agent_m0_write;                                                     // in_port_data_s1_agent:m0_write -> in_port_data_s1_translator:uav_write
	wire    [2:0] in_port_data_s1_agent_m0_burstcount;                                                // in_port_data_s1_agent:m0_burstcount -> in_port_data_s1_translator:uav_burstcount
	wire          in_port_data_s1_agent_rf_source_valid;                                              // in_port_data_s1_agent:rf_source_valid -> in_port_data_s1_agent_rsp_fifo:in_valid
	wire  [100:0] in_port_data_s1_agent_rf_source_data;                                               // in_port_data_s1_agent:rf_source_data -> in_port_data_s1_agent_rsp_fifo:in_data
	wire          in_port_data_s1_agent_rf_source_ready;                                              // in_port_data_s1_agent_rsp_fifo:in_ready -> in_port_data_s1_agent:rf_source_ready
	wire          in_port_data_s1_agent_rf_source_startofpacket;                                      // in_port_data_s1_agent:rf_source_startofpacket -> in_port_data_s1_agent_rsp_fifo:in_startofpacket
	wire          in_port_data_s1_agent_rf_source_endofpacket;                                        // in_port_data_s1_agent:rf_source_endofpacket -> in_port_data_s1_agent_rsp_fifo:in_endofpacket
	wire          in_port_data_s1_agent_rsp_fifo_out_valid;                                           // in_port_data_s1_agent_rsp_fifo:out_valid -> in_port_data_s1_agent:rf_sink_valid
	wire  [100:0] in_port_data_s1_agent_rsp_fifo_out_data;                                            // in_port_data_s1_agent_rsp_fifo:out_data -> in_port_data_s1_agent:rf_sink_data
	wire          in_port_data_s1_agent_rsp_fifo_out_ready;                                           // in_port_data_s1_agent:rf_sink_ready -> in_port_data_s1_agent_rsp_fifo:out_ready
	wire          in_port_data_s1_agent_rsp_fifo_out_startofpacket;                                   // in_port_data_s1_agent_rsp_fifo:out_startofpacket -> in_port_data_s1_agent:rf_sink_startofpacket
	wire          in_port_data_s1_agent_rsp_fifo_out_endofpacket;                                     // in_port_data_s1_agent_rsp_fifo:out_endofpacket -> in_port_data_s1_agent:rf_sink_endofpacket
	wire   [31:0] in_port_ec_flags_s1_agent_m0_readdata;                                              // in_port_ec_flags_s1_translator:uav_readdata -> in_port_ec_flags_s1_agent:m0_readdata
	wire          in_port_ec_flags_s1_agent_m0_waitrequest;                                           // in_port_ec_flags_s1_translator:uav_waitrequest -> in_port_ec_flags_s1_agent:m0_waitrequest
	wire          in_port_ec_flags_s1_agent_m0_debugaccess;                                           // in_port_ec_flags_s1_agent:m0_debugaccess -> in_port_ec_flags_s1_translator:uav_debugaccess
	wire   [19:0] in_port_ec_flags_s1_agent_m0_address;                                               // in_port_ec_flags_s1_agent:m0_address -> in_port_ec_flags_s1_translator:uav_address
	wire    [3:0] in_port_ec_flags_s1_agent_m0_byteenable;                                            // in_port_ec_flags_s1_agent:m0_byteenable -> in_port_ec_flags_s1_translator:uav_byteenable
	wire          in_port_ec_flags_s1_agent_m0_read;                                                  // in_port_ec_flags_s1_agent:m0_read -> in_port_ec_flags_s1_translator:uav_read
	wire          in_port_ec_flags_s1_agent_m0_readdatavalid;                                         // in_port_ec_flags_s1_translator:uav_readdatavalid -> in_port_ec_flags_s1_agent:m0_readdatavalid
	wire          in_port_ec_flags_s1_agent_m0_lock;                                                  // in_port_ec_flags_s1_agent:m0_lock -> in_port_ec_flags_s1_translator:uav_lock
	wire   [31:0] in_port_ec_flags_s1_agent_m0_writedata;                                             // in_port_ec_flags_s1_agent:m0_writedata -> in_port_ec_flags_s1_translator:uav_writedata
	wire          in_port_ec_flags_s1_agent_m0_write;                                                 // in_port_ec_flags_s1_agent:m0_write -> in_port_ec_flags_s1_translator:uav_write
	wire    [2:0] in_port_ec_flags_s1_agent_m0_burstcount;                                            // in_port_ec_flags_s1_agent:m0_burstcount -> in_port_ec_flags_s1_translator:uav_burstcount
	wire          in_port_ec_flags_s1_agent_rf_source_valid;                                          // in_port_ec_flags_s1_agent:rf_source_valid -> in_port_ec_flags_s1_agent_rsp_fifo:in_valid
	wire  [100:0] in_port_ec_flags_s1_agent_rf_source_data;                                           // in_port_ec_flags_s1_agent:rf_source_data -> in_port_ec_flags_s1_agent_rsp_fifo:in_data
	wire          in_port_ec_flags_s1_agent_rf_source_ready;                                          // in_port_ec_flags_s1_agent_rsp_fifo:in_ready -> in_port_ec_flags_s1_agent:rf_source_ready
	wire          in_port_ec_flags_s1_agent_rf_source_startofpacket;                                  // in_port_ec_flags_s1_agent:rf_source_startofpacket -> in_port_ec_flags_s1_agent_rsp_fifo:in_startofpacket
	wire          in_port_ec_flags_s1_agent_rf_source_endofpacket;                                    // in_port_ec_flags_s1_agent:rf_source_endofpacket -> in_port_ec_flags_s1_agent_rsp_fifo:in_endofpacket
	wire          in_port_ec_flags_s1_agent_rsp_fifo_out_valid;                                       // in_port_ec_flags_s1_agent_rsp_fifo:out_valid -> in_port_ec_flags_s1_agent:rf_sink_valid
	wire  [100:0] in_port_ec_flags_s1_agent_rsp_fifo_out_data;                                        // in_port_ec_flags_s1_agent_rsp_fifo:out_data -> in_port_ec_flags_s1_agent:rf_sink_data
	wire          in_port_ec_flags_s1_agent_rsp_fifo_out_ready;                                       // in_port_ec_flags_s1_agent:rf_sink_ready -> in_port_ec_flags_s1_agent_rsp_fifo:out_ready
	wire          in_port_ec_flags_s1_agent_rsp_fifo_out_startofpacket;                               // in_port_ec_flags_s1_agent_rsp_fifo:out_startofpacket -> in_port_ec_flags_s1_agent:rf_sink_startofpacket
	wire          in_port_ec_flags_s1_agent_rsp_fifo_out_endofpacket;                                 // in_port_ec_flags_s1_agent_rsp_fifo:out_endofpacket -> in_port_ec_flags_s1_agent:rf_sink_endofpacket
	wire   [31:0] out_port_ctrl_s1_agent_m0_readdata;                                                 // out_port_ctrl_s1_translator:uav_readdata -> out_port_ctrl_s1_agent:m0_readdata
	wire          out_port_ctrl_s1_agent_m0_waitrequest;                                              // out_port_ctrl_s1_translator:uav_waitrequest -> out_port_ctrl_s1_agent:m0_waitrequest
	wire          out_port_ctrl_s1_agent_m0_debugaccess;                                              // out_port_ctrl_s1_agent:m0_debugaccess -> out_port_ctrl_s1_translator:uav_debugaccess
	wire   [19:0] out_port_ctrl_s1_agent_m0_address;                                                  // out_port_ctrl_s1_agent:m0_address -> out_port_ctrl_s1_translator:uav_address
	wire    [3:0] out_port_ctrl_s1_agent_m0_byteenable;                                               // out_port_ctrl_s1_agent:m0_byteenable -> out_port_ctrl_s1_translator:uav_byteenable
	wire          out_port_ctrl_s1_agent_m0_read;                                                     // out_port_ctrl_s1_agent:m0_read -> out_port_ctrl_s1_translator:uav_read
	wire          out_port_ctrl_s1_agent_m0_readdatavalid;                                            // out_port_ctrl_s1_translator:uav_readdatavalid -> out_port_ctrl_s1_agent:m0_readdatavalid
	wire          out_port_ctrl_s1_agent_m0_lock;                                                     // out_port_ctrl_s1_agent:m0_lock -> out_port_ctrl_s1_translator:uav_lock
	wire   [31:0] out_port_ctrl_s1_agent_m0_writedata;                                                // out_port_ctrl_s1_agent:m0_writedata -> out_port_ctrl_s1_translator:uav_writedata
	wire          out_port_ctrl_s1_agent_m0_write;                                                    // out_port_ctrl_s1_agent:m0_write -> out_port_ctrl_s1_translator:uav_write
	wire    [2:0] out_port_ctrl_s1_agent_m0_burstcount;                                               // out_port_ctrl_s1_agent:m0_burstcount -> out_port_ctrl_s1_translator:uav_burstcount
	wire          out_port_ctrl_s1_agent_rf_source_valid;                                             // out_port_ctrl_s1_agent:rf_source_valid -> out_port_ctrl_s1_agent_rsp_fifo:in_valid
	wire  [100:0] out_port_ctrl_s1_agent_rf_source_data;                                              // out_port_ctrl_s1_agent:rf_source_data -> out_port_ctrl_s1_agent_rsp_fifo:in_data
	wire          out_port_ctrl_s1_agent_rf_source_ready;                                             // out_port_ctrl_s1_agent_rsp_fifo:in_ready -> out_port_ctrl_s1_agent:rf_source_ready
	wire          out_port_ctrl_s1_agent_rf_source_startofpacket;                                     // out_port_ctrl_s1_agent:rf_source_startofpacket -> out_port_ctrl_s1_agent_rsp_fifo:in_startofpacket
	wire          out_port_ctrl_s1_agent_rf_source_endofpacket;                                       // out_port_ctrl_s1_agent:rf_source_endofpacket -> out_port_ctrl_s1_agent_rsp_fifo:in_endofpacket
	wire          out_port_ctrl_s1_agent_rsp_fifo_out_valid;                                          // out_port_ctrl_s1_agent_rsp_fifo:out_valid -> out_port_ctrl_s1_agent:rf_sink_valid
	wire  [100:0] out_port_ctrl_s1_agent_rsp_fifo_out_data;                                           // out_port_ctrl_s1_agent_rsp_fifo:out_data -> out_port_ctrl_s1_agent:rf_sink_data
	wire          out_port_ctrl_s1_agent_rsp_fifo_out_ready;                                          // out_port_ctrl_s1_agent:rf_sink_ready -> out_port_ctrl_s1_agent_rsp_fifo:out_ready
	wire          out_port_ctrl_s1_agent_rsp_fifo_out_startofpacket;                                  // out_port_ctrl_s1_agent_rsp_fifo:out_startofpacket -> out_port_ctrl_s1_agent:rf_sink_startofpacket
	wire          out_port_ctrl_s1_agent_rsp_fifo_out_endofpacket;                                    // out_port_ctrl_s1_agent_rsp_fifo:out_endofpacket -> out_port_ctrl_s1_agent:rf_sink_endofpacket
	wire   [31:0] in_port_dig_error_s1_agent_m0_readdata;                                             // in_port_dig_error_s1_translator:uav_readdata -> in_port_dig_error_s1_agent:m0_readdata
	wire          in_port_dig_error_s1_agent_m0_waitrequest;                                          // in_port_dig_error_s1_translator:uav_waitrequest -> in_port_dig_error_s1_agent:m0_waitrequest
	wire          in_port_dig_error_s1_agent_m0_debugaccess;                                          // in_port_dig_error_s1_agent:m0_debugaccess -> in_port_dig_error_s1_translator:uav_debugaccess
	wire   [19:0] in_port_dig_error_s1_agent_m0_address;                                              // in_port_dig_error_s1_agent:m0_address -> in_port_dig_error_s1_translator:uav_address
	wire    [3:0] in_port_dig_error_s1_agent_m0_byteenable;                                           // in_port_dig_error_s1_agent:m0_byteenable -> in_port_dig_error_s1_translator:uav_byteenable
	wire          in_port_dig_error_s1_agent_m0_read;                                                 // in_port_dig_error_s1_agent:m0_read -> in_port_dig_error_s1_translator:uav_read
	wire          in_port_dig_error_s1_agent_m0_readdatavalid;                                        // in_port_dig_error_s1_translator:uav_readdatavalid -> in_port_dig_error_s1_agent:m0_readdatavalid
	wire          in_port_dig_error_s1_agent_m0_lock;                                                 // in_port_dig_error_s1_agent:m0_lock -> in_port_dig_error_s1_translator:uav_lock
	wire   [31:0] in_port_dig_error_s1_agent_m0_writedata;                                            // in_port_dig_error_s1_agent:m0_writedata -> in_port_dig_error_s1_translator:uav_writedata
	wire          in_port_dig_error_s1_agent_m0_write;                                                // in_port_dig_error_s1_agent:m0_write -> in_port_dig_error_s1_translator:uav_write
	wire    [2:0] in_port_dig_error_s1_agent_m0_burstcount;                                           // in_port_dig_error_s1_agent:m0_burstcount -> in_port_dig_error_s1_translator:uav_burstcount
	wire          in_port_dig_error_s1_agent_rf_source_valid;                                         // in_port_dig_error_s1_agent:rf_source_valid -> in_port_dig_error_s1_agent_rsp_fifo:in_valid
	wire  [100:0] in_port_dig_error_s1_agent_rf_source_data;                                          // in_port_dig_error_s1_agent:rf_source_data -> in_port_dig_error_s1_agent_rsp_fifo:in_data
	wire          in_port_dig_error_s1_agent_rf_source_ready;                                         // in_port_dig_error_s1_agent_rsp_fifo:in_ready -> in_port_dig_error_s1_agent:rf_source_ready
	wire          in_port_dig_error_s1_agent_rf_source_startofpacket;                                 // in_port_dig_error_s1_agent:rf_source_startofpacket -> in_port_dig_error_s1_agent_rsp_fifo:in_startofpacket
	wire          in_port_dig_error_s1_agent_rf_source_endofpacket;                                   // in_port_dig_error_s1_agent:rf_source_endofpacket -> in_port_dig_error_s1_agent_rsp_fifo:in_endofpacket
	wire          in_port_dig_error_s1_agent_rsp_fifo_out_valid;                                      // in_port_dig_error_s1_agent_rsp_fifo:out_valid -> in_port_dig_error_s1_agent:rf_sink_valid
	wire  [100:0] in_port_dig_error_s1_agent_rsp_fifo_out_data;                                       // in_port_dig_error_s1_agent_rsp_fifo:out_data -> in_port_dig_error_s1_agent:rf_sink_data
	wire          in_port_dig_error_s1_agent_rsp_fifo_out_ready;                                      // in_port_dig_error_s1_agent:rf_sink_ready -> in_port_dig_error_s1_agent_rsp_fifo:out_ready
	wire          in_port_dig_error_s1_agent_rsp_fifo_out_startofpacket;                              // in_port_dig_error_s1_agent_rsp_fifo:out_startofpacket -> in_port_dig_error_s1_agent:rf_sink_startofpacket
	wire          in_port_dig_error_s1_agent_rsp_fifo_out_endofpacket;                                // in_port_dig_error_s1_agent_rsp_fifo:out_endofpacket -> in_port_dig_error_s1_agent:rf_sink_endofpacket
	wire   [31:0] uart_0_s1_agent_m0_readdata;                                                        // uart_0_s1_translator:uav_readdata -> uart_0_s1_agent:m0_readdata
	wire          uart_0_s1_agent_m0_waitrequest;                                                     // uart_0_s1_translator:uav_waitrequest -> uart_0_s1_agent:m0_waitrequest
	wire          uart_0_s1_agent_m0_debugaccess;                                                     // uart_0_s1_agent:m0_debugaccess -> uart_0_s1_translator:uav_debugaccess
	wire   [19:0] uart_0_s1_agent_m0_address;                                                         // uart_0_s1_agent:m0_address -> uart_0_s1_translator:uav_address
	wire    [3:0] uart_0_s1_agent_m0_byteenable;                                                      // uart_0_s1_agent:m0_byteenable -> uart_0_s1_translator:uav_byteenable
	wire          uart_0_s1_agent_m0_read;                                                            // uart_0_s1_agent:m0_read -> uart_0_s1_translator:uav_read
	wire          uart_0_s1_agent_m0_readdatavalid;                                                   // uart_0_s1_translator:uav_readdatavalid -> uart_0_s1_agent:m0_readdatavalid
	wire          uart_0_s1_agent_m0_lock;                                                            // uart_0_s1_agent:m0_lock -> uart_0_s1_translator:uav_lock
	wire   [31:0] uart_0_s1_agent_m0_writedata;                                                       // uart_0_s1_agent:m0_writedata -> uart_0_s1_translator:uav_writedata
	wire          uart_0_s1_agent_m0_write;                                                           // uart_0_s1_agent:m0_write -> uart_0_s1_translator:uav_write
	wire    [2:0] uart_0_s1_agent_m0_burstcount;                                                      // uart_0_s1_agent:m0_burstcount -> uart_0_s1_translator:uav_burstcount
	wire          uart_0_s1_agent_rf_source_valid;                                                    // uart_0_s1_agent:rf_source_valid -> uart_0_s1_agent_rsp_fifo:in_valid
	wire  [100:0] uart_0_s1_agent_rf_source_data;                                                     // uart_0_s1_agent:rf_source_data -> uart_0_s1_agent_rsp_fifo:in_data
	wire          uart_0_s1_agent_rf_source_ready;                                                    // uart_0_s1_agent_rsp_fifo:in_ready -> uart_0_s1_agent:rf_source_ready
	wire          uart_0_s1_agent_rf_source_startofpacket;                                            // uart_0_s1_agent:rf_source_startofpacket -> uart_0_s1_agent_rsp_fifo:in_startofpacket
	wire          uart_0_s1_agent_rf_source_endofpacket;                                              // uart_0_s1_agent:rf_source_endofpacket -> uart_0_s1_agent_rsp_fifo:in_endofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_valid;                                                 // uart_0_s1_agent_rsp_fifo:out_valid -> uart_0_s1_agent:rf_sink_valid
	wire  [100:0] uart_0_s1_agent_rsp_fifo_out_data;                                                  // uart_0_s1_agent_rsp_fifo:out_data -> uart_0_s1_agent:rf_sink_data
	wire          uart_0_s1_agent_rsp_fifo_out_ready;                                                 // uart_0_s1_agent:rf_sink_ready -> uart_0_s1_agent_rsp_fifo:out_ready
	wire          uart_0_s1_agent_rsp_fifo_out_startofpacket;                                         // uart_0_s1_agent_rsp_fifo:out_startofpacket -> uart_0_s1_agent:rf_sink_startofpacket
	wire          uart_0_s1_agent_rsp_fifo_out_endofpacket;                                           // uart_0_s1_agent_rsp_fifo:out_endofpacket -> uart_0_s1_agent:rf_sink_endofpacket
	wire   [31:0] out_port_prodnum_s1_agent_m0_readdata;                                              // out_port_prodnum_s1_translator:uav_readdata -> out_port_prodnum_s1_agent:m0_readdata
	wire          out_port_prodnum_s1_agent_m0_waitrequest;                                           // out_port_prodnum_s1_translator:uav_waitrequest -> out_port_prodnum_s1_agent:m0_waitrequest
	wire          out_port_prodnum_s1_agent_m0_debugaccess;                                           // out_port_prodnum_s1_agent:m0_debugaccess -> out_port_prodnum_s1_translator:uav_debugaccess
	wire   [19:0] out_port_prodnum_s1_agent_m0_address;                                               // out_port_prodnum_s1_agent:m0_address -> out_port_prodnum_s1_translator:uav_address
	wire    [3:0] out_port_prodnum_s1_agent_m0_byteenable;                                            // out_port_prodnum_s1_agent:m0_byteenable -> out_port_prodnum_s1_translator:uav_byteenable
	wire          out_port_prodnum_s1_agent_m0_read;                                                  // out_port_prodnum_s1_agent:m0_read -> out_port_prodnum_s1_translator:uav_read
	wire          out_port_prodnum_s1_agent_m0_readdatavalid;                                         // out_port_prodnum_s1_translator:uav_readdatavalid -> out_port_prodnum_s1_agent:m0_readdatavalid
	wire          out_port_prodnum_s1_agent_m0_lock;                                                  // out_port_prodnum_s1_agent:m0_lock -> out_port_prodnum_s1_translator:uav_lock
	wire   [31:0] out_port_prodnum_s1_agent_m0_writedata;                                             // out_port_prodnum_s1_agent:m0_writedata -> out_port_prodnum_s1_translator:uav_writedata
	wire          out_port_prodnum_s1_agent_m0_write;                                                 // out_port_prodnum_s1_agent:m0_write -> out_port_prodnum_s1_translator:uav_write
	wire    [2:0] out_port_prodnum_s1_agent_m0_burstcount;                                            // out_port_prodnum_s1_agent:m0_burstcount -> out_port_prodnum_s1_translator:uav_burstcount
	wire          out_port_prodnum_s1_agent_rf_source_valid;                                          // out_port_prodnum_s1_agent:rf_source_valid -> out_port_prodnum_s1_agent_rsp_fifo:in_valid
	wire  [100:0] out_port_prodnum_s1_agent_rf_source_data;                                           // out_port_prodnum_s1_agent:rf_source_data -> out_port_prodnum_s1_agent_rsp_fifo:in_data
	wire          out_port_prodnum_s1_agent_rf_source_ready;                                          // out_port_prodnum_s1_agent_rsp_fifo:in_ready -> out_port_prodnum_s1_agent:rf_source_ready
	wire          out_port_prodnum_s1_agent_rf_source_startofpacket;                                  // out_port_prodnum_s1_agent:rf_source_startofpacket -> out_port_prodnum_s1_agent_rsp_fifo:in_startofpacket
	wire          out_port_prodnum_s1_agent_rf_source_endofpacket;                                    // out_port_prodnum_s1_agent:rf_source_endofpacket -> out_port_prodnum_s1_agent_rsp_fifo:in_endofpacket
	wire          out_port_prodnum_s1_agent_rsp_fifo_out_valid;                                       // out_port_prodnum_s1_agent_rsp_fifo:out_valid -> out_port_prodnum_s1_agent:rf_sink_valid
	wire  [100:0] out_port_prodnum_s1_agent_rsp_fifo_out_data;                                        // out_port_prodnum_s1_agent_rsp_fifo:out_data -> out_port_prodnum_s1_agent:rf_sink_data
	wire          out_port_prodnum_s1_agent_rsp_fifo_out_ready;                                       // out_port_prodnum_s1_agent:rf_sink_ready -> out_port_prodnum_s1_agent_rsp_fifo:out_ready
	wire          out_port_prodnum_s1_agent_rsp_fifo_out_startofpacket;                               // out_port_prodnum_s1_agent_rsp_fifo:out_startofpacket -> out_port_prodnum_s1_agent:rf_sink_startofpacket
	wire          out_port_prodnum_s1_agent_rsp_fifo_out_endofpacket;                                 // out_port_prodnum_s1_agent_rsp_fifo:out_endofpacket -> out_port_prodnum_s1_agent:rf_sink_endofpacket
	wire   [31:0] out_port_batnum_s1_agent_m0_readdata;                                               // out_port_batnum_s1_translator:uav_readdata -> out_port_batnum_s1_agent:m0_readdata
	wire          out_port_batnum_s1_agent_m0_waitrequest;                                            // out_port_batnum_s1_translator:uav_waitrequest -> out_port_batnum_s1_agent:m0_waitrequest
	wire          out_port_batnum_s1_agent_m0_debugaccess;                                            // out_port_batnum_s1_agent:m0_debugaccess -> out_port_batnum_s1_translator:uav_debugaccess
	wire   [19:0] out_port_batnum_s1_agent_m0_address;                                                // out_port_batnum_s1_agent:m0_address -> out_port_batnum_s1_translator:uav_address
	wire    [3:0] out_port_batnum_s1_agent_m0_byteenable;                                             // out_port_batnum_s1_agent:m0_byteenable -> out_port_batnum_s1_translator:uav_byteenable
	wire          out_port_batnum_s1_agent_m0_read;                                                   // out_port_batnum_s1_agent:m0_read -> out_port_batnum_s1_translator:uav_read
	wire          out_port_batnum_s1_agent_m0_readdatavalid;                                          // out_port_batnum_s1_translator:uav_readdatavalid -> out_port_batnum_s1_agent:m0_readdatavalid
	wire          out_port_batnum_s1_agent_m0_lock;                                                   // out_port_batnum_s1_agent:m0_lock -> out_port_batnum_s1_translator:uav_lock
	wire   [31:0] out_port_batnum_s1_agent_m0_writedata;                                              // out_port_batnum_s1_agent:m0_writedata -> out_port_batnum_s1_translator:uav_writedata
	wire          out_port_batnum_s1_agent_m0_write;                                                  // out_port_batnum_s1_agent:m0_write -> out_port_batnum_s1_translator:uav_write
	wire    [2:0] out_port_batnum_s1_agent_m0_burstcount;                                             // out_port_batnum_s1_agent:m0_burstcount -> out_port_batnum_s1_translator:uav_burstcount
	wire          out_port_batnum_s1_agent_rf_source_valid;                                           // out_port_batnum_s1_agent:rf_source_valid -> out_port_batnum_s1_agent_rsp_fifo:in_valid
	wire  [100:0] out_port_batnum_s1_agent_rf_source_data;                                            // out_port_batnum_s1_agent:rf_source_data -> out_port_batnum_s1_agent_rsp_fifo:in_data
	wire          out_port_batnum_s1_agent_rf_source_ready;                                           // out_port_batnum_s1_agent_rsp_fifo:in_ready -> out_port_batnum_s1_agent:rf_source_ready
	wire          out_port_batnum_s1_agent_rf_source_startofpacket;                                   // out_port_batnum_s1_agent:rf_source_startofpacket -> out_port_batnum_s1_agent_rsp_fifo:in_startofpacket
	wire          out_port_batnum_s1_agent_rf_source_endofpacket;                                     // out_port_batnum_s1_agent:rf_source_endofpacket -> out_port_batnum_s1_agent_rsp_fifo:in_endofpacket
	wire          out_port_batnum_s1_agent_rsp_fifo_out_valid;                                        // out_port_batnum_s1_agent_rsp_fifo:out_valid -> out_port_batnum_s1_agent:rf_sink_valid
	wire  [100:0] out_port_batnum_s1_agent_rsp_fifo_out_data;                                         // out_port_batnum_s1_agent_rsp_fifo:out_data -> out_port_batnum_s1_agent:rf_sink_data
	wire          out_port_batnum_s1_agent_rsp_fifo_out_ready;                                        // out_port_batnum_s1_agent:rf_sink_ready -> out_port_batnum_s1_agent_rsp_fifo:out_ready
	wire          out_port_batnum_s1_agent_rsp_fifo_out_startofpacket;                                // out_port_batnum_s1_agent_rsp_fifo:out_startofpacket -> out_port_batnum_s1_agent:rf_sink_startofpacket
	wire          out_port_batnum_s1_agent_rsp_fifo_out_endofpacket;                                  // out_port_batnum_s1_agent_rsp_fifo:out_endofpacket -> out_port_batnum_s1_agent:rf_sink_endofpacket
	wire   [31:0] out_port_lut_data_s1_agent_m0_readdata;                                             // out_port_lut_data_s1_translator:uav_readdata -> out_port_lut_data_s1_agent:m0_readdata
	wire          out_port_lut_data_s1_agent_m0_waitrequest;                                          // out_port_lut_data_s1_translator:uav_waitrequest -> out_port_lut_data_s1_agent:m0_waitrequest
	wire          out_port_lut_data_s1_agent_m0_debugaccess;                                          // out_port_lut_data_s1_agent:m0_debugaccess -> out_port_lut_data_s1_translator:uav_debugaccess
	wire   [19:0] out_port_lut_data_s1_agent_m0_address;                                              // out_port_lut_data_s1_agent:m0_address -> out_port_lut_data_s1_translator:uav_address
	wire    [3:0] out_port_lut_data_s1_agent_m0_byteenable;                                           // out_port_lut_data_s1_agent:m0_byteenable -> out_port_lut_data_s1_translator:uav_byteenable
	wire          out_port_lut_data_s1_agent_m0_read;                                                 // out_port_lut_data_s1_agent:m0_read -> out_port_lut_data_s1_translator:uav_read
	wire          out_port_lut_data_s1_agent_m0_readdatavalid;                                        // out_port_lut_data_s1_translator:uav_readdatavalid -> out_port_lut_data_s1_agent:m0_readdatavalid
	wire          out_port_lut_data_s1_agent_m0_lock;                                                 // out_port_lut_data_s1_agent:m0_lock -> out_port_lut_data_s1_translator:uav_lock
	wire   [31:0] out_port_lut_data_s1_agent_m0_writedata;                                            // out_port_lut_data_s1_agent:m0_writedata -> out_port_lut_data_s1_translator:uav_writedata
	wire          out_port_lut_data_s1_agent_m0_write;                                                // out_port_lut_data_s1_agent:m0_write -> out_port_lut_data_s1_translator:uav_write
	wire    [2:0] out_port_lut_data_s1_agent_m0_burstcount;                                           // out_port_lut_data_s1_agent:m0_burstcount -> out_port_lut_data_s1_translator:uav_burstcount
	wire          out_port_lut_data_s1_agent_rf_source_valid;                                         // out_port_lut_data_s1_agent:rf_source_valid -> out_port_lut_data_s1_agent_rsp_fifo:in_valid
	wire  [100:0] out_port_lut_data_s1_agent_rf_source_data;                                          // out_port_lut_data_s1_agent:rf_source_data -> out_port_lut_data_s1_agent_rsp_fifo:in_data
	wire          out_port_lut_data_s1_agent_rf_source_ready;                                         // out_port_lut_data_s1_agent_rsp_fifo:in_ready -> out_port_lut_data_s1_agent:rf_source_ready
	wire          out_port_lut_data_s1_agent_rf_source_startofpacket;                                 // out_port_lut_data_s1_agent:rf_source_startofpacket -> out_port_lut_data_s1_agent_rsp_fifo:in_startofpacket
	wire          out_port_lut_data_s1_agent_rf_source_endofpacket;                                   // out_port_lut_data_s1_agent:rf_source_endofpacket -> out_port_lut_data_s1_agent_rsp_fifo:in_endofpacket
	wire          out_port_lut_data_s1_agent_rsp_fifo_out_valid;                                      // out_port_lut_data_s1_agent_rsp_fifo:out_valid -> out_port_lut_data_s1_agent:rf_sink_valid
	wire  [100:0] out_port_lut_data_s1_agent_rsp_fifo_out_data;                                       // out_port_lut_data_s1_agent_rsp_fifo:out_data -> out_port_lut_data_s1_agent:rf_sink_data
	wire          out_port_lut_data_s1_agent_rsp_fifo_out_ready;                                      // out_port_lut_data_s1_agent:rf_sink_ready -> out_port_lut_data_s1_agent_rsp_fifo:out_ready
	wire          out_port_lut_data_s1_agent_rsp_fifo_out_startofpacket;                              // out_port_lut_data_s1_agent_rsp_fifo:out_startofpacket -> out_port_lut_data_s1_agent:rf_sink_startofpacket
	wire          out_port_lut_data_s1_agent_rsp_fifo_out_endofpacket;                                // out_port_lut_data_s1_agent_rsp_fifo:out_endofpacket -> out_port_lut_data_s1_agent:rf_sink_endofpacket
	wire   [31:0] out_port_lut_adr_s1_agent_m0_readdata;                                              // out_port_lut_adr_s1_translator:uav_readdata -> out_port_lut_adr_s1_agent:m0_readdata
	wire          out_port_lut_adr_s1_agent_m0_waitrequest;                                           // out_port_lut_adr_s1_translator:uav_waitrequest -> out_port_lut_adr_s1_agent:m0_waitrequest
	wire          out_port_lut_adr_s1_agent_m0_debugaccess;                                           // out_port_lut_adr_s1_agent:m0_debugaccess -> out_port_lut_adr_s1_translator:uav_debugaccess
	wire   [19:0] out_port_lut_adr_s1_agent_m0_address;                                               // out_port_lut_adr_s1_agent:m0_address -> out_port_lut_adr_s1_translator:uav_address
	wire    [3:0] out_port_lut_adr_s1_agent_m0_byteenable;                                            // out_port_lut_adr_s1_agent:m0_byteenable -> out_port_lut_adr_s1_translator:uav_byteenable
	wire          out_port_lut_adr_s1_agent_m0_read;                                                  // out_port_lut_adr_s1_agent:m0_read -> out_port_lut_adr_s1_translator:uav_read
	wire          out_port_lut_adr_s1_agent_m0_readdatavalid;                                         // out_port_lut_adr_s1_translator:uav_readdatavalid -> out_port_lut_adr_s1_agent:m0_readdatavalid
	wire          out_port_lut_adr_s1_agent_m0_lock;                                                  // out_port_lut_adr_s1_agent:m0_lock -> out_port_lut_adr_s1_translator:uav_lock
	wire   [31:0] out_port_lut_adr_s1_agent_m0_writedata;                                             // out_port_lut_adr_s1_agent:m0_writedata -> out_port_lut_adr_s1_translator:uav_writedata
	wire          out_port_lut_adr_s1_agent_m0_write;                                                 // out_port_lut_adr_s1_agent:m0_write -> out_port_lut_adr_s1_translator:uav_write
	wire    [2:0] out_port_lut_adr_s1_agent_m0_burstcount;                                            // out_port_lut_adr_s1_agent:m0_burstcount -> out_port_lut_adr_s1_translator:uav_burstcount
	wire          out_port_lut_adr_s1_agent_rf_source_valid;                                          // out_port_lut_adr_s1_agent:rf_source_valid -> out_port_lut_adr_s1_agent_rsp_fifo:in_valid
	wire  [100:0] out_port_lut_adr_s1_agent_rf_source_data;                                           // out_port_lut_adr_s1_agent:rf_source_data -> out_port_lut_adr_s1_agent_rsp_fifo:in_data
	wire          out_port_lut_adr_s1_agent_rf_source_ready;                                          // out_port_lut_adr_s1_agent_rsp_fifo:in_ready -> out_port_lut_adr_s1_agent:rf_source_ready
	wire          out_port_lut_adr_s1_agent_rf_source_startofpacket;                                  // out_port_lut_adr_s1_agent:rf_source_startofpacket -> out_port_lut_adr_s1_agent_rsp_fifo:in_startofpacket
	wire          out_port_lut_adr_s1_agent_rf_source_endofpacket;                                    // out_port_lut_adr_s1_agent:rf_source_endofpacket -> out_port_lut_adr_s1_agent_rsp_fifo:in_endofpacket
	wire          out_port_lut_adr_s1_agent_rsp_fifo_out_valid;                                       // out_port_lut_adr_s1_agent_rsp_fifo:out_valid -> out_port_lut_adr_s1_agent:rf_sink_valid
	wire  [100:0] out_port_lut_adr_s1_agent_rsp_fifo_out_data;                                        // out_port_lut_adr_s1_agent_rsp_fifo:out_data -> out_port_lut_adr_s1_agent:rf_sink_data
	wire          out_port_lut_adr_s1_agent_rsp_fifo_out_ready;                                       // out_port_lut_adr_s1_agent:rf_sink_ready -> out_port_lut_adr_s1_agent_rsp_fifo:out_ready
	wire          out_port_lut_adr_s1_agent_rsp_fifo_out_startofpacket;                               // out_port_lut_adr_s1_agent_rsp_fifo:out_startofpacket -> out_port_lut_adr_s1_agent:rf_sink_startofpacket
	wire          out_port_lut_adr_s1_agent_rsp_fifo_out_endofpacket;                                 // out_port_lut_adr_s1_agent_rsp_fifo:out_endofpacket -> out_port_lut_adr_s1_agent:rf_sink_endofpacket
	wire   [31:0] in_port_freq_cnt_s1_agent_m0_readdata;                                              // in_port_freq_cnt_s1_translator:uav_readdata -> in_port_freq_cnt_s1_agent:m0_readdata
	wire          in_port_freq_cnt_s1_agent_m0_waitrequest;                                           // in_port_freq_cnt_s1_translator:uav_waitrequest -> in_port_freq_cnt_s1_agent:m0_waitrequest
	wire          in_port_freq_cnt_s1_agent_m0_debugaccess;                                           // in_port_freq_cnt_s1_agent:m0_debugaccess -> in_port_freq_cnt_s1_translator:uav_debugaccess
	wire   [19:0] in_port_freq_cnt_s1_agent_m0_address;                                               // in_port_freq_cnt_s1_agent:m0_address -> in_port_freq_cnt_s1_translator:uav_address
	wire    [3:0] in_port_freq_cnt_s1_agent_m0_byteenable;                                            // in_port_freq_cnt_s1_agent:m0_byteenable -> in_port_freq_cnt_s1_translator:uav_byteenable
	wire          in_port_freq_cnt_s1_agent_m0_read;                                                  // in_port_freq_cnt_s1_agent:m0_read -> in_port_freq_cnt_s1_translator:uav_read
	wire          in_port_freq_cnt_s1_agent_m0_readdatavalid;                                         // in_port_freq_cnt_s1_translator:uav_readdatavalid -> in_port_freq_cnt_s1_agent:m0_readdatavalid
	wire          in_port_freq_cnt_s1_agent_m0_lock;                                                  // in_port_freq_cnt_s1_agent:m0_lock -> in_port_freq_cnt_s1_translator:uav_lock
	wire   [31:0] in_port_freq_cnt_s1_agent_m0_writedata;                                             // in_port_freq_cnt_s1_agent:m0_writedata -> in_port_freq_cnt_s1_translator:uav_writedata
	wire          in_port_freq_cnt_s1_agent_m0_write;                                                 // in_port_freq_cnt_s1_agent:m0_write -> in_port_freq_cnt_s1_translator:uav_write
	wire    [2:0] in_port_freq_cnt_s1_agent_m0_burstcount;                                            // in_port_freq_cnt_s1_agent:m0_burstcount -> in_port_freq_cnt_s1_translator:uav_burstcount
	wire          in_port_freq_cnt_s1_agent_rf_source_valid;                                          // in_port_freq_cnt_s1_agent:rf_source_valid -> in_port_freq_cnt_s1_agent_rsp_fifo:in_valid
	wire  [100:0] in_port_freq_cnt_s1_agent_rf_source_data;                                           // in_port_freq_cnt_s1_agent:rf_source_data -> in_port_freq_cnt_s1_agent_rsp_fifo:in_data
	wire          in_port_freq_cnt_s1_agent_rf_source_ready;                                          // in_port_freq_cnt_s1_agent_rsp_fifo:in_ready -> in_port_freq_cnt_s1_agent:rf_source_ready
	wire          in_port_freq_cnt_s1_agent_rf_source_startofpacket;                                  // in_port_freq_cnt_s1_agent:rf_source_startofpacket -> in_port_freq_cnt_s1_agent_rsp_fifo:in_startofpacket
	wire          in_port_freq_cnt_s1_agent_rf_source_endofpacket;                                    // in_port_freq_cnt_s1_agent:rf_source_endofpacket -> in_port_freq_cnt_s1_agent_rsp_fifo:in_endofpacket
	wire          in_port_freq_cnt_s1_agent_rsp_fifo_out_valid;                                       // in_port_freq_cnt_s1_agent_rsp_fifo:out_valid -> in_port_freq_cnt_s1_agent:rf_sink_valid
	wire  [100:0] in_port_freq_cnt_s1_agent_rsp_fifo_out_data;                                        // in_port_freq_cnt_s1_agent_rsp_fifo:out_data -> in_port_freq_cnt_s1_agent:rf_sink_data
	wire          in_port_freq_cnt_s1_agent_rsp_fifo_out_ready;                                       // in_port_freq_cnt_s1_agent:rf_sink_ready -> in_port_freq_cnt_s1_agent_rsp_fifo:out_ready
	wire          in_port_freq_cnt_s1_agent_rsp_fifo_out_startofpacket;                               // in_port_freq_cnt_s1_agent_rsp_fifo:out_startofpacket -> in_port_freq_cnt_s1_agent:rf_sink_startofpacket
	wire          in_port_freq_cnt_s1_agent_rsp_fifo_out_endofpacket;                                 // in_port_freq_cnt_s1_agent_rsp_fifo:out_endofpacket -> in_port_freq_cnt_s1_agent:rf_sink_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                            // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire   [99:0] nios2_gen2_0_data_master_agent_cp_data;                                             // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                    // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                      // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire   [99:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [16:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                     // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire   [99:0] nios2_gen2_0_instruction_master_agent_cp_data;                                      // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                             // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                               // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire   [99:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [16:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> rsp_demux:sink_valid
	wire   [99:0] router_002_src_data;                                                                // router_002:src_data -> rsp_demux:sink_data
	wire          router_002_src_ready;                                                               // rsp_demux:sink_ready -> router_002:src_ready
	wire   [16:0] router_002_src_channel;                                                             // router_002:src_channel -> rsp_demux:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> rsp_demux_001:sink_valid
	wire   [99:0] router_003_src_data;                                                                // router_003:src_data -> rsp_demux_001:sink_data
	wire          router_003_src_ready;                                                               // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [16:0] router_003_src_channel;                                                             // router_003:src_channel -> rsp_demux_001:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> rsp_demux_002:sink_valid
	wire   [99:0] router_004_src_data;                                                                // router_004:src_data -> rsp_demux_002:sink_data
	wire          router_004_src_ready;                                                               // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [16:0] router_004_src_channel;                                                             // router_004:src_channel -> rsp_demux_002:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> rsp_demux_003:sink_valid
	wire   [99:0] router_005_src_data;                                                                // router_005:src_data -> rsp_demux_003:sink_data
	wire          router_005_src_ready;                                                               // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [16:0] router_005_src_channel;                                                             // router_005:src_channel -> rsp_demux_003:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> rsp_demux_004:sink_valid
	wire   [99:0] router_006_src_data;                                                                // router_006:src_data -> rsp_demux_004:sink_data
	wire          router_006_src_ready;                                                               // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [16:0] router_006_src_channel;                                                             // router_006:src_channel -> rsp_demux_004:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> rsp_demux_005:sink_valid
	wire   [99:0] router_007_src_data;                                                                // router_007:src_data -> rsp_demux_005:sink_data
	wire          router_007_src_ready;                                                               // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [16:0] router_007_src_channel;                                                             // router_007:src_channel -> rsp_demux_005:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> rsp_demux_006:sink_valid
	wire   [99:0] router_008_src_data;                                                                // router_008:src_data -> rsp_demux_006:sink_data
	wire          router_008_src_ready;                                                               // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [16:0] router_008_src_channel;                                                             // router_008:src_channel -> rsp_demux_006:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> rsp_demux_007:sink_valid
	wire   [99:0] router_009_src_data;                                                                // router_009:src_data -> rsp_demux_007:sink_data
	wire          router_009_src_ready;                                                               // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [16:0] router_009_src_channel;                                                             // router_009:src_channel -> rsp_demux_007:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> rsp_demux_008:sink_valid
	wire   [99:0] router_010_src_data;                                                                // router_010:src_data -> rsp_demux_008:sink_data
	wire          router_010_src_ready;                                                               // rsp_demux_008:sink_ready -> router_010:src_ready
	wire   [16:0] router_010_src_channel;                                                             // router_010:src_channel -> rsp_demux_008:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> rsp_demux_009:sink_valid
	wire   [99:0] router_011_src_data;                                                                // router_011:src_data -> rsp_demux_009:sink_data
	wire          router_011_src_ready;                                                               // rsp_demux_009:sink_ready -> router_011:src_ready
	wire   [16:0] router_011_src_channel;                                                             // router_011:src_channel -> rsp_demux_009:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> rsp_demux_010:sink_valid
	wire   [99:0] router_012_src_data;                                                                // router_012:src_data -> rsp_demux_010:sink_data
	wire          router_012_src_ready;                                                               // rsp_demux_010:sink_ready -> router_012:src_ready
	wire   [16:0] router_012_src_channel;                                                             // router_012:src_channel -> rsp_demux_010:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> rsp_demux_011:sink_valid
	wire   [99:0] router_013_src_data;                                                                // router_013:src_data -> rsp_demux_011:sink_data
	wire          router_013_src_ready;                                                               // rsp_demux_011:sink_ready -> router_013:src_ready
	wire   [16:0] router_013_src_channel;                                                             // router_013:src_channel -> rsp_demux_011:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> rsp_demux_012:sink_valid
	wire   [99:0] router_014_src_data;                                                                // router_014:src_data -> rsp_demux_012:sink_data
	wire          router_014_src_ready;                                                               // rsp_demux_012:sink_ready -> router_014:src_ready
	wire   [16:0] router_014_src_channel;                                                             // router_014:src_channel -> rsp_demux_012:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> rsp_demux_013:sink_valid
	wire   [99:0] router_015_src_data;                                                                // router_015:src_data -> rsp_demux_013:sink_data
	wire          router_015_src_ready;                                                               // rsp_demux_013:sink_ready -> router_015:src_ready
	wire   [16:0] router_015_src_channel;                                                             // router_015:src_channel -> rsp_demux_013:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> rsp_demux_014:sink_valid
	wire   [99:0] router_016_src_data;                                                                // router_016:src_data -> rsp_demux_014:sink_data
	wire          router_016_src_ready;                                                               // rsp_demux_014:sink_ready -> router_016:src_ready
	wire   [16:0] router_016_src_channel;                                                             // router_016:src_channel -> rsp_demux_014:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> rsp_demux_015:sink_valid
	wire   [99:0] router_017_src_data;                                                                // router_017:src_data -> rsp_demux_015:sink_data
	wire          router_017_src_ready;                                                               // rsp_demux_015:sink_ready -> router_017:src_ready
	wire   [16:0] router_017_src_channel;                                                             // router_017:src_channel -> rsp_demux_015:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux_016:sink_valid
	wire   [99:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux_016:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux_016:sink_ready -> router_018:src_ready
	wire   [16:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux_016:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire   [99:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                                  // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire   [16:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                       // agent_pipeline:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire   [99:0] agent_pipeline_source0_data;                                                        // agent_pipeline:out_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                       // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> agent_pipeline:out_ready
	wire   [16:0] agent_pipeline_source0_channel;                                                     // agent_pipeline:out_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                               // agent_pipeline:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                                 // agent_pipeline:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                       // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire   [99:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                        // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                       // agent_pipeline_001:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                               // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                                   // agent_pipeline_001:out_valid -> router_002:sink_valid
	wire   [99:0] agent_pipeline_001_source0_data;                                                    // agent_pipeline_001:out_data -> router_002:sink_data
	wire          agent_pipeline_001_source0_ready;                                                   // router_002:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                           // agent_pipeline_001:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                             // agent_pipeline_001:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire   [99:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                              // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire   [16:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                                   // agent_pipeline_002:out_valid -> product_info_0_avalon_slave_0_agent:cp_valid
	wire   [99:0] agent_pipeline_002_source0_data;                                                    // agent_pipeline_002:out_data -> product_info_0_avalon_slave_0_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                                   // product_info_0_avalon_slave_0_agent:cp_ready -> agent_pipeline_002:out_ready
	wire   [16:0] agent_pipeline_002_source0_channel;                                                 // agent_pipeline_002:out_channel -> product_info_0_avalon_slave_0_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                           // agent_pipeline_002:out_startofpacket -> product_info_0_avalon_slave_0_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                             // agent_pipeline_002:out_endofpacket -> product_info_0_avalon_slave_0_agent:cp_endofpacket
	wire          product_info_0_avalon_slave_0_agent_rp_valid;                                       // product_info_0_avalon_slave_0_agent:rp_valid -> agent_pipeline_003:in_valid
	wire   [99:0] product_info_0_avalon_slave_0_agent_rp_data;                                        // product_info_0_avalon_slave_0_agent:rp_data -> agent_pipeline_003:in_data
	wire          product_info_0_avalon_slave_0_agent_rp_ready;                                       // agent_pipeline_003:in_ready -> product_info_0_avalon_slave_0_agent:rp_ready
	wire          product_info_0_avalon_slave_0_agent_rp_startofpacket;                               // product_info_0_avalon_slave_0_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          product_info_0_avalon_slave_0_agent_rp_endofpacket;                                 // product_info_0_avalon_slave_0_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                                   // agent_pipeline_003:out_valid -> router_003:sink_valid
	wire   [99:0] agent_pipeline_003_source0_data;                                                    // agent_pipeline_003:out_data -> router_003:sink_data
	wire          agent_pipeline_003_source0_ready;                                                   // router_003:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                           // agent_pipeline_003:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                             // agent_pipeline_003:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire   [99:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                                              // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire   [16:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                                   // agent_pipeline_004:out_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire   [99:0] agent_pipeline_004_source0_data;                                                    // agent_pipeline_004:out_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                                   // sysid_qsys_0_control_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire   [16:0] agent_pipeline_004_source0_channel;                                                 // agent_pipeline_004:out_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                           // agent_pipeline_004:out_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                             // agent_pipeline_004:out_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_valid;                                          // sysid_qsys_0_control_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire   [99:0] sysid_qsys_0_control_slave_agent_rp_data;                                           // sysid_qsys_0_control_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          sysid_qsys_0_control_slave_agent_rp_ready;                                          // agent_pipeline_005:in_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire          sysid_qsys_0_control_slave_agent_rp_startofpacket;                                  // sysid_qsys_0_control_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          sysid_qsys_0_control_slave_agent_rp_endofpacket;                                    // sysid_qsys_0_control_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                                   // agent_pipeline_005:out_valid -> router_004:sink_valid
	wire   [99:0] agent_pipeline_005_source0_data;                                                    // agent_pipeline_005:out_data -> router_004:sink_data
	wire          agent_pipeline_005_source0_ready;                                                   // router_004:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                           // agent_pipeline_005:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                             // agent_pipeline_005:out_endofpacket -> router_004:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire   [99:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                              // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire   [16:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                                   // agent_pipeline_006:out_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire   [99:0] agent_pipeline_006_source0_data;                                                    // agent_pipeline_006:out_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                                   // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> agent_pipeline_006:out_ready
	wire   [16:0] agent_pipeline_006_source0_channel;                                                 // agent_pipeline_006:out_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                           // agent_pipeline_006:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                             // agent_pipeline_006:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> agent_pipeline_007:in_valid
	wire   [99:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rp_data -> agent_pipeline_007:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                        // agent_pipeline_007:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                                   // agent_pipeline_007:out_valid -> router_005:sink_valid
	wire   [99:0] agent_pipeline_007_source0_data;                                                    // agent_pipeline_007:out_data -> router_005:sink_data
	wire          agent_pipeline_007_source0_ready;                                                   // router_005:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                           // agent_pipeline_007:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                             // agent_pipeline_007:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> agent_pipeline_008:in_valid
	wire   [99:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> agent_pipeline_008:in_data
	wire          cmd_mux_004_src_ready;                                                              // agent_pipeline_008:in_ready -> cmd_mux_004:src_ready
	wire   [16:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> agent_pipeline_008:in_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                                   // agent_pipeline_008:out_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_008_source0_data;                                                    // agent_pipeline_008:out_data -> onchip_memory2_0_s1_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                                   // onchip_memory2_0_s1_agent:cp_ready -> agent_pipeline_008:out_ready
	wire   [16:0] agent_pipeline_008_source0_channel;                                                 // agent_pipeline_008:out_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                           // agent_pipeline_008:out_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                             // agent_pipeline_008:out_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                 // onchip_memory2_0_s1_agent:rp_valid -> agent_pipeline_009:in_valid
	wire   [99:0] onchip_memory2_0_s1_agent_rp_data;                                                  // onchip_memory2_0_s1_agent:rp_data -> agent_pipeline_009:in_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                 // agent_pipeline_009:in_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                         // onchip_memory2_0_s1_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                           // onchip_memory2_0_s1_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                                   // agent_pipeline_009:out_valid -> router_006:sink_valid
	wire   [99:0] agent_pipeline_009_source0_data;                                                    // agent_pipeline_009:out_data -> router_006:sink_data
	wire          agent_pipeline_009_source0_ready;                                                   // router_006:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                           // agent_pipeline_009:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                             // agent_pipeline_009:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> agent_pipeline_010:in_valid
	wire   [99:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> agent_pipeline_010:in_data
	wire          cmd_mux_005_src_ready;                                                              // agent_pipeline_010:in_ready -> cmd_mux_005:src_ready
	wire   [16:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> agent_pipeline_010:in_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                                   // agent_pipeline_010:out_valid -> timer_0_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_010_source0_data;                                                    // agent_pipeline_010:out_data -> timer_0_s1_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                                   // timer_0_s1_agent:cp_ready -> agent_pipeline_010:out_ready
	wire   [16:0] agent_pipeline_010_source0_channel;                                                 // agent_pipeline_010:out_channel -> timer_0_s1_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                           // agent_pipeline_010:out_startofpacket -> timer_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                             // agent_pipeline_010:out_endofpacket -> timer_0_s1_agent:cp_endofpacket
	wire          timer_0_s1_agent_rp_valid;                                                          // timer_0_s1_agent:rp_valid -> agent_pipeline_011:in_valid
	wire   [99:0] timer_0_s1_agent_rp_data;                                                           // timer_0_s1_agent:rp_data -> agent_pipeline_011:in_data
	wire          timer_0_s1_agent_rp_ready;                                                          // agent_pipeline_011:in_ready -> timer_0_s1_agent:rp_ready
	wire          timer_0_s1_agent_rp_startofpacket;                                                  // timer_0_s1_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          timer_0_s1_agent_rp_endofpacket;                                                    // timer_0_s1_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                                   // agent_pipeline_011:out_valid -> router_007:sink_valid
	wire   [99:0] agent_pipeline_011_source0_data;                                                    // agent_pipeline_011:out_data -> router_007:sink_data
	wire          agent_pipeline_011_source0_ready;                                                   // router_007:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                           // agent_pipeline_011:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                             // agent_pipeline_011:out_endofpacket -> router_007:sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> agent_pipeline_012:in_valid
	wire   [99:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> agent_pipeline_012:in_data
	wire          cmd_mux_006_src_ready;                                                              // agent_pipeline_012:in_ready -> cmd_mux_006:src_ready
	wire   [16:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> agent_pipeline_012:in_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                                   // agent_pipeline_012:out_valid -> in_fifo_used_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_012_source0_data;                                                    // agent_pipeline_012:out_data -> in_fifo_used_s1_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                                   // in_fifo_used_s1_agent:cp_ready -> agent_pipeline_012:out_ready
	wire   [16:0] agent_pipeline_012_source0_channel;                                                 // agent_pipeline_012:out_channel -> in_fifo_used_s1_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                           // agent_pipeline_012:out_startofpacket -> in_fifo_used_s1_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                             // agent_pipeline_012:out_endofpacket -> in_fifo_used_s1_agent:cp_endofpacket
	wire          in_fifo_used_s1_agent_rp_valid;                                                     // in_fifo_used_s1_agent:rp_valid -> agent_pipeline_013:in_valid
	wire   [99:0] in_fifo_used_s1_agent_rp_data;                                                      // in_fifo_used_s1_agent:rp_data -> agent_pipeline_013:in_data
	wire          in_fifo_used_s1_agent_rp_ready;                                                     // agent_pipeline_013:in_ready -> in_fifo_used_s1_agent:rp_ready
	wire          in_fifo_used_s1_agent_rp_startofpacket;                                             // in_fifo_used_s1_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          in_fifo_used_s1_agent_rp_endofpacket;                                               // in_fifo_used_s1_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                                   // agent_pipeline_013:out_valid -> router_008:sink_valid
	wire   [99:0] agent_pipeline_013_source0_data;                                                    // agent_pipeline_013:out_data -> router_008:sink_data
	wire          agent_pipeline_013_source0_ready;                                                   // router_008:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                           // agent_pipeline_013:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                             // agent_pipeline_013:out_endofpacket -> router_008:sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> agent_pipeline_014:in_valid
	wire   [99:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> agent_pipeline_014:in_data
	wire          cmd_mux_007_src_ready;                                                              // agent_pipeline_014:in_ready -> cmd_mux_007:src_ready
	wire   [16:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> agent_pipeline_014:in_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                                   // agent_pipeline_014:out_valid -> in_port_data_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_014_source0_data;                                                    // agent_pipeline_014:out_data -> in_port_data_s1_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                                   // in_port_data_s1_agent:cp_ready -> agent_pipeline_014:out_ready
	wire   [16:0] agent_pipeline_014_source0_channel;                                                 // agent_pipeline_014:out_channel -> in_port_data_s1_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                           // agent_pipeline_014:out_startofpacket -> in_port_data_s1_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                             // agent_pipeline_014:out_endofpacket -> in_port_data_s1_agent:cp_endofpacket
	wire          in_port_data_s1_agent_rp_valid;                                                     // in_port_data_s1_agent:rp_valid -> agent_pipeline_015:in_valid
	wire   [99:0] in_port_data_s1_agent_rp_data;                                                      // in_port_data_s1_agent:rp_data -> agent_pipeline_015:in_data
	wire          in_port_data_s1_agent_rp_ready;                                                     // agent_pipeline_015:in_ready -> in_port_data_s1_agent:rp_ready
	wire          in_port_data_s1_agent_rp_startofpacket;                                             // in_port_data_s1_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          in_port_data_s1_agent_rp_endofpacket;                                               // in_port_data_s1_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                                   // agent_pipeline_015:out_valid -> router_009:sink_valid
	wire   [99:0] agent_pipeline_015_source0_data;                                                    // agent_pipeline_015:out_data -> router_009:sink_data
	wire          agent_pipeline_015_source0_ready;                                                   // router_009:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                           // agent_pipeline_015:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                             // agent_pipeline_015:out_endofpacket -> router_009:sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> agent_pipeline_016:in_valid
	wire   [99:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> agent_pipeline_016:in_data
	wire          cmd_mux_008_src_ready;                                                              // agent_pipeline_016:in_ready -> cmd_mux_008:src_ready
	wire   [16:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> agent_pipeline_016:in_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                                                   // agent_pipeline_016:out_valid -> in_port_ec_flags_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_016_source0_data;                                                    // agent_pipeline_016:out_data -> in_port_ec_flags_s1_agent:cp_data
	wire          agent_pipeline_016_source0_ready;                                                   // in_port_ec_flags_s1_agent:cp_ready -> agent_pipeline_016:out_ready
	wire   [16:0] agent_pipeline_016_source0_channel;                                                 // agent_pipeline_016:out_channel -> in_port_ec_flags_s1_agent:cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                                           // agent_pipeline_016:out_startofpacket -> in_port_ec_flags_s1_agent:cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                                             // agent_pipeline_016:out_endofpacket -> in_port_ec_flags_s1_agent:cp_endofpacket
	wire          in_port_ec_flags_s1_agent_rp_valid;                                                 // in_port_ec_flags_s1_agent:rp_valid -> agent_pipeline_017:in_valid
	wire   [99:0] in_port_ec_flags_s1_agent_rp_data;                                                  // in_port_ec_flags_s1_agent:rp_data -> agent_pipeline_017:in_data
	wire          in_port_ec_flags_s1_agent_rp_ready;                                                 // agent_pipeline_017:in_ready -> in_port_ec_flags_s1_agent:rp_ready
	wire          in_port_ec_flags_s1_agent_rp_startofpacket;                                         // in_port_ec_flags_s1_agent:rp_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          in_port_ec_flags_s1_agent_rp_endofpacket;                                           // in_port_ec_flags_s1_agent:rp_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                                                   // agent_pipeline_017:out_valid -> router_010:sink_valid
	wire   [99:0] agent_pipeline_017_source0_data;                                                    // agent_pipeline_017:out_data -> router_010:sink_data
	wire          agent_pipeline_017_source0_ready;                                                   // router_010:sink_ready -> agent_pipeline_017:out_ready
	wire          agent_pipeline_017_source0_startofpacket;                                           // agent_pipeline_017:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                                             // agent_pipeline_017:out_endofpacket -> router_010:sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> agent_pipeline_018:in_valid
	wire   [99:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> agent_pipeline_018:in_data
	wire          cmd_mux_009_src_ready;                                                              // agent_pipeline_018:in_ready -> cmd_mux_009:src_ready
	wire   [16:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> agent_pipeline_018:in_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                                                   // agent_pipeline_018:out_valid -> out_port_ctrl_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_018_source0_data;                                                    // agent_pipeline_018:out_data -> out_port_ctrl_s1_agent:cp_data
	wire          agent_pipeline_018_source0_ready;                                                   // out_port_ctrl_s1_agent:cp_ready -> agent_pipeline_018:out_ready
	wire   [16:0] agent_pipeline_018_source0_channel;                                                 // agent_pipeline_018:out_channel -> out_port_ctrl_s1_agent:cp_channel
	wire          agent_pipeline_018_source0_startofpacket;                                           // agent_pipeline_018:out_startofpacket -> out_port_ctrl_s1_agent:cp_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                                             // agent_pipeline_018:out_endofpacket -> out_port_ctrl_s1_agent:cp_endofpacket
	wire          out_port_ctrl_s1_agent_rp_valid;                                                    // out_port_ctrl_s1_agent:rp_valid -> agent_pipeline_019:in_valid
	wire   [99:0] out_port_ctrl_s1_agent_rp_data;                                                     // out_port_ctrl_s1_agent:rp_data -> agent_pipeline_019:in_data
	wire          out_port_ctrl_s1_agent_rp_ready;                                                    // agent_pipeline_019:in_ready -> out_port_ctrl_s1_agent:rp_ready
	wire          out_port_ctrl_s1_agent_rp_startofpacket;                                            // out_port_ctrl_s1_agent:rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          out_port_ctrl_s1_agent_rp_endofpacket;                                              // out_port_ctrl_s1_agent:rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                                                   // agent_pipeline_019:out_valid -> router_011:sink_valid
	wire   [99:0] agent_pipeline_019_source0_data;                                                    // agent_pipeline_019:out_data -> router_011:sink_data
	wire          agent_pipeline_019_source0_ready;                                                   // router_011:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                                           // agent_pipeline_019:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                                             // agent_pipeline_019:out_endofpacket -> router_011:sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> agent_pipeline_020:in_valid
	wire   [99:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> agent_pipeline_020:in_data
	wire          cmd_mux_010_src_ready;                                                              // agent_pipeline_020:in_ready -> cmd_mux_010:src_ready
	wire   [16:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> agent_pipeline_020:in_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> agent_pipeline_020:in_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> agent_pipeline_020:in_endofpacket
	wire          agent_pipeline_020_source0_valid;                                                   // agent_pipeline_020:out_valid -> in_port_dig_error_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_020_source0_data;                                                    // agent_pipeline_020:out_data -> in_port_dig_error_s1_agent:cp_data
	wire          agent_pipeline_020_source0_ready;                                                   // in_port_dig_error_s1_agent:cp_ready -> agent_pipeline_020:out_ready
	wire   [16:0] agent_pipeline_020_source0_channel;                                                 // agent_pipeline_020:out_channel -> in_port_dig_error_s1_agent:cp_channel
	wire          agent_pipeline_020_source0_startofpacket;                                           // agent_pipeline_020:out_startofpacket -> in_port_dig_error_s1_agent:cp_startofpacket
	wire          agent_pipeline_020_source0_endofpacket;                                             // agent_pipeline_020:out_endofpacket -> in_port_dig_error_s1_agent:cp_endofpacket
	wire          in_port_dig_error_s1_agent_rp_valid;                                                // in_port_dig_error_s1_agent:rp_valid -> agent_pipeline_021:in_valid
	wire   [99:0] in_port_dig_error_s1_agent_rp_data;                                                 // in_port_dig_error_s1_agent:rp_data -> agent_pipeline_021:in_data
	wire          in_port_dig_error_s1_agent_rp_ready;                                                // agent_pipeline_021:in_ready -> in_port_dig_error_s1_agent:rp_ready
	wire          in_port_dig_error_s1_agent_rp_startofpacket;                                        // in_port_dig_error_s1_agent:rp_startofpacket -> agent_pipeline_021:in_startofpacket
	wire          in_port_dig_error_s1_agent_rp_endofpacket;                                          // in_port_dig_error_s1_agent:rp_endofpacket -> agent_pipeline_021:in_endofpacket
	wire          agent_pipeline_021_source0_valid;                                                   // agent_pipeline_021:out_valid -> router_012:sink_valid
	wire   [99:0] agent_pipeline_021_source0_data;                                                    // agent_pipeline_021:out_data -> router_012:sink_data
	wire          agent_pipeline_021_source0_ready;                                                   // router_012:sink_ready -> agent_pipeline_021:out_ready
	wire          agent_pipeline_021_source0_startofpacket;                                           // agent_pipeline_021:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_021_source0_endofpacket;                                             // agent_pipeline_021:out_endofpacket -> router_012:sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> agent_pipeline_022:in_valid
	wire   [99:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> agent_pipeline_022:in_data
	wire          cmd_mux_011_src_ready;                                                              // agent_pipeline_022:in_ready -> cmd_mux_011:src_ready
	wire   [16:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> agent_pipeline_022:in_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> agent_pipeline_022:in_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> agent_pipeline_022:in_endofpacket
	wire          agent_pipeline_022_source0_valid;                                                   // agent_pipeline_022:out_valid -> uart_0_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_022_source0_data;                                                    // agent_pipeline_022:out_data -> uart_0_s1_agent:cp_data
	wire          agent_pipeline_022_source0_ready;                                                   // uart_0_s1_agent:cp_ready -> agent_pipeline_022:out_ready
	wire   [16:0] agent_pipeline_022_source0_channel;                                                 // agent_pipeline_022:out_channel -> uart_0_s1_agent:cp_channel
	wire          agent_pipeline_022_source0_startofpacket;                                           // agent_pipeline_022:out_startofpacket -> uart_0_s1_agent:cp_startofpacket
	wire          agent_pipeline_022_source0_endofpacket;                                             // agent_pipeline_022:out_endofpacket -> uart_0_s1_agent:cp_endofpacket
	wire          uart_0_s1_agent_rp_valid;                                                           // uart_0_s1_agent:rp_valid -> agent_pipeline_023:in_valid
	wire   [99:0] uart_0_s1_agent_rp_data;                                                            // uart_0_s1_agent:rp_data -> agent_pipeline_023:in_data
	wire          uart_0_s1_agent_rp_ready;                                                           // agent_pipeline_023:in_ready -> uart_0_s1_agent:rp_ready
	wire          uart_0_s1_agent_rp_startofpacket;                                                   // uart_0_s1_agent:rp_startofpacket -> agent_pipeline_023:in_startofpacket
	wire          uart_0_s1_agent_rp_endofpacket;                                                     // uart_0_s1_agent:rp_endofpacket -> agent_pipeline_023:in_endofpacket
	wire          agent_pipeline_023_source0_valid;                                                   // agent_pipeline_023:out_valid -> router_013:sink_valid
	wire   [99:0] agent_pipeline_023_source0_data;                                                    // agent_pipeline_023:out_data -> router_013:sink_data
	wire          agent_pipeline_023_source0_ready;                                                   // router_013:sink_ready -> agent_pipeline_023:out_ready
	wire          agent_pipeline_023_source0_startofpacket;                                           // agent_pipeline_023:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_023_source0_endofpacket;                                             // agent_pipeline_023:out_endofpacket -> router_013:sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> agent_pipeline_024:in_valid
	wire   [99:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> agent_pipeline_024:in_data
	wire          cmd_mux_012_src_ready;                                                              // agent_pipeline_024:in_ready -> cmd_mux_012:src_ready
	wire   [16:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> agent_pipeline_024:in_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> agent_pipeline_024:in_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> agent_pipeline_024:in_endofpacket
	wire          agent_pipeline_024_source0_valid;                                                   // agent_pipeline_024:out_valid -> out_port_prodnum_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_024_source0_data;                                                    // agent_pipeline_024:out_data -> out_port_prodnum_s1_agent:cp_data
	wire          agent_pipeline_024_source0_ready;                                                   // out_port_prodnum_s1_agent:cp_ready -> agent_pipeline_024:out_ready
	wire   [16:0] agent_pipeline_024_source0_channel;                                                 // agent_pipeline_024:out_channel -> out_port_prodnum_s1_agent:cp_channel
	wire          agent_pipeline_024_source0_startofpacket;                                           // agent_pipeline_024:out_startofpacket -> out_port_prodnum_s1_agent:cp_startofpacket
	wire          agent_pipeline_024_source0_endofpacket;                                             // agent_pipeline_024:out_endofpacket -> out_port_prodnum_s1_agent:cp_endofpacket
	wire          out_port_prodnum_s1_agent_rp_valid;                                                 // out_port_prodnum_s1_agent:rp_valid -> agent_pipeline_025:in_valid
	wire   [99:0] out_port_prodnum_s1_agent_rp_data;                                                  // out_port_prodnum_s1_agent:rp_data -> agent_pipeline_025:in_data
	wire          out_port_prodnum_s1_agent_rp_ready;                                                 // agent_pipeline_025:in_ready -> out_port_prodnum_s1_agent:rp_ready
	wire          out_port_prodnum_s1_agent_rp_startofpacket;                                         // out_port_prodnum_s1_agent:rp_startofpacket -> agent_pipeline_025:in_startofpacket
	wire          out_port_prodnum_s1_agent_rp_endofpacket;                                           // out_port_prodnum_s1_agent:rp_endofpacket -> agent_pipeline_025:in_endofpacket
	wire          agent_pipeline_025_source0_valid;                                                   // agent_pipeline_025:out_valid -> router_014:sink_valid
	wire   [99:0] agent_pipeline_025_source0_data;                                                    // agent_pipeline_025:out_data -> router_014:sink_data
	wire          agent_pipeline_025_source0_ready;                                                   // router_014:sink_ready -> agent_pipeline_025:out_ready
	wire          agent_pipeline_025_source0_startofpacket;                                           // agent_pipeline_025:out_startofpacket -> router_014:sink_startofpacket
	wire          agent_pipeline_025_source0_endofpacket;                                             // agent_pipeline_025:out_endofpacket -> router_014:sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> agent_pipeline_026:in_valid
	wire   [99:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> agent_pipeline_026:in_data
	wire          cmd_mux_013_src_ready;                                                              // agent_pipeline_026:in_ready -> cmd_mux_013:src_ready
	wire   [16:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> agent_pipeline_026:in_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> agent_pipeline_026:in_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> agent_pipeline_026:in_endofpacket
	wire          agent_pipeline_026_source0_valid;                                                   // agent_pipeline_026:out_valid -> out_port_batnum_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_026_source0_data;                                                    // agent_pipeline_026:out_data -> out_port_batnum_s1_agent:cp_data
	wire          agent_pipeline_026_source0_ready;                                                   // out_port_batnum_s1_agent:cp_ready -> agent_pipeline_026:out_ready
	wire   [16:0] agent_pipeline_026_source0_channel;                                                 // agent_pipeline_026:out_channel -> out_port_batnum_s1_agent:cp_channel
	wire          agent_pipeline_026_source0_startofpacket;                                           // agent_pipeline_026:out_startofpacket -> out_port_batnum_s1_agent:cp_startofpacket
	wire          agent_pipeline_026_source0_endofpacket;                                             // agent_pipeline_026:out_endofpacket -> out_port_batnum_s1_agent:cp_endofpacket
	wire          out_port_batnum_s1_agent_rp_valid;                                                  // out_port_batnum_s1_agent:rp_valid -> agent_pipeline_027:in_valid
	wire   [99:0] out_port_batnum_s1_agent_rp_data;                                                   // out_port_batnum_s1_agent:rp_data -> agent_pipeline_027:in_data
	wire          out_port_batnum_s1_agent_rp_ready;                                                  // agent_pipeline_027:in_ready -> out_port_batnum_s1_agent:rp_ready
	wire          out_port_batnum_s1_agent_rp_startofpacket;                                          // out_port_batnum_s1_agent:rp_startofpacket -> agent_pipeline_027:in_startofpacket
	wire          out_port_batnum_s1_agent_rp_endofpacket;                                            // out_port_batnum_s1_agent:rp_endofpacket -> agent_pipeline_027:in_endofpacket
	wire          agent_pipeline_027_source0_valid;                                                   // agent_pipeline_027:out_valid -> router_015:sink_valid
	wire   [99:0] agent_pipeline_027_source0_data;                                                    // agent_pipeline_027:out_data -> router_015:sink_data
	wire          agent_pipeline_027_source0_ready;                                                   // router_015:sink_ready -> agent_pipeline_027:out_ready
	wire          agent_pipeline_027_source0_startofpacket;                                           // agent_pipeline_027:out_startofpacket -> router_015:sink_startofpacket
	wire          agent_pipeline_027_source0_endofpacket;                                             // agent_pipeline_027:out_endofpacket -> router_015:sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> agent_pipeline_028:in_valid
	wire   [99:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> agent_pipeline_028:in_data
	wire          cmd_mux_014_src_ready;                                                              // agent_pipeline_028:in_ready -> cmd_mux_014:src_ready
	wire   [16:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> agent_pipeline_028:in_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> agent_pipeline_028:in_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> agent_pipeline_028:in_endofpacket
	wire          agent_pipeline_028_source0_valid;                                                   // agent_pipeline_028:out_valid -> out_port_lut_data_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_028_source0_data;                                                    // agent_pipeline_028:out_data -> out_port_lut_data_s1_agent:cp_data
	wire          agent_pipeline_028_source0_ready;                                                   // out_port_lut_data_s1_agent:cp_ready -> agent_pipeline_028:out_ready
	wire   [16:0] agent_pipeline_028_source0_channel;                                                 // agent_pipeline_028:out_channel -> out_port_lut_data_s1_agent:cp_channel
	wire          agent_pipeline_028_source0_startofpacket;                                           // agent_pipeline_028:out_startofpacket -> out_port_lut_data_s1_agent:cp_startofpacket
	wire          agent_pipeline_028_source0_endofpacket;                                             // agent_pipeline_028:out_endofpacket -> out_port_lut_data_s1_agent:cp_endofpacket
	wire          out_port_lut_data_s1_agent_rp_valid;                                                // out_port_lut_data_s1_agent:rp_valid -> agent_pipeline_029:in_valid
	wire   [99:0] out_port_lut_data_s1_agent_rp_data;                                                 // out_port_lut_data_s1_agent:rp_data -> agent_pipeline_029:in_data
	wire          out_port_lut_data_s1_agent_rp_ready;                                                // agent_pipeline_029:in_ready -> out_port_lut_data_s1_agent:rp_ready
	wire          out_port_lut_data_s1_agent_rp_startofpacket;                                        // out_port_lut_data_s1_agent:rp_startofpacket -> agent_pipeline_029:in_startofpacket
	wire          out_port_lut_data_s1_agent_rp_endofpacket;                                          // out_port_lut_data_s1_agent:rp_endofpacket -> agent_pipeline_029:in_endofpacket
	wire          agent_pipeline_029_source0_valid;                                                   // agent_pipeline_029:out_valid -> router_016:sink_valid
	wire   [99:0] agent_pipeline_029_source0_data;                                                    // agent_pipeline_029:out_data -> router_016:sink_data
	wire          agent_pipeline_029_source0_ready;                                                   // router_016:sink_ready -> agent_pipeline_029:out_ready
	wire          agent_pipeline_029_source0_startofpacket;                                           // agent_pipeline_029:out_startofpacket -> router_016:sink_startofpacket
	wire          agent_pipeline_029_source0_endofpacket;                                             // agent_pipeline_029:out_endofpacket -> router_016:sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> agent_pipeline_030:in_valid
	wire   [99:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> agent_pipeline_030:in_data
	wire          cmd_mux_015_src_ready;                                                              // agent_pipeline_030:in_ready -> cmd_mux_015:src_ready
	wire   [16:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> agent_pipeline_030:in_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> agent_pipeline_030:in_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> agent_pipeline_030:in_endofpacket
	wire          agent_pipeline_030_source0_valid;                                                   // agent_pipeline_030:out_valid -> out_port_lut_adr_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_030_source0_data;                                                    // agent_pipeline_030:out_data -> out_port_lut_adr_s1_agent:cp_data
	wire          agent_pipeline_030_source0_ready;                                                   // out_port_lut_adr_s1_agent:cp_ready -> agent_pipeline_030:out_ready
	wire   [16:0] agent_pipeline_030_source0_channel;                                                 // agent_pipeline_030:out_channel -> out_port_lut_adr_s1_agent:cp_channel
	wire          agent_pipeline_030_source0_startofpacket;                                           // agent_pipeline_030:out_startofpacket -> out_port_lut_adr_s1_agent:cp_startofpacket
	wire          agent_pipeline_030_source0_endofpacket;                                             // agent_pipeline_030:out_endofpacket -> out_port_lut_adr_s1_agent:cp_endofpacket
	wire          out_port_lut_adr_s1_agent_rp_valid;                                                 // out_port_lut_adr_s1_agent:rp_valid -> agent_pipeline_031:in_valid
	wire   [99:0] out_port_lut_adr_s1_agent_rp_data;                                                  // out_port_lut_adr_s1_agent:rp_data -> agent_pipeline_031:in_data
	wire          out_port_lut_adr_s1_agent_rp_ready;                                                 // agent_pipeline_031:in_ready -> out_port_lut_adr_s1_agent:rp_ready
	wire          out_port_lut_adr_s1_agent_rp_startofpacket;                                         // out_port_lut_adr_s1_agent:rp_startofpacket -> agent_pipeline_031:in_startofpacket
	wire          out_port_lut_adr_s1_agent_rp_endofpacket;                                           // out_port_lut_adr_s1_agent:rp_endofpacket -> agent_pipeline_031:in_endofpacket
	wire          agent_pipeline_031_source0_valid;                                                   // agent_pipeline_031:out_valid -> router_017:sink_valid
	wire   [99:0] agent_pipeline_031_source0_data;                                                    // agent_pipeline_031:out_data -> router_017:sink_data
	wire          agent_pipeline_031_source0_ready;                                                   // router_017:sink_ready -> agent_pipeline_031:out_ready
	wire          agent_pipeline_031_source0_startofpacket;                                           // agent_pipeline_031:out_startofpacket -> router_017:sink_startofpacket
	wire          agent_pipeline_031_source0_endofpacket;                                             // agent_pipeline_031:out_endofpacket -> router_017:sink_endofpacket
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> agent_pipeline_032:in_valid
	wire   [99:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> agent_pipeline_032:in_data
	wire          cmd_mux_016_src_ready;                                                              // agent_pipeline_032:in_ready -> cmd_mux_016:src_ready
	wire   [16:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> agent_pipeline_032:in_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> agent_pipeline_032:in_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> agent_pipeline_032:in_endofpacket
	wire          agent_pipeline_032_source0_valid;                                                   // agent_pipeline_032:out_valid -> in_port_freq_cnt_s1_agent:cp_valid
	wire   [99:0] agent_pipeline_032_source0_data;                                                    // agent_pipeline_032:out_data -> in_port_freq_cnt_s1_agent:cp_data
	wire          agent_pipeline_032_source0_ready;                                                   // in_port_freq_cnt_s1_agent:cp_ready -> agent_pipeline_032:out_ready
	wire   [16:0] agent_pipeline_032_source0_channel;                                                 // agent_pipeline_032:out_channel -> in_port_freq_cnt_s1_agent:cp_channel
	wire          agent_pipeline_032_source0_startofpacket;                                           // agent_pipeline_032:out_startofpacket -> in_port_freq_cnt_s1_agent:cp_startofpacket
	wire          agent_pipeline_032_source0_endofpacket;                                             // agent_pipeline_032:out_endofpacket -> in_port_freq_cnt_s1_agent:cp_endofpacket
	wire          in_port_freq_cnt_s1_agent_rp_valid;                                                 // in_port_freq_cnt_s1_agent:rp_valid -> agent_pipeline_033:in_valid
	wire   [99:0] in_port_freq_cnt_s1_agent_rp_data;                                                  // in_port_freq_cnt_s1_agent:rp_data -> agent_pipeline_033:in_data
	wire          in_port_freq_cnt_s1_agent_rp_ready;                                                 // agent_pipeline_033:in_ready -> in_port_freq_cnt_s1_agent:rp_ready
	wire          in_port_freq_cnt_s1_agent_rp_startofpacket;                                         // in_port_freq_cnt_s1_agent:rp_startofpacket -> agent_pipeline_033:in_startofpacket
	wire          in_port_freq_cnt_s1_agent_rp_endofpacket;                                           // in_port_freq_cnt_s1_agent:rp_endofpacket -> agent_pipeline_033:in_endofpacket
	wire          agent_pipeline_033_source0_valid;                                                   // agent_pipeline_033:out_valid -> router_018:sink_valid
	wire   [99:0] agent_pipeline_033_source0_data;                                                    // agent_pipeline_033:out_data -> router_018:sink_data
	wire          agent_pipeline_033_source0_ready;                                                   // router_018:sink_ready -> agent_pipeline_033:out_ready
	wire          agent_pipeline_033_source0_startofpacket;                                           // agent_pipeline_033:out_startofpacket -> router_018:sink_startofpacket
	wire          agent_pipeline_033_source0_endofpacket;                                             // agent_pipeline_033:out_endofpacket -> router_018:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire   [99:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                               // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire   [16:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                         // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire   [99:0] mux_pipeline_source0_data;                                                          // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                         // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire   [16:0] mux_pipeline_source0_channel;                                                       // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                                 // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                                   // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire   [99:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire          cmd_demux_001_src0_ready;                                                           // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire   [16:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                                     // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire   [99:0] mux_pipeline_001_source0_data;                                                      // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire          mux_pipeline_001_source0_ready;                                                     // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire   [16:0] mux_pipeline_001_source0_channel;                                                   // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire          mux_pipeline_001_source0_startofpacket;                                             // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                               // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> mux_pipeline_002:in_valid
	wire   [99:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src1_ready;                                                               // mux_pipeline_002:in_ready -> cmd_demux:src1_ready
	wire   [16:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                                     // mux_pipeline_002:out_valid -> cmd_mux_001:sink0_valid
	wire   [99:0] mux_pipeline_002_source0_data;                                                      // mux_pipeline_002:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_002_source0_ready;                                                     // cmd_mux_001:sink0_ready -> mux_pipeline_002:out_ready
	wire   [16:0] mux_pipeline_002_source0_channel;                                                   // mux_pipeline_002:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                             // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                               // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_001_src1_valid;                                                           // cmd_demux_001:src1_valid -> mux_pipeline_003:in_valid
	wire   [99:0] cmd_demux_001_src1_data;                                                            // cmd_demux_001:src1_data -> mux_pipeline_003:in_data
	wire          cmd_demux_001_src1_ready;                                                           // mux_pipeline_003:in_ready -> cmd_demux_001:src1_ready
	wire   [16:0] cmd_demux_001_src1_channel;                                                         // cmd_demux_001:src1_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                                   // cmd_demux_001:src1_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                     // cmd_demux_001:src1_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                                     // mux_pipeline_003:out_valid -> cmd_mux_001:sink1_valid
	wire   [99:0] mux_pipeline_003_source0_data;                                                      // mux_pipeline_003:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_003_source0_ready;                                                     // cmd_mux_001:sink1_ready -> mux_pipeline_003:out_ready
	wire   [16:0] mux_pipeline_003_source0_channel;                                                   // mux_pipeline_003:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_003_source0_startofpacket;                                             // mux_pipeline_003:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                               // mux_pipeline_003:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> mux_pipeline_004:in_valid
	wire   [99:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src2_ready;                                                               // mux_pipeline_004:in_ready -> cmd_demux:src2_ready
	wire   [16:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                                     // mux_pipeline_004:out_valid -> cmd_mux_002:sink0_valid
	wire   [99:0] mux_pipeline_004_source0_data;                                                      // mux_pipeline_004:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_004_source0_ready;                                                     // cmd_mux_002:sink0_ready -> mux_pipeline_004:out_ready
	wire   [16:0] mux_pipeline_004_source0_channel;                                                   // mux_pipeline_004:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                             // mux_pipeline_004:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                               // mux_pipeline_004:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_001_src2_valid;                                                           // cmd_demux_001:src2_valid -> mux_pipeline_005:in_valid
	wire   [99:0] cmd_demux_001_src2_data;                                                            // cmd_demux_001:src2_data -> mux_pipeline_005:in_data
	wire          cmd_demux_001_src2_ready;                                                           // mux_pipeline_005:in_ready -> cmd_demux_001:src2_ready
	wire   [16:0] cmd_demux_001_src2_channel;                                                         // cmd_demux_001:src2_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                                   // cmd_demux_001:src2_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                     // cmd_demux_001:src2_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                                     // mux_pipeline_005:out_valid -> cmd_mux_002:sink1_valid
	wire   [99:0] mux_pipeline_005_source0_data;                                                      // mux_pipeline_005:out_data -> cmd_mux_002:sink1_data
	wire          mux_pipeline_005_source0_ready;                                                     // cmd_mux_002:sink1_ready -> mux_pipeline_005:out_ready
	wire   [16:0] mux_pipeline_005_source0_channel;                                                   // mux_pipeline_005:out_channel -> cmd_mux_002:sink1_channel
	wire          mux_pipeline_005_source0_startofpacket;                                             // mux_pipeline_005:out_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                               // mux_pipeline_005:out_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> mux_pipeline_006:in_valid
	wire   [99:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src3_ready;                                                               // mux_pipeline_006:in_ready -> cmd_demux:src3_ready
	wire   [16:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                                     // mux_pipeline_006:out_valid -> cmd_mux_003:sink0_valid
	wire   [99:0] mux_pipeline_006_source0_data;                                                      // mux_pipeline_006:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_006_source0_ready;                                                     // cmd_mux_003:sink0_ready -> mux_pipeline_006:out_ready
	wire   [16:0] mux_pipeline_006_source0_channel;                                                   // mux_pipeline_006:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                             // mux_pipeline_006:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                               // mux_pipeline_006:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                           // cmd_demux_001:src3_valid -> mux_pipeline_007:in_valid
	wire   [99:0] cmd_demux_001_src3_data;                                                            // cmd_demux_001:src3_data -> mux_pipeline_007:in_data
	wire          cmd_demux_001_src3_ready;                                                           // mux_pipeline_007:in_ready -> cmd_demux_001:src3_ready
	wire   [16:0] cmd_demux_001_src3_channel;                                                         // cmd_demux_001:src3_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                                   // cmd_demux_001:src3_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                                     // cmd_demux_001:src3_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                                     // mux_pipeline_007:out_valid -> cmd_mux_003:sink1_valid
	wire   [99:0] mux_pipeline_007_source0_data;                                                      // mux_pipeline_007:out_data -> cmd_mux_003:sink1_data
	wire          mux_pipeline_007_source0_ready;                                                     // cmd_mux_003:sink1_ready -> mux_pipeline_007:out_ready
	wire   [16:0] mux_pipeline_007_source0_channel;                                                   // mux_pipeline_007:out_channel -> cmd_mux_003:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                                             // mux_pipeline_007:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                               // mux_pipeline_007:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> mux_pipeline_008:in_valid
	wire   [99:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> mux_pipeline_008:in_data
	wire          cmd_demux_src4_ready;                                                               // mux_pipeline_008:in_ready -> cmd_demux:src4_ready
	wire   [16:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                                     // mux_pipeline_008:out_valid -> cmd_mux_004:sink0_valid
	wire   [99:0] mux_pipeline_008_source0_data;                                                      // mux_pipeline_008:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_008_source0_ready;                                                     // cmd_mux_004:sink0_ready -> mux_pipeline_008:out_ready
	wire   [16:0] mux_pipeline_008_source0_channel;                                                   // mux_pipeline_008:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_008_source0_startofpacket;                                             // mux_pipeline_008:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                               // mux_pipeline_008:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                           // cmd_demux_001:src4_valid -> mux_pipeline_009:in_valid
	wire   [99:0] cmd_demux_001_src4_data;                                                            // cmd_demux_001:src4_data -> mux_pipeline_009:in_data
	wire          cmd_demux_001_src4_ready;                                                           // mux_pipeline_009:in_ready -> cmd_demux_001:src4_ready
	wire   [16:0] cmd_demux_001_src4_channel;                                                         // cmd_demux_001:src4_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                                   // cmd_demux_001:src4_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                                     // cmd_demux_001:src4_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                                     // mux_pipeline_009:out_valid -> cmd_mux_004:sink1_valid
	wire   [99:0] mux_pipeline_009_source0_data;                                                      // mux_pipeline_009:out_data -> cmd_mux_004:sink1_data
	wire          mux_pipeline_009_source0_ready;                                                     // cmd_mux_004:sink1_ready -> mux_pipeline_009:out_ready
	wire   [16:0] mux_pipeline_009_source0_channel;                                                   // mux_pipeline_009:out_channel -> cmd_mux_004:sink1_channel
	wire          mux_pipeline_009_source0_startofpacket;                                             // mux_pipeline_009:out_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                               // mux_pipeline_009:out_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> mux_pipeline_010:in_valid
	wire   [99:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> mux_pipeline_010:in_data
	wire          cmd_demux_src5_ready;                                                               // mux_pipeline_010:in_ready -> cmd_demux:src5_ready
	wire   [16:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> mux_pipeline_010:in_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                                     // mux_pipeline_010:out_valid -> cmd_mux_005:sink0_valid
	wire   [99:0] mux_pipeline_010_source0_data;                                                      // mux_pipeline_010:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_010_source0_ready;                                                     // cmd_mux_005:sink0_ready -> mux_pipeline_010:out_ready
	wire   [16:0] mux_pipeline_010_source0_channel;                                                   // mux_pipeline_010:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_010_source0_startofpacket;                                             // mux_pipeline_010:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                               // mux_pipeline_010:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> mux_pipeline_011:in_valid
	wire   [99:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> mux_pipeline_011:in_data
	wire          cmd_demux_src6_ready;                                                               // mux_pipeline_011:in_ready -> cmd_demux:src6_ready
	wire   [16:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> mux_pipeline_011:in_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                                     // mux_pipeline_011:out_valid -> cmd_mux_006:sink0_valid
	wire   [99:0] mux_pipeline_011_source0_data;                                                      // mux_pipeline_011:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_011_source0_ready;                                                     // cmd_mux_006:sink0_ready -> mux_pipeline_011:out_ready
	wire   [16:0] mux_pipeline_011_source0_channel;                                                   // mux_pipeline_011:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_011_source0_startofpacket;                                             // mux_pipeline_011:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                               // mux_pipeline_011:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> mux_pipeline_012:in_valid
	wire   [99:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> mux_pipeline_012:in_data
	wire          cmd_demux_src7_ready;                                                               // mux_pipeline_012:in_ready -> cmd_demux:src7_ready
	wire   [16:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> mux_pipeline_012:in_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                                     // mux_pipeline_012:out_valid -> cmd_mux_007:sink0_valid
	wire   [99:0] mux_pipeline_012_source0_data;                                                      // mux_pipeline_012:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_012_source0_ready;                                                     // cmd_mux_007:sink0_ready -> mux_pipeline_012:out_ready
	wire   [16:0] mux_pipeline_012_source0_channel;                                                   // mux_pipeline_012:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_012_source0_startofpacket;                                             // mux_pipeline_012:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                               // mux_pipeline_012:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> mux_pipeline_013:in_valid
	wire   [99:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> mux_pipeline_013:in_data
	wire          cmd_demux_src8_ready;                                                               // mux_pipeline_013:in_ready -> cmd_demux:src8_ready
	wire   [16:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> mux_pipeline_013:in_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                                     // mux_pipeline_013:out_valid -> cmd_mux_008:sink0_valid
	wire   [99:0] mux_pipeline_013_source0_data;                                                      // mux_pipeline_013:out_data -> cmd_mux_008:sink0_data
	wire          mux_pipeline_013_source0_ready;                                                     // cmd_mux_008:sink0_ready -> mux_pipeline_013:out_ready
	wire   [16:0] mux_pipeline_013_source0_channel;                                                   // mux_pipeline_013:out_channel -> cmd_mux_008:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                             // mux_pipeline_013:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                               // mux_pipeline_013:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> mux_pipeline_014:in_valid
	wire   [99:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> mux_pipeline_014:in_data
	wire          cmd_demux_src9_ready;                                                               // mux_pipeline_014:in_ready -> cmd_demux:src9_ready
	wire   [16:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> mux_pipeline_014:in_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                                     // mux_pipeline_014:out_valid -> cmd_mux_009:sink0_valid
	wire   [99:0] mux_pipeline_014_source0_data;                                                      // mux_pipeline_014:out_data -> cmd_mux_009:sink0_data
	wire          mux_pipeline_014_source0_ready;                                                     // cmd_mux_009:sink0_ready -> mux_pipeline_014:out_ready
	wire   [16:0] mux_pipeline_014_source0_channel;                                                   // mux_pipeline_014:out_channel -> cmd_mux_009:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                             // mux_pipeline_014:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                               // mux_pipeline_014:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> mux_pipeline_015:in_valid
	wire   [99:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> mux_pipeline_015:in_data
	wire          cmd_demux_src10_ready;                                                              // mux_pipeline_015:in_ready -> cmd_demux:src10_ready
	wire   [16:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> mux_pipeline_015:in_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                                     // mux_pipeline_015:out_valid -> cmd_mux_010:sink0_valid
	wire   [99:0] mux_pipeline_015_source0_data;                                                      // mux_pipeline_015:out_data -> cmd_mux_010:sink0_data
	wire          mux_pipeline_015_source0_ready;                                                     // cmd_mux_010:sink0_ready -> mux_pipeline_015:out_ready
	wire   [16:0] mux_pipeline_015_source0_channel;                                                   // mux_pipeline_015:out_channel -> cmd_mux_010:sink0_channel
	wire          mux_pipeline_015_source0_startofpacket;                                             // mux_pipeline_015:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                               // mux_pipeline_015:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> mux_pipeline_016:in_valid
	wire   [99:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> mux_pipeline_016:in_data
	wire          cmd_demux_src11_ready;                                                              // mux_pipeline_016:in_ready -> cmd_demux:src11_ready
	wire   [16:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> mux_pipeline_016:in_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                                     // mux_pipeline_016:out_valid -> cmd_mux_011:sink0_valid
	wire   [99:0] mux_pipeline_016_source0_data;                                                      // mux_pipeline_016:out_data -> cmd_mux_011:sink0_data
	wire          mux_pipeline_016_source0_ready;                                                     // cmd_mux_011:sink0_ready -> mux_pipeline_016:out_ready
	wire   [16:0] mux_pipeline_016_source0_channel;                                                   // mux_pipeline_016:out_channel -> cmd_mux_011:sink0_channel
	wire          mux_pipeline_016_source0_startofpacket;                                             // mux_pipeline_016:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                               // mux_pipeline_016:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> mux_pipeline_017:in_valid
	wire   [99:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> mux_pipeline_017:in_data
	wire          cmd_demux_src12_ready;                                                              // mux_pipeline_017:in_ready -> cmd_demux:src12_ready
	wire   [16:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> mux_pipeline_017:in_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                                     // mux_pipeline_017:out_valid -> cmd_mux_012:sink0_valid
	wire   [99:0] mux_pipeline_017_source0_data;                                                      // mux_pipeline_017:out_data -> cmd_mux_012:sink0_data
	wire          mux_pipeline_017_source0_ready;                                                     // cmd_mux_012:sink0_ready -> mux_pipeline_017:out_ready
	wire   [16:0] mux_pipeline_017_source0_channel;                                                   // mux_pipeline_017:out_channel -> cmd_mux_012:sink0_channel
	wire          mux_pipeline_017_source0_startofpacket;                                             // mux_pipeline_017:out_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                               // mux_pipeline_017:out_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> mux_pipeline_018:in_valid
	wire   [99:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> mux_pipeline_018:in_data
	wire          cmd_demux_src13_ready;                                                              // mux_pipeline_018:in_ready -> cmd_demux:src13_ready
	wire   [16:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> mux_pipeline_018:in_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                                     // mux_pipeline_018:out_valid -> cmd_mux_013:sink0_valid
	wire   [99:0] mux_pipeline_018_source0_data;                                                      // mux_pipeline_018:out_data -> cmd_mux_013:sink0_data
	wire          mux_pipeline_018_source0_ready;                                                     // cmd_mux_013:sink0_ready -> mux_pipeline_018:out_ready
	wire   [16:0] mux_pipeline_018_source0_channel;                                                   // mux_pipeline_018:out_channel -> cmd_mux_013:sink0_channel
	wire          mux_pipeline_018_source0_startofpacket;                                             // mux_pipeline_018:out_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                               // mux_pipeline_018:out_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> mux_pipeline_019:in_valid
	wire   [99:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> mux_pipeline_019:in_data
	wire          cmd_demux_src14_ready;                                                              // mux_pipeline_019:in_ready -> cmd_demux:src14_ready
	wire   [16:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> mux_pipeline_019:in_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                                     // mux_pipeline_019:out_valid -> cmd_mux_014:sink0_valid
	wire   [99:0] mux_pipeline_019_source0_data;                                                      // mux_pipeline_019:out_data -> cmd_mux_014:sink0_data
	wire          mux_pipeline_019_source0_ready;                                                     // cmd_mux_014:sink0_ready -> mux_pipeline_019:out_ready
	wire   [16:0] mux_pipeline_019_source0_channel;                                                   // mux_pipeline_019:out_channel -> cmd_mux_014:sink0_channel
	wire          mux_pipeline_019_source0_startofpacket;                                             // mux_pipeline_019:out_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                               // mux_pipeline_019:out_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> mux_pipeline_020:in_valid
	wire   [99:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> mux_pipeline_020:in_data
	wire          cmd_demux_src15_ready;                                                              // mux_pipeline_020:in_ready -> cmd_demux:src15_ready
	wire   [16:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> mux_pipeline_020:in_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> mux_pipeline_020:in_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> mux_pipeline_020:in_endofpacket
	wire          mux_pipeline_020_source0_valid;                                                     // mux_pipeline_020:out_valid -> cmd_mux_015:sink0_valid
	wire   [99:0] mux_pipeline_020_source0_data;                                                      // mux_pipeline_020:out_data -> cmd_mux_015:sink0_data
	wire          mux_pipeline_020_source0_ready;                                                     // cmd_mux_015:sink0_ready -> mux_pipeline_020:out_ready
	wire   [16:0] mux_pipeline_020_source0_channel;                                                   // mux_pipeline_020:out_channel -> cmd_mux_015:sink0_channel
	wire          mux_pipeline_020_source0_startofpacket;                                             // mux_pipeline_020:out_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          mux_pipeline_020_source0_endofpacket;                                               // mux_pipeline_020:out_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> mux_pipeline_021:in_valid
	wire   [99:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> mux_pipeline_021:in_data
	wire          cmd_demux_src16_ready;                                                              // mux_pipeline_021:in_ready -> cmd_demux:src16_ready
	wire   [16:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> mux_pipeline_021:in_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> mux_pipeline_021:in_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> mux_pipeline_021:in_endofpacket
	wire          mux_pipeline_021_source0_valid;                                                     // mux_pipeline_021:out_valid -> cmd_mux_016:sink0_valid
	wire   [99:0] mux_pipeline_021_source0_data;                                                      // mux_pipeline_021:out_data -> cmd_mux_016:sink0_data
	wire          mux_pipeline_021_source0_ready;                                                     // cmd_mux_016:sink0_ready -> mux_pipeline_021:out_ready
	wire   [16:0] mux_pipeline_021_source0_channel;                                                   // mux_pipeline_021:out_channel -> cmd_mux_016:sink0_channel
	wire          mux_pipeline_021_source0_startofpacket;                                             // mux_pipeline_021:out_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          mux_pipeline_021_source0_endofpacket;                                               // mux_pipeline_021:out_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> mux_pipeline_022:in_valid
	wire   [99:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> mux_pipeline_022:in_data
	wire          rsp_demux_src0_ready;                                                               // mux_pipeline_022:in_ready -> rsp_demux:src0_ready
	wire   [16:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> mux_pipeline_022:in_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> mux_pipeline_022:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> mux_pipeline_022:in_endofpacket
	wire          mux_pipeline_022_source0_valid;                                                     // mux_pipeline_022:out_valid -> rsp_mux:sink0_valid
	wire   [99:0] mux_pipeline_022_source0_data;                                                      // mux_pipeline_022:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_022_source0_ready;                                                     // rsp_mux:sink0_ready -> mux_pipeline_022:out_ready
	wire   [16:0] mux_pipeline_022_source0_channel;                                                   // mux_pipeline_022:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_022_source0_startofpacket;                                             // mux_pipeline_022:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_022_source0_endofpacket;                                               // mux_pipeline_022:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> mux_pipeline_023:in_valid
	wire   [99:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> mux_pipeline_023:in_data
	wire          rsp_demux_001_src0_ready;                                                           // mux_pipeline_023:in_ready -> rsp_demux_001:src0_ready
	wire   [16:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> mux_pipeline_023:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> mux_pipeline_023:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> mux_pipeline_023:in_endofpacket
	wire          mux_pipeline_023_source0_valid;                                                     // mux_pipeline_023:out_valid -> rsp_mux:sink1_valid
	wire   [99:0] mux_pipeline_023_source0_data;                                                      // mux_pipeline_023:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_023_source0_ready;                                                     // rsp_mux:sink1_ready -> mux_pipeline_023:out_ready
	wire   [16:0] mux_pipeline_023_source0_channel;                                                   // mux_pipeline_023:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_023_source0_startofpacket;                                             // mux_pipeline_023:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_023_source0_endofpacket;                                               // mux_pipeline_023:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> mux_pipeline_024:in_valid
	wire   [99:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> mux_pipeline_024:in_data
	wire          rsp_demux_002_src0_ready;                                                           // mux_pipeline_024:in_ready -> rsp_demux_002:src0_ready
	wire   [16:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> mux_pipeline_024:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> mux_pipeline_024:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> mux_pipeline_024:in_endofpacket
	wire          mux_pipeline_024_source0_valid;                                                     // mux_pipeline_024:out_valid -> rsp_mux:sink2_valid
	wire   [99:0] mux_pipeline_024_source0_data;                                                      // mux_pipeline_024:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_024_source0_ready;                                                     // rsp_mux:sink2_ready -> mux_pipeline_024:out_ready
	wire   [16:0] mux_pipeline_024_source0_channel;                                                   // mux_pipeline_024:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_024_source0_startofpacket;                                             // mux_pipeline_024:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_024_source0_endofpacket;                                               // mux_pipeline_024:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> mux_pipeline_025:in_valid
	wire   [99:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> mux_pipeline_025:in_data
	wire          rsp_demux_003_src0_ready;                                                           // mux_pipeline_025:in_ready -> rsp_demux_003:src0_ready
	wire   [16:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> mux_pipeline_025:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> mux_pipeline_025:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> mux_pipeline_025:in_endofpacket
	wire          mux_pipeline_025_source0_valid;                                                     // mux_pipeline_025:out_valid -> rsp_mux:sink3_valid
	wire   [99:0] mux_pipeline_025_source0_data;                                                      // mux_pipeline_025:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_025_source0_ready;                                                     // rsp_mux:sink3_ready -> mux_pipeline_025:out_ready
	wire   [16:0] mux_pipeline_025_source0_channel;                                                   // mux_pipeline_025:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_025_source0_startofpacket;                                             // mux_pipeline_025:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_025_source0_endofpacket;                                               // mux_pipeline_025:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> mux_pipeline_026:in_valid
	wire   [99:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> mux_pipeline_026:in_data
	wire          rsp_demux_004_src0_ready;                                                           // mux_pipeline_026:in_ready -> rsp_demux_004:src0_ready
	wire   [16:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> mux_pipeline_026:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> mux_pipeline_026:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> mux_pipeline_026:in_endofpacket
	wire          mux_pipeline_026_source0_valid;                                                     // mux_pipeline_026:out_valid -> rsp_mux:sink4_valid
	wire   [99:0] mux_pipeline_026_source0_data;                                                      // mux_pipeline_026:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_026_source0_ready;                                                     // rsp_mux:sink4_ready -> mux_pipeline_026:out_ready
	wire   [16:0] mux_pipeline_026_source0_channel;                                                   // mux_pipeline_026:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_026_source0_startofpacket;                                             // mux_pipeline_026:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_026_source0_endofpacket;                                               // mux_pipeline_026:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> mux_pipeline_027:in_valid
	wire   [99:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> mux_pipeline_027:in_data
	wire          rsp_demux_005_src0_ready;                                                           // mux_pipeline_027:in_ready -> rsp_demux_005:src0_ready
	wire   [16:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> mux_pipeline_027:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> mux_pipeline_027:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> mux_pipeline_027:in_endofpacket
	wire          mux_pipeline_027_source0_valid;                                                     // mux_pipeline_027:out_valid -> rsp_mux:sink5_valid
	wire   [99:0] mux_pipeline_027_source0_data;                                                      // mux_pipeline_027:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_027_source0_ready;                                                     // rsp_mux:sink5_ready -> mux_pipeline_027:out_ready
	wire   [16:0] mux_pipeline_027_source0_channel;                                                   // mux_pipeline_027:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_027_source0_startofpacket;                                             // mux_pipeline_027:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_027_source0_endofpacket;                                               // mux_pipeline_027:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> mux_pipeline_028:in_valid
	wire   [99:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> mux_pipeline_028:in_data
	wire          rsp_demux_006_src0_ready;                                                           // mux_pipeline_028:in_ready -> rsp_demux_006:src0_ready
	wire   [16:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> mux_pipeline_028:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> mux_pipeline_028:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> mux_pipeline_028:in_endofpacket
	wire          mux_pipeline_028_source0_valid;                                                     // mux_pipeline_028:out_valid -> rsp_mux:sink6_valid
	wire   [99:0] mux_pipeline_028_source0_data;                                                      // mux_pipeline_028:out_data -> rsp_mux:sink6_data
	wire          mux_pipeline_028_source0_ready;                                                     // rsp_mux:sink6_ready -> mux_pipeline_028:out_ready
	wire   [16:0] mux_pipeline_028_source0_channel;                                                   // mux_pipeline_028:out_channel -> rsp_mux:sink6_channel
	wire          mux_pipeline_028_source0_startofpacket;                                             // mux_pipeline_028:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire          mux_pipeline_028_source0_endofpacket;                                               // mux_pipeline_028:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> mux_pipeline_029:in_valid
	wire   [99:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> mux_pipeline_029:in_data
	wire          rsp_demux_007_src0_ready;                                                           // mux_pipeline_029:in_ready -> rsp_demux_007:src0_ready
	wire   [16:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> mux_pipeline_029:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> mux_pipeline_029:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> mux_pipeline_029:in_endofpacket
	wire          mux_pipeline_029_source0_valid;                                                     // mux_pipeline_029:out_valid -> rsp_mux:sink7_valid
	wire   [99:0] mux_pipeline_029_source0_data;                                                      // mux_pipeline_029:out_data -> rsp_mux:sink7_data
	wire          mux_pipeline_029_source0_ready;                                                     // rsp_mux:sink7_ready -> mux_pipeline_029:out_ready
	wire   [16:0] mux_pipeline_029_source0_channel;                                                   // mux_pipeline_029:out_channel -> rsp_mux:sink7_channel
	wire          mux_pipeline_029_source0_startofpacket;                                             // mux_pipeline_029:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire          mux_pipeline_029_source0_endofpacket;                                               // mux_pipeline_029:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> mux_pipeline_030:in_valid
	wire   [99:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> mux_pipeline_030:in_data
	wire          rsp_demux_008_src0_ready;                                                           // mux_pipeline_030:in_ready -> rsp_demux_008:src0_ready
	wire   [16:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> mux_pipeline_030:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> mux_pipeline_030:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> mux_pipeline_030:in_endofpacket
	wire          mux_pipeline_030_source0_valid;                                                     // mux_pipeline_030:out_valid -> rsp_mux:sink8_valid
	wire   [99:0] mux_pipeline_030_source0_data;                                                      // mux_pipeline_030:out_data -> rsp_mux:sink8_data
	wire          mux_pipeline_030_source0_ready;                                                     // rsp_mux:sink8_ready -> mux_pipeline_030:out_ready
	wire   [16:0] mux_pipeline_030_source0_channel;                                                   // mux_pipeline_030:out_channel -> rsp_mux:sink8_channel
	wire          mux_pipeline_030_source0_startofpacket;                                             // mux_pipeline_030:out_startofpacket -> rsp_mux:sink8_startofpacket
	wire          mux_pipeline_030_source0_endofpacket;                                               // mux_pipeline_030:out_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> mux_pipeline_031:in_valid
	wire   [99:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> mux_pipeline_031:in_data
	wire          rsp_demux_009_src0_ready;                                                           // mux_pipeline_031:in_ready -> rsp_demux_009:src0_ready
	wire   [16:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> mux_pipeline_031:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> mux_pipeline_031:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> mux_pipeline_031:in_endofpacket
	wire          mux_pipeline_031_source0_valid;                                                     // mux_pipeline_031:out_valid -> rsp_mux:sink9_valid
	wire   [99:0] mux_pipeline_031_source0_data;                                                      // mux_pipeline_031:out_data -> rsp_mux:sink9_data
	wire          mux_pipeline_031_source0_ready;                                                     // rsp_mux:sink9_ready -> mux_pipeline_031:out_ready
	wire   [16:0] mux_pipeline_031_source0_channel;                                                   // mux_pipeline_031:out_channel -> rsp_mux:sink9_channel
	wire          mux_pipeline_031_source0_startofpacket;                                             // mux_pipeline_031:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          mux_pipeline_031_source0_endofpacket;                                               // mux_pipeline_031:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> mux_pipeline_032:in_valid
	wire   [99:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> mux_pipeline_032:in_data
	wire          rsp_demux_010_src0_ready;                                                           // mux_pipeline_032:in_ready -> rsp_demux_010:src0_ready
	wire   [16:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> mux_pipeline_032:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> mux_pipeline_032:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> mux_pipeline_032:in_endofpacket
	wire          mux_pipeline_032_source0_valid;                                                     // mux_pipeline_032:out_valid -> rsp_mux:sink10_valid
	wire   [99:0] mux_pipeline_032_source0_data;                                                      // mux_pipeline_032:out_data -> rsp_mux:sink10_data
	wire          mux_pipeline_032_source0_ready;                                                     // rsp_mux:sink10_ready -> mux_pipeline_032:out_ready
	wire   [16:0] mux_pipeline_032_source0_channel;                                                   // mux_pipeline_032:out_channel -> rsp_mux:sink10_channel
	wire          mux_pipeline_032_source0_startofpacket;                                             // mux_pipeline_032:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          mux_pipeline_032_source0_endofpacket;                                               // mux_pipeline_032:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> mux_pipeline_033:in_valid
	wire   [99:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> mux_pipeline_033:in_data
	wire          rsp_demux_011_src0_ready;                                                           // mux_pipeline_033:in_ready -> rsp_demux_011:src0_ready
	wire   [16:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> mux_pipeline_033:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> mux_pipeline_033:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> mux_pipeline_033:in_endofpacket
	wire          mux_pipeline_033_source0_valid;                                                     // mux_pipeline_033:out_valid -> rsp_mux:sink11_valid
	wire   [99:0] mux_pipeline_033_source0_data;                                                      // mux_pipeline_033:out_data -> rsp_mux:sink11_data
	wire          mux_pipeline_033_source0_ready;                                                     // rsp_mux:sink11_ready -> mux_pipeline_033:out_ready
	wire   [16:0] mux_pipeline_033_source0_channel;                                                   // mux_pipeline_033:out_channel -> rsp_mux:sink11_channel
	wire          mux_pipeline_033_source0_startofpacket;                                             // mux_pipeline_033:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          mux_pipeline_033_source0_endofpacket;                                               // mux_pipeline_033:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> mux_pipeline_034:in_valid
	wire   [99:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> mux_pipeline_034:in_data
	wire          rsp_demux_012_src0_ready;                                                           // mux_pipeline_034:in_ready -> rsp_demux_012:src0_ready
	wire   [16:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> mux_pipeline_034:in_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> mux_pipeline_034:in_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> mux_pipeline_034:in_endofpacket
	wire          mux_pipeline_034_source0_valid;                                                     // mux_pipeline_034:out_valid -> rsp_mux:sink12_valid
	wire   [99:0] mux_pipeline_034_source0_data;                                                      // mux_pipeline_034:out_data -> rsp_mux:sink12_data
	wire          mux_pipeline_034_source0_ready;                                                     // rsp_mux:sink12_ready -> mux_pipeline_034:out_ready
	wire   [16:0] mux_pipeline_034_source0_channel;                                                   // mux_pipeline_034:out_channel -> rsp_mux:sink12_channel
	wire          mux_pipeline_034_source0_startofpacket;                                             // mux_pipeline_034:out_startofpacket -> rsp_mux:sink12_startofpacket
	wire          mux_pipeline_034_source0_endofpacket;                                               // mux_pipeline_034:out_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> mux_pipeline_035:in_valid
	wire   [99:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> mux_pipeline_035:in_data
	wire          rsp_demux_013_src0_ready;                                                           // mux_pipeline_035:in_ready -> rsp_demux_013:src0_ready
	wire   [16:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> mux_pipeline_035:in_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> mux_pipeline_035:in_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> mux_pipeline_035:in_endofpacket
	wire          mux_pipeline_035_source0_valid;                                                     // mux_pipeline_035:out_valid -> rsp_mux:sink13_valid
	wire   [99:0] mux_pipeline_035_source0_data;                                                      // mux_pipeline_035:out_data -> rsp_mux:sink13_data
	wire          mux_pipeline_035_source0_ready;                                                     // rsp_mux:sink13_ready -> mux_pipeline_035:out_ready
	wire   [16:0] mux_pipeline_035_source0_channel;                                                   // mux_pipeline_035:out_channel -> rsp_mux:sink13_channel
	wire          mux_pipeline_035_source0_startofpacket;                                             // mux_pipeline_035:out_startofpacket -> rsp_mux:sink13_startofpacket
	wire          mux_pipeline_035_source0_endofpacket;                                               // mux_pipeline_035:out_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> mux_pipeline_036:in_valid
	wire   [99:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> mux_pipeline_036:in_data
	wire          rsp_demux_014_src0_ready;                                                           // mux_pipeline_036:in_ready -> rsp_demux_014:src0_ready
	wire   [16:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> mux_pipeline_036:in_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> mux_pipeline_036:in_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> mux_pipeline_036:in_endofpacket
	wire          mux_pipeline_036_source0_valid;                                                     // mux_pipeline_036:out_valid -> rsp_mux:sink14_valid
	wire   [99:0] mux_pipeline_036_source0_data;                                                      // mux_pipeline_036:out_data -> rsp_mux:sink14_data
	wire          mux_pipeline_036_source0_ready;                                                     // rsp_mux:sink14_ready -> mux_pipeline_036:out_ready
	wire   [16:0] mux_pipeline_036_source0_channel;                                                   // mux_pipeline_036:out_channel -> rsp_mux:sink14_channel
	wire          mux_pipeline_036_source0_startofpacket;                                             // mux_pipeline_036:out_startofpacket -> rsp_mux:sink14_startofpacket
	wire          mux_pipeline_036_source0_endofpacket;                                               // mux_pipeline_036:out_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> mux_pipeline_037:in_valid
	wire   [99:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> mux_pipeline_037:in_data
	wire          rsp_demux_015_src0_ready;                                                           // mux_pipeline_037:in_ready -> rsp_demux_015:src0_ready
	wire   [16:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> mux_pipeline_037:in_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> mux_pipeline_037:in_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> mux_pipeline_037:in_endofpacket
	wire          mux_pipeline_037_source0_valid;                                                     // mux_pipeline_037:out_valid -> rsp_mux:sink15_valid
	wire   [99:0] mux_pipeline_037_source0_data;                                                      // mux_pipeline_037:out_data -> rsp_mux:sink15_data
	wire          mux_pipeline_037_source0_ready;                                                     // rsp_mux:sink15_ready -> mux_pipeline_037:out_ready
	wire   [16:0] mux_pipeline_037_source0_channel;                                                   // mux_pipeline_037:out_channel -> rsp_mux:sink15_channel
	wire          mux_pipeline_037_source0_startofpacket;                                             // mux_pipeline_037:out_startofpacket -> rsp_mux:sink15_startofpacket
	wire          mux_pipeline_037_source0_endofpacket;                                               // mux_pipeline_037:out_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> mux_pipeline_038:in_valid
	wire   [99:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> mux_pipeline_038:in_data
	wire          rsp_demux_016_src0_ready;                                                           // mux_pipeline_038:in_ready -> rsp_demux_016:src0_ready
	wire   [16:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> mux_pipeline_038:in_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> mux_pipeline_038:in_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> mux_pipeline_038:in_endofpacket
	wire          mux_pipeline_038_source0_valid;                                                     // mux_pipeline_038:out_valid -> rsp_mux:sink16_valid
	wire   [99:0] mux_pipeline_038_source0_data;                                                      // mux_pipeline_038:out_data -> rsp_mux:sink16_data
	wire          mux_pipeline_038_source0_ready;                                                     // rsp_mux:sink16_ready -> mux_pipeline_038:out_ready
	wire   [16:0] mux_pipeline_038_source0_channel;                                                   // mux_pipeline_038:out_channel -> rsp_mux:sink16_channel
	wire          mux_pipeline_038_source0_startofpacket;                                             // mux_pipeline_038:out_startofpacket -> rsp_mux:sink16_startofpacket
	wire          mux_pipeline_038_source0_endofpacket;                                               // mux_pipeline_038:out_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_src1_valid;                                                               // rsp_demux:src1_valid -> mux_pipeline_039:in_valid
	wire   [99:0] rsp_demux_src1_data;                                                                // rsp_demux:src1_data -> mux_pipeline_039:in_data
	wire          rsp_demux_src1_ready;                                                               // mux_pipeline_039:in_ready -> rsp_demux:src1_ready
	wire   [16:0] rsp_demux_src1_channel;                                                             // rsp_demux:src1_channel -> mux_pipeline_039:in_channel
	wire          rsp_demux_src1_startofpacket;                                                       // rsp_demux:src1_startofpacket -> mux_pipeline_039:in_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                         // rsp_demux:src1_endofpacket -> mux_pipeline_039:in_endofpacket
	wire          mux_pipeline_039_source0_valid;                                                     // mux_pipeline_039:out_valid -> rsp_mux_001:sink0_valid
	wire   [99:0] mux_pipeline_039_source0_data;                                                      // mux_pipeline_039:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_039_source0_ready;                                                     // rsp_mux_001:sink0_ready -> mux_pipeline_039:out_ready
	wire   [16:0] mux_pipeline_039_source0_channel;                                                   // mux_pipeline_039:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_039_source0_startofpacket;                                             // mux_pipeline_039:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_039_source0_endofpacket;                                               // mux_pipeline_039:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src1_valid;                                                           // rsp_demux_001:src1_valid -> mux_pipeline_040:in_valid
	wire   [99:0] rsp_demux_001_src1_data;                                                            // rsp_demux_001:src1_data -> mux_pipeline_040:in_data
	wire          rsp_demux_001_src1_ready;                                                           // mux_pipeline_040:in_ready -> rsp_demux_001:src1_ready
	wire   [16:0] rsp_demux_001_src1_channel;                                                         // rsp_demux_001:src1_channel -> mux_pipeline_040:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                                   // rsp_demux_001:src1_startofpacket -> mux_pipeline_040:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                     // rsp_demux_001:src1_endofpacket -> mux_pipeline_040:in_endofpacket
	wire          mux_pipeline_040_source0_valid;                                                     // mux_pipeline_040:out_valid -> rsp_mux_001:sink1_valid
	wire   [99:0] mux_pipeline_040_source0_data;                                                      // mux_pipeline_040:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_040_source0_ready;                                                     // rsp_mux_001:sink1_ready -> mux_pipeline_040:out_ready
	wire   [16:0] mux_pipeline_040_source0_channel;                                                   // mux_pipeline_040:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_040_source0_startofpacket;                                             // mux_pipeline_040:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_040_source0_endofpacket;                                               // mux_pipeline_040:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_002_src1_valid;                                                           // rsp_demux_002:src1_valid -> mux_pipeline_041:in_valid
	wire   [99:0] rsp_demux_002_src1_data;                                                            // rsp_demux_002:src1_data -> mux_pipeline_041:in_data
	wire          rsp_demux_002_src1_ready;                                                           // mux_pipeline_041:in_ready -> rsp_demux_002:src1_ready
	wire   [16:0] rsp_demux_002_src1_channel;                                                         // rsp_demux_002:src1_channel -> mux_pipeline_041:in_channel
	wire          rsp_demux_002_src1_startofpacket;                                                   // rsp_demux_002:src1_startofpacket -> mux_pipeline_041:in_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                     // rsp_demux_002:src1_endofpacket -> mux_pipeline_041:in_endofpacket
	wire          mux_pipeline_041_source0_valid;                                                     // mux_pipeline_041:out_valid -> rsp_mux_001:sink2_valid
	wire   [99:0] mux_pipeline_041_source0_data;                                                      // mux_pipeline_041:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_041_source0_ready;                                                     // rsp_mux_001:sink2_ready -> mux_pipeline_041:out_ready
	wire   [16:0] mux_pipeline_041_source0_channel;                                                   // mux_pipeline_041:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_041_source0_startofpacket;                                             // mux_pipeline_041:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_041_source0_endofpacket;                                               // mux_pipeline_041:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_003_src1_valid;                                                           // rsp_demux_003:src1_valid -> mux_pipeline_042:in_valid
	wire   [99:0] rsp_demux_003_src1_data;                                                            // rsp_demux_003:src1_data -> mux_pipeline_042:in_data
	wire          rsp_demux_003_src1_ready;                                                           // mux_pipeline_042:in_ready -> rsp_demux_003:src1_ready
	wire   [16:0] rsp_demux_003_src1_channel;                                                         // rsp_demux_003:src1_channel -> mux_pipeline_042:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                                   // rsp_demux_003:src1_startofpacket -> mux_pipeline_042:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                     // rsp_demux_003:src1_endofpacket -> mux_pipeline_042:in_endofpacket
	wire          mux_pipeline_042_source0_valid;                                                     // mux_pipeline_042:out_valid -> rsp_mux_001:sink3_valid
	wire   [99:0] mux_pipeline_042_source0_data;                                                      // mux_pipeline_042:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_042_source0_ready;                                                     // rsp_mux_001:sink3_ready -> mux_pipeline_042:out_ready
	wire   [16:0] mux_pipeline_042_source0_channel;                                                   // mux_pipeline_042:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_042_source0_startofpacket;                                             // mux_pipeline_042:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_042_source0_endofpacket;                                               // mux_pipeline_042:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_004_src1_valid;                                                           // rsp_demux_004:src1_valid -> mux_pipeline_043:in_valid
	wire   [99:0] rsp_demux_004_src1_data;                                                            // rsp_demux_004:src1_data -> mux_pipeline_043:in_data
	wire          rsp_demux_004_src1_ready;                                                           // mux_pipeline_043:in_ready -> rsp_demux_004:src1_ready
	wire   [16:0] rsp_demux_004_src1_channel;                                                         // rsp_demux_004:src1_channel -> mux_pipeline_043:in_channel
	wire          rsp_demux_004_src1_startofpacket;                                                   // rsp_demux_004:src1_startofpacket -> mux_pipeline_043:in_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                     // rsp_demux_004:src1_endofpacket -> mux_pipeline_043:in_endofpacket
	wire          mux_pipeline_043_source0_valid;                                                     // mux_pipeline_043:out_valid -> rsp_mux_001:sink4_valid
	wire   [99:0] mux_pipeline_043_source0_data;                                                      // mux_pipeline_043:out_data -> rsp_mux_001:sink4_data
	wire          mux_pipeline_043_source0_ready;                                                     // rsp_mux_001:sink4_ready -> mux_pipeline_043:out_ready
	wire   [16:0] mux_pipeline_043_source0_channel;                                                   // mux_pipeline_043:out_channel -> rsp_mux_001:sink4_channel
	wire          mux_pipeline_043_source0_startofpacket;                                             // mux_pipeline_043:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          mux_pipeline_043_source0_endofpacket;                                               // mux_pipeline_043:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                           // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                            // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                      // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                       // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                      // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                      // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          product_info_0_avalon_slave_0_agent_rdata_fifo_src_valid;                           // product_info_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] product_info_0_avalon_slave_0_agent_rdata_fifo_src_data;                            // product_info_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          product_info_0_avalon_slave_0_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_001:in_0_ready -> product_info_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                  // avalon_st_adapter_001:out_0_valid -> product_info_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                   // avalon_st_adapter_001:out_0_data -> product_info_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                  // product_info_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                  // avalon_st_adapter_001:out_0_error -> product_info_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                              // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                               // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_002:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                  // avalon_st_adapter_002:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                   // avalon_st_adapter_002:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                  // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                  // avalon_st_adapter_002:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_003:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                  // avalon_st_adapter_003:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                   // avalon_st_adapter_003:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                  // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                  // avalon_st_adapter_003:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                     // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                      // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_004:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                  // avalon_st_adapter_004:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                   // avalon_st_adapter_004:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                  // avalon_st_adapter_004:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          timer_0_s1_agent_rdata_fifo_src_valid;                                              // timer_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] timer_0_s1_agent_rdata_fifo_src_data;                                               // timer_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          timer_0_s1_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_005:in_0_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                  // avalon_st_adapter_005:out_0_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                   // avalon_st_adapter_005:out_0_data -> timer_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                  // timer_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                  // avalon_st_adapter_005:out_0_error -> timer_0_s1_agent:rdata_fifo_sink_error
	wire          in_fifo_used_s1_agent_rdata_fifo_src_valid;                                         // in_fifo_used_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] in_fifo_used_s1_agent_rdata_fifo_src_data;                                          // in_fifo_used_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          in_fifo_used_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_006:in_0_ready -> in_fifo_used_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                  // avalon_st_adapter_006:out_0_valid -> in_fifo_used_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                   // avalon_st_adapter_006:out_0_data -> in_fifo_used_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                  // in_fifo_used_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                  // avalon_st_adapter_006:out_0_error -> in_fifo_used_s1_agent:rdata_fifo_sink_error
	wire          in_port_data_s1_agent_rdata_fifo_src_valid;                                         // in_port_data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] in_port_data_s1_agent_rdata_fifo_src_data;                                          // in_port_data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          in_port_data_s1_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_007:in_0_ready -> in_port_data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                  // avalon_st_adapter_007:out_0_valid -> in_port_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                   // avalon_st_adapter_007:out_0_data -> in_port_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                  // in_port_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                  // avalon_st_adapter_007:out_0_error -> in_port_data_s1_agent:rdata_fifo_sink_error
	wire          in_port_ec_flags_s1_agent_rdata_fifo_src_valid;                                     // in_port_ec_flags_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] in_port_ec_flags_s1_agent_rdata_fifo_src_data;                                      // in_port_ec_flags_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          in_port_ec_flags_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_008:in_0_ready -> in_port_ec_flags_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                  // avalon_st_adapter_008:out_0_valid -> in_port_ec_flags_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                   // avalon_st_adapter_008:out_0_data -> in_port_ec_flags_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                  // in_port_ec_flags_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                  // avalon_st_adapter_008:out_0_error -> in_port_ec_flags_s1_agent:rdata_fifo_sink_error
	wire          out_port_ctrl_s1_agent_rdata_fifo_src_valid;                                        // out_port_ctrl_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] out_port_ctrl_s1_agent_rdata_fifo_src_data;                                         // out_port_ctrl_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          out_port_ctrl_s1_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_009:in_0_ready -> out_port_ctrl_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                  // avalon_st_adapter_009:out_0_valid -> out_port_ctrl_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                   // avalon_st_adapter_009:out_0_data -> out_port_ctrl_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                  // out_port_ctrl_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                  // avalon_st_adapter_009:out_0_error -> out_port_ctrl_s1_agent:rdata_fifo_sink_error
	wire          in_port_dig_error_s1_agent_rdata_fifo_src_valid;                                    // in_port_dig_error_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] in_port_dig_error_s1_agent_rdata_fifo_src_data;                                     // in_port_dig_error_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          in_port_dig_error_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_010:in_0_ready -> in_port_dig_error_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                  // avalon_st_adapter_010:out_0_valid -> in_port_dig_error_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                   // avalon_st_adapter_010:out_0_data -> in_port_dig_error_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                  // in_port_dig_error_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                  // avalon_st_adapter_010:out_0_error -> in_port_dig_error_s1_agent:rdata_fifo_sink_error
	wire          uart_0_s1_agent_rdata_fifo_src_valid;                                               // uart_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [33:0] uart_0_s1_agent_rdata_fifo_src_data;                                                // uart_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          uart_0_s1_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_011:in_0_ready -> uart_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                  // avalon_st_adapter_011:out_0_valid -> uart_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_011_out_0_data;                                                   // avalon_st_adapter_011:out_0_data -> uart_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                  // uart_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                  // avalon_st_adapter_011:out_0_error -> uart_0_s1_agent:rdata_fifo_sink_error
	wire          out_port_prodnum_s1_agent_rdata_fifo_src_valid;                                     // out_port_prodnum_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] out_port_prodnum_s1_agent_rdata_fifo_src_data;                                      // out_port_prodnum_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          out_port_prodnum_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_012:in_0_ready -> out_port_prodnum_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                  // avalon_st_adapter_012:out_0_valid -> out_port_prodnum_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                   // avalon_st_adapter_012:out_0_data -> out_port_prodnum_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                  // out_port_prodnum_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                  // avalon_st_adapter_012:out_0_error -> out_port_prodnum_s1_agent:rdata_fifo_sink_error
	wire          out_port_batnum_s1_agent_rdata_fifo_src_valid;                                      // out_port_batnum_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] out_port_batnum_s1_agent_rdata_fifo_src_data;                                       // out_port_batnum_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          out_port_batnum_s1_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_013:in_0_ready -> out_port_batnum_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                  // avalon_st_adapter_013:out_0_valid -> out_port_batnum_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                   // avalon_st_adapter_013:out_0_data -> out_port_batnum_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                  // out_port_batnum_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                  // avalon_st_adapter_013:out_0_error -> out_port_batnum_s1_agent:rdata_fifo_sink_error
	wire          out_port_lut_data_s1_agent_rdata_fifo_src_valid;                                    // out_port_lut_data_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] out_port_lut_data_s1_agent_rdata_fifo_src_data;                                     // out_port_lut_data_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          out_port_lut_data_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_014:in_0_ready -> out_port_lut_data_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                  // avalon_st_adapter_014:out_0_valid -> out_port_lut_data_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                   // avalon_st_adapter_014:out_0_data -> out_port_lut_data_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                  // out_port_lut_data_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                  // avalon_st_adapter_014:out_0_error -> out_port_lut_data_s1_agent:rdata_fifo_sink_error
	wire          out_port_lut_adr_s1_agent_rdata_fifo_src_valid;                                     // out_port_lut_adr_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] out_port_lut_adr_s1_agent_rdata_fifo_src_data;                                      // out_port_lut_adr_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          out_port_lut_adr_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_015:in_0_ready -> out_port_lut_adr_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                  // avalon_st_adapter_015:out_0_valid -> out_port_lut_adr_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                   // avalon_st_adapter_015:out_0_data -> out_port_lut_adr_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                  // out_port_lut_adr_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                  // avalon_st_adapter_015:out_0_error -> out_port_lut_adr_s1_agent:rdata_fifo_sink_error
	wire          in_port_freq_cnt_s1_agent_rdata_fifo_src_valid;                                     // in_port_freq_cnt_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [33:0] in_port_freq_cnt_s1_agent_rdata_fifo_src_data;                                      // in_port_freq_cnt_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire          in_port_freq_cnt_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_016:in_0_ready -> in_port_freq_cnt_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_016_out_0_valid;                                                  // avalon_st_adapter_016:out_0_valid -> in_port_freq_cnt_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_016_out_0_data;                                                   // avalon_st_adapter_016:out_0_data -> in_port_freq_cnt_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_016_out_0_ready;                                                  // in_port_freq_cnt_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire    [0:0] avalon_st_adapter_016_out_0_error;                                                  // avalon_st_adapter_016:out_0_error -> in_port_freq_cnt_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (pll_0_50_outclk0_clk),                                                        //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (20),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (20),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (pll_0_50_outclk0_clk),                                                               //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (pll_0_50_outclk0_clk),                                 //                      clk.clk
		.reset                  (jtag_uart_0_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) product_info_0_avalon_slave_0_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (product_info_0_avalon_slave_0_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (product_info_0_avalon_slave_0_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (product_info_0_avalon_slave_0_agent_m0_read),                  //                         .read
		.uav_write              (product_info_0_avalon_slave_0_agent_m0_write),                 //                         .write
		.uav_waitrequest        (product_info_0_avalon_slave_0_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (product_info_0_avalon_slave_0_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (product_info_0_avalon_slave_0_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (product_info_0_avalon_slave_0_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (product_info_0_avalon_slave_0_agent_m0_writedata),             //                         .writedata
		.uav_lock               (product_info_0_avalon_slave_0_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (product_info_0_avalon_slave_0_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (product_info_0_avalon_slave_0_address),                        //      avalon_anti_slave_0.address
		.av_read                (product_info_0_avalon_slave_0_read),                           //                         .read
		.av_readdata            (product_info_0_avalon_slave_0_readdata),                       //                         .readdata
		.av_chipselect          (product_info_0_avalon_slave_0_chipselect),                     //                         .chipselect
		.av_write               (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),                     //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),                    //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),                //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                           //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),                          //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (pll_0_50_outclk0_clk),                                //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (2),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),                            //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                                    //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                                 //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                                //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                               //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                               //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                                    //                         .clken
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) timer_0_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (timer_0_s1_agent_m0_address),                                  // avalon_universal_slave_0.address
		.uav_burstcount         (timer_0_s1_agent_m0_burstcount),                               //                         .burstcount
		.uav_read               (timer_0_s1_agent_m0_read),                                     //                         .read
		.uav_write              (timer_0_s1_agent_m0_write),                                    //                         .write
		.uav_waitrequest        (timer_0_s1_agent_m0_waitrequest),                              //                         .waitrequest
		.uav_readdatavalid      (timer_0_s1_agent_m0_readdatavalid),                            //                         .readdatavalid
		.uav_byteenable         (timer_0_s1_agent_m0_byteenable),                               //                         .byteenable
		.uav_readdata           (timer_0_s1_agent_m0_readdata),                                 //                         .readdata
		.uav_writedata          (timer_0_s1_agent_m0_writedata),                                //                         .writedata
		.uav_lock               (timer_0_s1_agent_m0_lock),                                     //                         .lock
		.uav_debugaccess        (timer_0_s1_agent_m0_debugaccess),                              //                         .debugaccess
		.av_address             (timer_0_s1_address),                                           //      avalon_anti_slave_0.address
		.av_write               (timer_0_s1_write),                                             //                         .write
		.av_readdata            (timer_0_s1_readdata),                                          //                         .readdata
		.av_writedata           (timer_0_s1_writedata),                                         //                         .writedata
		.av_chipselect          (timer_0_s1_chipselect),                                        //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_fifo_used_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (in_fifo_used_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (in_fifo_used_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (in_fifo_used_s1_agent_m0_read),                                //                         .read
		.uav_write              (in_fifo_used_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (in_fifo_used_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (in_fifo_used_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (in_fifo_used_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (in_fifo_used_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (in_fifo_used_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (in_fifo_used_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (in_fifo_used_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (in_fifo_used_s1_address),                                      //      avalon_anti_slave_0.address
		.av_readdata            (in_fifo_used_s1_readdata),                                     //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_port_data_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (in_port_data_s1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (in_port_data_s1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (in_port_data_s1_agent_m0_read),                                //                         .read
		.uav_write              (in_port_data_s1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (in_port_data_s1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (in_port_data_s1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (in_port_data_s1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (in_port_data_s1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (in_port_data_s1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (in_port_data_s1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (in_port_data_s1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (in_port_data_s1_address),                                      //      avalon_anti_slave_0.address
		.av_readdata            (in_port_data_s1_readdata),                                     //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_port_ec_flags_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (in_port_ec_flags_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (in_port_ec_flags_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (in_port_ec_flags_s1_agent_m0_read),                            //                         .read
		.uav_write              (in_port_ec_flags_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (in_port_ec_flags_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (in_port_ec_flags_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (in_port_ec_flags_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (in_port_ec_flags_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (in_port_ec_flags_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (in_port_ec_flags_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (in_port_ec_flags_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (in_port_ec_flags_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (in_port_ec_flags_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) out_port_ctrl_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (out_port_ctrl_s1_agent_m0_address),                            // avalon_universal_slave_0.address
		.uav_burstcount         (out_port_ctrl_s1_agent_m0_burstcount),                         //                         .burstcount
		.uav_read               (out_port_ctrl_s1_agent_m0_read),                               //                         .read
		.uav_write              (out_port_ctrl_s1_agent_m0_write),                              //                         .write
		.uav_waitrequest        (out_port_ctrl_s1_agent_m0_waitrequest),                        //                         .waitrequest
		.uav_readdatavalid      (out_port_ctrl_s1_agent_m0_readdatavalid),                      //                         .readdatavalid
		.uav_byteenable         (out_port_ctrl_s1_agent_m0_byteenable),                         //                         .byteenable
		.uav_readdata           (out_port_ctrl_s1_agent_m0_readdata),                           //                         .readdata
		.uav_writedata          (out_port_ctrl_s1_agent_m0_writedata),                          //                         .writedata
		.uav_lock               (out_port_ctrl_s1_agent_m0_lock),                               //                         .lock
		.uav_debugaccess        (out_port_ctrl_s1_agent_m0_debugaccess),                        //                         .debugaccess
		.av_address             (out_port_ctrl_s1_address),                                     //      avalon_anti_slave_0.address
		.av_write               (out_port_ctrl_s1_write),                                       //                         .write
		.av_readdata            (out_port_ctrl_s1_readdata),                                    //                         .readdata
		.av_writedata           (out_port_ctrl_s1_writedata),                                   //                         .writedata
		.av_chipselect          (out_port_ctrl_s1_chipselect),                                  //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_port_dig_error_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (in_port_dig_error_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (in_port_dig_error_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (in_port_dig_error_s1_agent_m0_read),                           //                         .read
		.uav_write              (in_port_dig_error_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (in_port_dig_error_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (in_port_dig_error_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (in_port_dig_error_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (in_port_dig_error_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (in_port_dig_error_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (in_port_dig_error_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (in_port_dig_error_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (in_port_dig_error_s1_address),                                 //      avalon_anti_slave_0.address
		.av_readdata            (in_port_dig_error_s1_readdata),                                //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart_0_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart_0_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (uart_0_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (uart_0_s1_agent_m0_read),                                      //                         .read
		.uav_write              (uart_0_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (uart_0_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (uart_0_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (uart_0_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (uart_0_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (uart_0_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (uart_0_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (uart_0_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (uart_0_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (uart_0_s1_write),                                              //                         .write
		.av_read                (uart_0_s1_read),                                               //                         .read
		.av_readdata            (uart_0_s1_readdata),                                           //                         .readdata
		.av_writedata           (uart_0_s1_writedata),                                          //                         .writedata
		.av_begintransfer       (uart_0_s1_begintransfer),                                      //                         .begintransfer
		.av_chipselect          (uart_0_s1_chipselect),                                         //                         .chipselect
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) out_port_prodnum_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (out_port_prodnum_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (out_port_prodnum_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (out_port_prodnum_s1_agent_m0_read),                            //                         .read
		.uav_write              (out_port_prodnum_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (out_port_prodnum_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (out_port_prodnum_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (out_port_prodnum_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (out_port_prodnum_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (out_port_prodnum_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (out_port_prodnum_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (out_port_prodnum_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (out_port_prodnum_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (out_port_prodnum_s1_write),                                    //                         .write
		.av_readdata            (out_port_prodnum_s1_readdata),                                 //                         .readdata
		.av_writedata           (out_port_prodnum_s1_writedata),                                //                         .writedata
		.av_chipselect          (out_port_prodnum_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) out_port_batnum_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (out_port_batnum_s1_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount         (out_port_batnum_s1_agent_m0_burstcount),                       //                         .burstcount
		.uav_read               (out_port_batnum_s1_agent_m0_read),                             //                         .read
		.uav_write              (out_port_batnum_s1_agent_m0_write),                            //                         .write
		.uav_waitrequest        (out_port_batnum_s1_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid      (out_port_batnum_s1_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable         (out_port_batnum_s1_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata           (out_port_batnum_s1_agent_m0_readdata),                         //                         .readdata
		.uav_writedata          (out_port_batnum_s1_agent_m0_writedata),                        //                         .writedata
		.uav_lock               (out_port_batnum_s1_agent_m0_lock),                             //                         .lock
		.uav_debugaccess        (out_port_batnum_s1_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address             (out_port_batnum_s1_address),                                   //      avalon_anti_slave_0.address
		.av_write               (out_port_batnum_s1_write),                                     //                         .write
		.av_readdata            (out_port_batnum_s1_readdata),                                  //                         .readdata
		.av_writedata           (out_port_batnum_s1_writedata),                                 //                         .writedata
		.av_chipselect          (out_port_batnum_s1_chipselect),                                //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) out_port_lut_data_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (out_port_lut_data_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (out_port_lut_data_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (out_port_lut_data_s1_agent_m0_read),                           //                         .read
		.uav_write              (out_port_lut_data_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (out_port_lut_data_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (out_port_lut_data_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (out_port_lut_data_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (out_port_lut_data_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (out_port_lut_data_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (out_port_lut_data_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (out_port_lut_data_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (out_port_lut_data_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (out_port_lut_data_s1_write),                                   //                         .write
		.av_readdata            (out_port_lut_data_s1_readdata),                                //                         .readdata
		.av_writedata           (out_port_lut_data_s1_writedata),                               //                         .writedata
		.av_chipselect          (out_port_lut_data_s1_chipselect),                              //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) out_port_lut_adr_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (out_port_lut_adr_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (out_port_lut_adr_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (out_port_lut_adr_s1_agent_m0_read),                            //                         .read
		.uav_write              (out_port_lut_adr_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (out_port_lut_adr_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (out_port_lut_adr_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (out_port_lut_adr_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (out_port_lut_adr_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (out_port_lut_adr_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (out_port_lut_adr_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (out_port_lut_adr_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (out_port_lut_adr_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (out_port_lut_adr_s1_write),                                    //                         .write
		.av_readdata            (out_port_lut_adr_s1_readdata),                                 //                         .readdata
		.av_writedata           (out_port_lut_adr_s1_writedata),                                //                         .writedata
		.av_chipselect          (out_port_lut_adr_s1_chipselect),                               //                         .chipselect
		.av_read                (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (20),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) in_port_freq_cnt_s1_translator (
		.clk                    (pll_0_50_outclk0_clk),                                         //                      clk.clk
		.reset                  (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (in_port_freq_cnt_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (in_port_freq_cnt_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (in_port_freq_cnt_s1_agent_m0_read),                            //                         .read
		.uav_write              (in_port_freq_cnt_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (in_port_freq_cnt_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (in_port_freq_cnt_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (in_port_freq_cnt_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (in_port_freq_cnt_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (in_port_freq_cnt_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (in_port_freq_cnt_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (in_port_freq_cnt_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (in_port_freq_cnt_s1_address),                                  //      avalon_anti_slave_0.address
		.av_readdata            (in_port_freq_cnt_s1_readdata),                                 //                         .readdata
		.av_write               (),                                                             //              (terminated)
		.av_read                (),                                                             //              (terminated)
		.av_writedata           (),                                                             //              (terminated)
		.av_begintransfer       (),                                                             //              (terminated)
		.av_beginbursttransfer  (),                                                             //              (terminated)
		.av_burstcount          (),                                                             //              (terminated)
		.av_byteenable          (),                                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                                         //              (terminated)
		.av_waitrequest         (1'b0),                                                         //              (terminated)
		.av_writebyteenable     (),                                                             //              (terminated)
		.av_lock                (),                                                             //              (terminated)
		.av_chipselect          (),                                                             //              (terminated)
		.av_clken               (),                                                             //              (terminated)
		.uav_clken              (1'b0),                                                         //              (terminated)
		.av_debugaccess         (),                                                             //              (terminated)
		.av_outputenable        (),                                                             //              (terminated)
		.uav_response           (),                                                             //              (terminated)
		.av_response            (2'b00),                                                        //              (terminated)
		.uav_writeresponsevalid (),                                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (pll_0_50_outclk0_clk),                                                        //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_QOS_H                 (76),
		.PKT_QOS_L                 (76),
		.PKT_DATA_SIDEBAND_H       (74),
		.PKT_DATA_SIDEBAND_L       (74),
		.PKT_ADDR_SIDEBAND_H       (73),
		.PKT_ADDR_SIDEBAND_L       (73),
		.PKT_BURST_TYPE_H          (72),
		.PKT_BURST_TYPE_L          (71),
		.PKT_CACHE_H               (94),
		.PKT_CACHE_L               (91),
		.PKT_THREAD_ID_H           (87),
		.PKT_THREAD_ID_L           (87),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_EXCLUSIVE       (61),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.ST_DATA_W                 (100),
		.ST_CHANNEL_W              (17),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (pll_0_50_outclk0_clk),                                                               //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (pll_0_50_outclk0_clk),                                           //             clk.clk
		.reset                   (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                   //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                   //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                    //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                             //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                 //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                           //       clk.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) product_info_0_avalon_slave_0_agent (
		.clk                     (pll_0_50_outclk0_clk),                                           //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (product_info_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (product_info_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (product_info_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (product_info_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (product_info_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (product_info_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (product_info_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (product_info_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (product_info_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (product_info_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (product_info_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (product_info_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (product_info_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (product_info_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (product_info_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (product_info_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                               //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                               //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                                //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                         //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                             //                .channel
		.rf_sink_ready           (product_info_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (product_info_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (product_info_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (product_info_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (product_info_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (product_info_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (product_info_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (product_info_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (product_info_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (product_info_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (product_info_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (product_info_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (product_info_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) product_info_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                           //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (product_info_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (product_info_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (product_info_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (product_info_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (product_info_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (product_info_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (product_info_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (product_info_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (product_info_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (product_info_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                  //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                     //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                     //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),                //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                    //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                    //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                    //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                     //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                           //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),              //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),             //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (pll_0_50_outclk0_clk),                                          //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                              //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                              //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                               //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                        //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                            //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                           //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (3),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) timer_0_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (timer_0_s1_agent_m0_address),                                  //              m0.address
		.m0_burstcount           (timer_0_s1_agent_m0_burstcount),                               //                .burstcount
		.m0_byteenable           (timer_0_s1_agent_m0_byteenable),                               //                .byteenable
		.m0_debugaccess          (timer_0_s1_agent_m0_debugaccess),                              //                .debugaccess
		.m0_lock                 (timer_0_s1_agent_m0_lock),                                     //                .lock
		.m0_readdata             (timer_0_s1_agent_m0_readdata),                                 //                .readdata
		.m0_readdatavalid        (timer_0_s1_agent_m0_readdatavalid),                            //                .readdatavalid
		.m0_read                 (timer_0_s1_agent_m0_read),                                     //                .read
		.m0_waitrequest          (timer_0_s1_agent_m0_waitrequest),                              //                .waitrequest
		.m0_writedata            (timer_0_s1_agent_m0_writedata),                                //                .writedata
		.m0_write                (timer_0_s1_agent_m0_write),                                    //                .write
		.rp_endofpacket          (timer_0_s1_agent_rp_endofpacket),                              //              rp.endofpacket
		.rp_ready                (timer_0_s1_agent_rp_ready),                                    //                .ready
		.rp_valid                (timer_0_s1_agent_rp_valid),                                    //                .valid
		.rp_data                 (timer_0_s1_agent_rp_data),                                     //                .data
		.rp_startofpacket        (timer_0_s1_agent_rp_startofpacket),                            //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                           //                .channel
		.rf_sink_ready           (timer_0_s1_agent_rsp_fifo_out_ready),                          //         rf_sink.ready
		.rf_sink_valid           (timer_0_s1_agent_rsp_fifo_out_valid),                          //                .valid
		.rf_sink_startofpacket   (timer_0_s1_agent_rsp_fifo_out_startofpacket),                  //                .startofpacket
		.rf_sink_endofpacket     (timer_0_s1_agent_rsp_fifo_out_endofpacket),                    //                .endofpacket
		.rf_sink_data            (timer_0_s1_agent_rsp_fifo_out_data),                           //                .data
		.rf_source_ready         (timer_0_s1_agent_rf_source_ready),                             //       rf_source.ready
		.rf_source_valid         (timer_0_s1_agent_rf_source_valid),                             //                .valid
		.rf_source_startofpacket (timer_0_s1_agent_rf_source_startofpacket),                     //                .startofpacket
		.rf_source_endofpacket   (timer_0_s1_agent_rf_source_endofpacket),                       //                .endofpacket
		.rf_source_data          (timer_0_s1_agent_rf_source_data),                              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (timer_0_s1_agent_rdata_fifo_src_ready),                        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (timer_0_s1_agent_rdata_fifo_src_valid),                        //                .valid
		.rdata_fifo_src_data     (timer_0_s1_agent_rdata_fifo_src_data),                         //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) timer_0_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (timer_0_s1_agent_rf_source_data),                              //        in.data
		.in_valid          (timer_0_s1_agent_rf_source_valid),                             //          .valid
		.in_ready          (timer_0_s1_agent_rf_source_ready),                             //          .ready
		.in_startofpacket  (timer_0_s1_agent_rf_source_startofpacket),                     //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rf_source_endofpacket),                       //          .endofpacket
		.out_data          (timer_0_s1_agent_rsp_fifo_out_data),                           //       out.data
		.out_valid         (timer_0_s1_agent_rsp_fifo_out_valid),                          //          .valid
		.out_ready         (timer_0_s1_agent_rsp_fifo_out_ready),                          //          .ready
		.out_startofpacket (timer_0_s1_agent_rsp_fifo_out_startofpacket),                  //          .startofpacket
		.out_endofpacket   (timer_0_s1_agent_rsp_fifo_out_endofpacket),                    //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) in_fifo_used_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (in_fifo_used_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (in_fifo_used_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (in_fifo_used_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (in_fifo_used_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (in_fifo_used_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (in_fifo_used_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (in_fifo_used_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (in_fifo_used_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (in_fifo_used_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (in_fifo_used_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (in_fifo_used_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (in_fifo_used_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (in_fifo_used_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (in_fifo_used_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (in_fifo_used_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (in_fifo_used_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                           //                .channel
		.rf_sink_ready           (in_fifo_used_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (in_fifo_used_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (in_fifo_used_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (in_fifo_used_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (in_fifo_used_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (in_fifo_used_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (in_fifo_used_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (in_fifo_used_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (in_fifo_used_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (in_fifo_used_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (in_fifo_used_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (in_fifo_used_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (in_fifo_used_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) in_fifo_used_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (in_fifo_used_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (in_fifo_used_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (in_fifo_used_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (in_fifo_used_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (in_fifo_used_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (in_fifo_used_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (in_fifo_used_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (in_fifo_used_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (in_fifo_used_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (in_fifo_used_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) in_port_data_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (in_port_data_s1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (in_port_data_s1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (in_port_data_s1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (in_port_data_s1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (in_port_data_s1_agent_m0_lock),                                //                .lock
		.m0_readdata             (in_port_data_s1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (in_port_data_s1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (in_port_data_s1_agent_m0_read),                                //                .read
		.m0_waitrequest          (in_port_data_s1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (in_port_data_s1_agent_m0_writedata),                           //                .writedata
		.m0_write                (in_port_data_s1_agent_m0_write),                               //                .write
		.rp_endofpacket          (in_port_data_s1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (in_port_data_s1_agent_rp_ready),                               //                .ready
		.rp_valid                (in_port_data_s1_agent_rp_valid),                               //                .valid
		.rp_data                 (in_port_data_s1_agent_rp_data),                                //                .data
		.rp_startofpacket        (in_port_data_s1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_014_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),                           //                .channel
		.rf_sink_ready           (in_port_data_s1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (in_port_data_s1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (in_port_data_s1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (in_port_data_s1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (in_port_data_s1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (in_port_data_s1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (in_port_data_s1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (in_port_data_s1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (in_port_data_s1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (in_port_data_s1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (in_port_data_s1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (in_port_data_s1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (in_port_data_s1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) in_port_data_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (in_port_data_s1_agent_rf_source_data),                         //        in.data
		.in_valid          (in_port_data_s1_agent_rf_source_valid),                        //          .valid
		.in_ready          (in_port_data_s1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (in_port_data_s1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (in_port_data_s1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (in_port_data_s1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (in_port_data_s1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (in_port_data_s1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (in_port_data_s1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (in_port_data_s1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) in_port_ec_flags_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (in_port_ec_flags_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (in_port_ec_flags_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (in_port_ec_flags_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (in_port_ec_flags_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (in_port_ec_flags_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (in_port_ec_flags_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (in_port_ec_flags_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (in_port_ec_flags_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (in_port_ec_flags_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (in_port_ec_flags_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (in_port_ec_flags_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (in_port_ec_flags_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (in_port_ec_flags_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (in_port_ec_flags_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (in_port_ec_flags_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (in_port_ec_flags_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (agent_pipeline_016_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_016_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_016_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_016_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_016_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_016_source0_channel),                           //                .channel
		.rf_sink_ready           (in_port_ec_flags_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (in_port_ec_flags_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (in_port_ec_flags_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (in_port_ec_flags_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (in_port_ec_flags_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (in_port_ec_flags_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (in_port_ec_flags_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (in_port_ec_flags_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (in_port_ec_flags_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (in_port_ec_flags_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (in_port_ec_flags_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (in_port_ec_flags_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (in_port_ec_flags_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) in_port_ec_flags_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (in_port_ec_flags_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (in_port_ec_flags_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (in_port_ec_flags_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (in_port_ec_flags_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (in_port_ec_flags_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (in_port_ec_flags_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (in_port_ec_flags_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (in_port_ec_flags_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (in_port_ec_flags_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (in_port_ec_flags_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) out_port_ctrl_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (out_port_ctrl_s1_agent_m0_address),                            //              m0.address
		.m0_burstcount           (out_port_ctrl_s1_agent_m0_burstcount),                         //                .burstcount
		.m0_byteenable           (out_port_ctrl_s1_agent_m0_byteenable),                         //                .byteenable
		.m0_debugaccess          (out_port_ctrl_s1_agent_m0_debugaccess),                        //                .debugaccess
		.m0_lock                 (out_port_ctrl_s1_agent_m0_lock),                               //                .lock
		.m0_readdata             (out_port_ctrl_s1_agent_m0_readdata),                           //                .readdata
		.m0_readdatavalid        (out_port_ctrl_s1_agent_m0_readdatavalid),                      //                .readdatavalid
		.m0_read                 (out_port_ctrl_s1_agent_m0_read),                               //                .read
		.m0_waitrequest          (out_port_ctrl_s1_agent_m0_waitrequest),                        //                .waitrequest
		.m0_writedata            (out_port_ctrl_s1_agent_m0_writedata),                          //                .writedata
		.m0_write                (out_port_ctrl_s1_agent_m0_write),                              //                .write
		.rp_endofpacket          (out_port_ctrl_s1_agent_rp_endofpacket),                        //              rp.endofpacket
		.rp_ready                (out_port_ctrl_s1_agent_rp_ready),                              //                .ready
		.rp_valid                (out_port_ctrl_s1_agent_rp_valid),                              //                .valid
		.rp_data                 (out_port_ctrl_s1_agent_rp_data),                               //                .data
		.rp_startofpacket        (out_port_ctrl_s1_agent_rp_startofpacket),                      //                .startofpacket
		.cp_ready                (agent_pipeline_018_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_018_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_018_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_018_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_018_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_018_source0_channel),                           //                .channel
		.rf_sink_ready           (out_port_ctrl_s1_agent_rsp_fifo_out_ready),                    //         rf_sink.ready
		.rf_sink_valid           (out_port_ctrl_s1_agent_rsp_fifo_out_valid),                    //                .valid
		.rf_sink_startofpacket   (out_port_ctrl_s1_agent_rsp_fifo_out_startofpacket),            //                .startofpacket
		.rf_sink_endofpacket     (out_port_ctrl_s1_agent_rsp_fifo_out_endofpacket),              //                .endofpacket
		.rf_sink_data            (out_port_ctrl_s1_agent_rsp_fifo_out_data),                     //                .data
		.rf_source_ready         (out_port_ctrl_s1_agent_rf_source_ready),                       //       rf_source.ready
		.rf_source_valid         (out_port_ctrl_s1_agent_rf_source_valid),                       //                .valid
		.rf_source_startofpacket (out_port_ctrl_s1_agent_rf_source_startofpacket),               //                .startofpacket
		.rf_source_endofpacket   (out_port_ctrl_s1_agent_rf_source_endofpacket),                 //                .endofpacket
		.rf_source_data          (out_port_ctrl_s1_agent_rf_source_data),                        //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (out_port_ctrl_s1_agent_rdata_fifo_src_ready),                  //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (out_port_ctrl_s1_agent_rdata_fifo_src_valid),                  //                .valid
		.rdata_fifo_src_data     (out_port_ctrl_s1_agent_rdata_fifo_src_data),                   //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) out_port_ctrl_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (out_port_ctrl_s1_agent_rf_source_data),                        //        in.data
		.in_valid          (out_port_ctrl_s1_agent_rf_source_valid),                       //          .valid
		.in_ready          (out_port_ctrl_s1_agent_rf_source_ready),                       //          .ready
		.in_startofpacket  (out_port_ctrl_s1_agent_rf_source_startofpacket),               //          .startofpacket
		.in_endofpacket    (out_port_ctrl_s1_agent_rf_source_endofpacket),                 //          .endofpacket
		.out_data          (out_port_ctrl_s1_agent_rsp_fifo_out_data),                     //       out.data
		.out_valid         (out_port_ctrl_s1_agent_rsp_fifo_out_valid),                    //          .valid
		.out_ready         (out_port_ctrl_s1_agent_rsp_fifo_out_ready),                    //          .ready
		.out_startofpacket (out_port_ctrl_s1_agent_rsp_fifo_out_startofpacket),            //          .startofpacket
		.out_endofpacket   (out_port_ctrl_s1_agent_rsp_fifo_out_endofpacket),              //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) in_port_dig_error_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (in_port_dig_error_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (in_port_dig_error_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (in_port_dig_error_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (in_port_dig_error_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (in_port_dig_error_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (in_port_dig_error_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (in_port_dig_error_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (in_port_dig_error_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (in_port_dig_error_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (in_port_dig_error_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (in_port_dig_error_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (in_port_dig_error_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (in_port_dig_error_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (in_port_dig_error_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (in_port_dig_error_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (in_port_dig_error_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (agent_pipeline_020_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_020_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_020_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_020_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_020_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_020_source0_channel),                           //                .channel
		.rf_sink_ready           (in_port_dig_error_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (in_port_dig_error_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (in_port_dig_error_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (in_port_dig_error_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (in_port_dig_error_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (in_port_dig_error_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (in_port_dig_error_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (in_port_dig_error_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (in_port_dig_error_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (in_port_dig_error_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (in_port_dig_error_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (in_port_dig_error_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (in_port_dig_error_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) in_port_dig_error_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (in_port_dig_error_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (in_port_dig_error_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (in_port_dig_error_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (in_port_dig_error_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (in_port_dig_error_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (in_port_dig_error_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (in_port_dig_error_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (in_port_dig_error_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (in_port_dig_error_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (in_port_dig_error_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart_0_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart_0_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (uart_0_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (uart_0_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (uart_0_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (uart_0_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (uart_0_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (uart_0_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (uart_0_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (uart_0_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (uart_0_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (uart_0_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (uart_0_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (uart_0_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (uart_0_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (uart_0_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (uart_0_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (agent_pipeline_022_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_022_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_022_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_022_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_022_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_022_source0_channel),                           //                .channel
		.rf_sink_ready           (uart_0_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (uart_0_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (uart_0_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (uart_0_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (uart_0_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (uart_0_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (uart_0_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (uart_0_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (uart_0_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (uart_0_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (uart_0_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart_0_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (uart_0_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart_0_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart_0_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (uart_0_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (uart_0_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (uart_0_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (uart_0_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (uart_0_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (uart_0_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (uart_0_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (uart_0_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) out_port_prodnum_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (out_port_prodnum_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (out_port_prodnum_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (out_port_prodnum_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (out_port_prodnum_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (out_port_prodnum_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (out_port_prodnum_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (out_port_prodnum_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (out_port_prodnum_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (out_port_prodnum_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (out_port_prodnum_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (out_port_prodnum_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (out_port_prodnum_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (out_port_prodnum_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (out_port_prodnum_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (out_port_prodnum_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (out_port_prodnum_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (agent_pipeline_024_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_024_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_024_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_024_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_024_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_024_source0_channel),                           //                .channel
		.rf_sink_ready           (out_port_prodnum_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (out_port_prodnum_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (out_port_prodnum_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (out_port_prodnum_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (out_port_prodnum_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (out_port_prodnum_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (out_port_prodnum_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (out_port_prodnum_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (out_port_prodnum_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (out_port_prodnum_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (out_port_prodnum_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (out_port_prodnum_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (out_port_prodnum_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) out_port_prodnum_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (out_port_prodnum_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (out_port_prodnum_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (out_port_prodnum_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (out_port_prodnum_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (out_port_prodnum_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (out_port_prodnum_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (out_port_prodnum_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (out_port_prodnum_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (out_port_prodnum_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (out_port_prodnum_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) out_port_batnum_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (out_port_batnum_s1_agent_m0_address),                          //              m0.address
		.m0_burstcount           (out_port_batnum_s1_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (out_port_batnum_s1_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (out_port_batnum_s1_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (out_port_batnum_s1_agent_m0_lock),                             //                .lock
		.m0_readdata             (out_port_batnum_s1_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (out_port_batnum_s1_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (out_port_batnum_s1_agent_m0_read),                             //                .read
		.m0_waitrequest          (out_port_batnum_s1_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (out_port_batnum_s1_agent_m0_writedata),                        //                .writedata
		.m0_write                (out_port_batnum_s1_agent_m0_write),                            //                .write
		.rp_endofpacket          (out_port_batnum_s1_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (out_port_batnum_s1_agent_rp_ready),                            //                .ready
		.rp_valid                (out_port_batnum_s1_agent_rp_valid),                            //                .valid
		.rp_data                 (out_port_batnum_s1_agent_rp_data),                             //                .data
		.rp_startofpacket        (out_port_batnum_s1_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (agent_pipeline_026_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_026_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_026_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_026_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_026_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_026_source0_channel),                           //                .channel
		.rf_sink_ready           (out_port_batnum_s1_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (out_port_batnum_s1_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (out_port_batnum_s1_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (out_port_batnum_s1_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (out_port_batnum_s1_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (out_port_batnum_s1_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (out_port_batnum_s1_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (out_port_batnum_s1_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (out_port_batnum_s1_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (out_port_batnum_s1_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (out_port_batnum_s1_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (out_port_batnum_s1_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (out_port_batnum_s1_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) out_port_batnum_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (out_port_batnum_s1_agent_rf_source_data),                      //        in.data
		.in_valid          (out_port_batnum_s1_agent_rf_source_valid),                     //          .valid
		.in_ready          (out_port_batnum_s1_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (out_port_batnum_s1_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (out_port_batnum_s1_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (out_port_batnum_s1_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (out_port_batnum_s1_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (out_port_batnum_s1_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (out_port_batnum_s1_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (out_port_batnum_s1_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) out_port_lut_data_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (out_port_lut_data_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (out_port_lut_data_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (out_port_lut_data_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (out_port_lut_data_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (out_port_lut_data_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (out_port_lut_data_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (out_port_lut_data_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (out_port_lut_data_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (out_port_lut_data_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (out_port_lut_data_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (out_port_lut_data_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (out_port_lut_data_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (out_port_lut_data_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (out_port_lut_data_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (out_port_lut_data_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (out_port_lut_data_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (agent_pipeline_028_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_028_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_028_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_028_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_028_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_028_source0_channel),                           //                .channel
		.rf_sink_ready           (out_port_lut_data_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (out_port_lut_data_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (out_port_lut_data_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (out_port_lut_data_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (out_port_lut_data_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (out_port_lut_data_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (out_port_lut_data_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (out_port_lut_data_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (out_port_lut_data_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (out_port_lut_data_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (out_port_lut_data_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (out_port_lut_data_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (out_port_lut_data_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) out_port_lut_data_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (out_port_lut_data_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (out_port_lut_data_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (out_port_lut_data_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (out_port_lut_data_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (out_port_lut_data_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (out_port_lut_data_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (out_port_lut_data_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (out_port_lut_data_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (out_port_lut_data_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (out_port_lut_data_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) out_port_lut_adr_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (out_port_lut_adr_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (out_port_lut_adr_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (out_port_lut_adr_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (out_port_lut_adr_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (out_port_lut_adr_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (out_port_lut_adr_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (out_port_lut_adr_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (out_port_lut_adr_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (out_port_lut_adr_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (out_port_lut_adr_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (out_port_lut_adr_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (out_port_lut_adr_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (out_port_lut_adr_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (out_port_lut_adr_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (out_port_lut_adr_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (out_port_lut_adr_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (agent_pipeline_030_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_030_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_030_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_030_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_030_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_030_source0_channel),                           //                .channel
		.rf_sink_ready           (out_port_lut_adr_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (out_port_lut_adr_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (out_port_lut_adr_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (out_port_lut_adr_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (out_port_lut_adr_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (out_port_lut_adr_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (out_port_lut_adr_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (out_port_lut_adr_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (out_port_lut_adr_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (out_port_lut_adr_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (out_port_lut_adr_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (out_port_lut_adr_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (out_port_lut_adr_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) out_port_lut_adr_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (out_port_lut_adr_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (out_port_lut_adr_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (out_port_lut_adr_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (out_port_lut_adr_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (out_port_lut_adr_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (out_port_lut_adr_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (out_port_lut_adr_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (out_port_lut_adr_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (out_port_lut_adr_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (out_port_lut_adr_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (99),
		.PKT_ORI_BURST_SIZE_L      (97),
		.PKT_RESPONSE_STATUS_H     (96),
		.PKT_RESPONSE_STATUS_L     (95),
		.PKT_BURST_SIZE_H          (70),
		.PKT_BURST_SIZE_L          (68),
		.PKT_TRANS_LOCK            (60),
		.PKT_BEGIN_BURST           (75),
		.PKT_PROTECTION_H          (90),
		.PKT_PROTECTION_L          (88),
		.PKT_BURSTWRAP_H           (67),
		.PKT_BURSTWRAP_L           (65),
		.PKT_BYTE_CNT_H            (64),
		.PKT_BYTE_CNT_L            (62),
		.PKT_ADDR_H                (55),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (56),
		.PKT_TRANS_POSTED          (57),
		.PKT_TRANS_WRITE           (58),
		.PKT_TRANS_READ            (59),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (77),
		.PKT_DEST_ID_H             (86),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (17),
		.ST_DATA_W                 (100),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) in_port_freq_cnt_s1_agent (
		.clk                     (pll_0_50_outclk0_clk),                                         //             clk.clk
		.reset                   (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (in_port_freq_cnt_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (in_port_freq_cnt_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (in_port_freq_cnt_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (in_port_freq_cnt_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (in_port_freq_cnt_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (in_port_freq_cnt_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (in_port_freq_cnt_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (in_port_freq_cnt_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (in_port_freq_cnt_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (in_port_freq_cnt_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (in_port_freq_cnt_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (in_port_freq_cnt_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (in_port_freq_cnt_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (in_port_freq_cnt_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (in_port_freq_cnt_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (in_port_freq_cnt_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (agent_pipeline_032_source0_ready),                             //              cp.ready
		.cp_valid                (agent_pipeline_032_source0_valid),                             //                .valid
		.cp_data                 (agent_pipeline_032_source0_data),                              //                .data
		.cp_startofpacket        (agent_pipeline_032_source0_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (agent_pipeline_032_source0_endofpacket),                       //                .endofpacket
		.cp_channel              (agent_pipeline_032_source0_channel),                           //                .channel
		.rf_sink_ready           (in_port_freq_cnt_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (in_port_freq_cnt_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (in_port_freq_cnt_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (in_port_freq_cnt_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (in_port_freq_cnt_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (in_port_freq_cnt_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (in_port_freq_cnt_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (in_port_freq_cnt_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (in_port_freq_cnt_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (in_port_freq_cnt_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (in_port_freq_cnt_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (in_port_freq_cnt_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (in_port_freq_cnt_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (101),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) in_port_freq_cnt_s1_agent_rsp_fifo (
		.clk               (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (in_port_freq_cnt_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (in_port_freq_cnt_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (in_port_freq_cnt_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (in_port_freq_cnt_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (in_port_freq_cnt_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (in_port_freq_cnt_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (in_port_freq_cnt_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (in_port_freq_cnt_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (in_port_freq_cnt_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (in_port_freq_cnt_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	q_sys_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                            //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (agent_pipeline_001_source0_ready),              //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),              //          .valid
		.sink_data          (agent_pipeline_001_source0_data),               //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),      //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),        //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (agent_pipeline_003_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                         //       src.ready
		.src_valid          (router_003_src_valid),                                         //          .valid
		.src_data           (router_003_src_data),                                          //          .data
		.src_channel        (router_003_src_channel),                                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_002 router_004 (
		.sink_ready         (agent_pipeline_005_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_005_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                         //       src.ready
		.src_valid          (router_004_src_valid),                                         //          .valid
		.src_data           (router_004_src_data),                                          //          .data
		.src_channel        (router_004_src_channel),                                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_002 router_005 (
		.sink_ready         (agent_pipeline_007_source0_ready),               //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),               //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),       //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),         //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                           //       src.ready
		.src_valid          (router_005_src_valid),                           //          .valid
		.src_data           (router_005_src_data),                            //          .data
		.src_channel        (router_005_src_channel),                         //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                      //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (agent_pipeline_009_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_009_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                         //       src.ready
		.src_valid          (router_006_src_valid),                                         //          .valid
		.src_data           (router_006_src_data),                                          //          .data
		.src_channel        (router_006_src_channel),                                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (agent_pipeline_011_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_011_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                         //       src.ready
		.src_valid          (router_007_src_valid),                                         //          .valid
		.src_data           (router_007_src_data),                                          //          .data
		.src_channel        (router_007_src_channel),                                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (agent_pipeline_013_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_013_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                         //       src.ready
		.src_valid          (router_008_src_valid),                                         //          .valid
		.src_data           (router_008_src_data),                                          //          .data
		.src_channel        (router_008_src_channel),                                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_009 (
		.sink_ready         (agent_pipeline_015_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_015_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                         //       src.ready
		.src_valid          (router_009_src_valid),                                         //          .valid
		.src_data           (router_009_src_data),                                          //          .data
		.src_channel        (router_009_src_channel),                                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_010 (
		.sink_ready         (agent_pipeline_017_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_017_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_017_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_017_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_017_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                         //       src.ready
		.src_valid          (router_010_src_valid),                                         //          .valid
		.src_data           (router_010_src_data),                                          //          .data
		.src_channel        (router_010_src_channel),                                       //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_011 (
		.sink_ready         (agent_pipeline_019_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_019_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                         //       src.ready
		.src_valid          (router_011_src_valid),                                         //          .valid
		.src_data           (router_011_src_data),                                          //          .data
		.src_channel        (router_011_src_channel),                                       //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_012 (
		.sink_ready         (agent_pipeline_021_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_021_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_021_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_021_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_021_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                         //       src.ready
		.src_valid          (router_012_src_valid),                                         //          .valid
		.src_data           (router_012_src_data),                                          //          .data
		.src_channel        (router_012_src_channel),                                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_013 (
		.sink_ready         (agent_pipeline_023_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_023_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_023_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_023_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_023_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                                         //       src.ready
		.src_valid          (router_013_src_valid),                                         //          .valid
		.src_data           (router_013_src_data),                                          //          .data
		.src_channel        (router_013_src_channel),                                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_014 (
		.sink_ready         (agent_pipeline_025_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_025_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_025_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_025_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_025_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                                         //       src.ready
		.src_valid          (router_014_src_valid),                                         //          .valid
		.src_data           (router_014_src_data),                                          //          .data
		.src_channel        (router_014_src_channel),                                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_015 (
		.sink_ready         (agent_pipeline_027_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_027_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_027_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_027_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_027_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                                         //       src.ready
		.src_valid          (router_015_src_valid),                                         //          .valid
		.src_data           (router_015_src_data),                                          //          .data
		.src_channel        (router_015_src_channel),                                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_016 (
		.sink_ready         (agent_pipeline_029_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_029_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_029_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_029_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_029_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                                         //       src.ready
		.src_valid          (router_016_src_valid),                                         //          .valid
		.src_data           (router_016_src_data),                                          //          .data
		.src_channel        (router_016_src_channel),                                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_017 (
		.sink_ready         (agent_pipeline_031_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_031_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_031_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_031_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_031_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                                         //       src.ready
		.src_valid          (router_017_src_valid),                                         //          .valid
		.src_data           (router_017_src_data),                                          //          .data
		.src_channel        (router_017_src_channel),                                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_router_007 router_018 (
		.sink_ready         (agent_pipeline_033_source0_ready),                             //      sink.ready
		.sink_valid         (agent_pipeline_033_source0_valid),                             //          .valid
		.sink_data          (agent_pipeline_033_source0_data),                              //          .data
		.sink_startofpacket (agent_pipeline_033_source0_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (agent_pipeline_033_source0_endofpacket),                       //          .endofpacket
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                                         //       src.ready
		.src_valid          (router_018_src_valid),                                         //          .valid
		.src_data           (router_018_src_data),                                          //          .data
		.src_channel        (router_018_src_channel),                                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                                    //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                    //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                          //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                          //          .valid
		.src16_data          (cmd_demux_src16_data),                           //          .data
		.src16_channel       (cmd_demux_src16_channel),                        //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                  //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket)                     //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_001_src1_data),                        //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data          (cmd_demux_001_src2_data),                        //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),                 //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                       //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                       //          .valid
		.src3_data          (cmd_demux_001_src3_data),                        //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                     //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),                 //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                       //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                       //          .valid
		.src4_data          (cmd_demux_001_src4_data),                        //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                     //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)                  //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_50_outclk0_clk),                          //       clk.clk
		.reset               (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                             //       src.ready
		.src_valid           (cmd_mux_src_valid),                             //          .valid
		.src_data            (cmd_mux_src_data),                              //          .data
		.src_channel         (cmd_mux_src_channel),                           //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                    //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                    //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                  //          .channel
		.sink0_data          (mux_pipeline_source0_data),                     //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),              //          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                //     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                //          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),              //          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                 //          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket)           //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                        //          .valid
		.src_data            (cmd_mux_001_src_data),                                         //          .data
		.src_channel         (cmd_mux_001_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket),                         //          .endofpacket
		.sink1_ready         (mux_pipeline_003_source0_ready),                               //     sink1.ready
		.sink1_valid         (mux_pipeline_003_source0_valid),                               //          .valid
		.sink1_channel       (mux_pipeline_003_source0_channel),                             //          .channel
		.sink1_data          (mux_pipeline_003_source0_data),                                //          .data
		.sink1_startofpacket (mux_pipeline_003_source0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_003_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                        //          .valid
		.src_data            (cmd_mux_002_src_data),                                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket),                         //          .endofpacket
		.sink1_ready         (mux_pipeline_005_source0_ready),                               //     sink1.ready
		.sink1_valid         (mux_pipeline_005_source0_valid),                               //          .valid
		.sink1_channel       (mux_pipeline_005_source0_channel),                             //          .channel
		.sink1_data          (mux_pipeline_005_source0_data),                                //          .data
		.sink1_startofpacket (mux_pipeline_005_source0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_005_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                 //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                 //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),               //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                  //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),           //          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),                 //     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),                 //          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),               //          .channel
		.sink1_data          (mux_pipeline_007_source0_data),                  //          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                        //          .valid
		.src_data            (cmd_mux_004_src_data),                                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket),                         //          .endofpacket
		.sink1_ready         (mux_pipeline_009_source0_ready),                               //     sink1.ready
		.sink1_valid         (mux_pipeline_009_source0_valid),                               //          .valid
		.sink1_channel       (mux_pipeline_009_source0_channel),                             //          .channel
		.sink1_data          (mux_pipeline_009_source0_data),                                //          .data
		.sink1_startofpacket (mux_pipeline_009_source0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_009_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                        //          .valid
		.src_data            (cmd_mux_005_src_data),                                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_010_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_010_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_010_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_010_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_010_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_010_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_006 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                        //          .valid
		.src_data            (cmd_mux_006_src_data),                                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_011_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_011_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_011_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_011_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_011_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_011_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_007 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                        //          .valid
		.src_data            (cmd_mux_007_src_data),                                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_012_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_012_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_012_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_012_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_012_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_012_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_008 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                        //          .valid
		.src_data            (cmd_mux_008_src_data),                                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_013_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_009 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                        //          .valid
		.src_data            (cmd_mux_009_src_data),                                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_014_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_010 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                        //          .valid
		.src_data            (cmd_mux_010_src_data),                                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_015_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_015_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_015_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_015_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_015_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_015_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_011 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                        //          .valid
		.src_data            (cmd_mux_011_src_data),                                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_016_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_016_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_016_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_016_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_016_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_016_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_012 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                                        //          .valid
		.src_data            (cmd_mux_012_src_data),                                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_017_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_017_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_017_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_017_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_017_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_017_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_013 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                                        //          .valid
		.src_data            (cmd_mux_013_src_data),                                         //          .data
		.src_channel         (cmd_mux_013_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_018_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_018_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_018_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_018_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_018_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_018_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_014 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                                        //          .valid
		.src_data            (cmd_mux_014_src_data),                                         //          .data
		.src_channel         (cmd_mux_014_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_019_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_019_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_019_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_019_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_019_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_019_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_015 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                                        //          .valid
		.src_data            (cmd_mux_015_src_data),                                         //          .data
		.src_channel         (cmd_mux_015_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_020_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_020_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_020_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_020_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_020_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_020_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_cmd_mux_005 cmd_mux_016 (
		.clk                 (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset               (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                                        //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                                        //          .valid
		.src_data            (cmd_mux_016_src_data),                                         //          .data
		.src_channel         (cmd_mux_016_src_channel),                                      //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                                //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                                  //          .endofpacket
		.sink0_ready         (mux_pipeline_021_source0_ready),                               //     sink0.ready
		.sink0_valid         (mux_pipeline_021_source0_valid),                               //          .valid
		.sink0_channel       (mux_pipeline_021_source0_channel),                             //          .channel
		.sink0_data          (mux_pipeline_021_source0_data),                                //          .data
		.sink0_startofpacket (mux_pipeline_021_source0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_021_source0_endofpacket)                          //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_0_50_outclk0_clk),                          //       clk.clk
		.reset              (jtag_uart_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                          //      sink.ready
		.sink_channel       (router_002_src_channel),                        //          .channel
		.sink_data          (router_002_src_data),                           //          .data
		.sink_startofpacket (router_002_src_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                    //          .endofpacket
		.sink_valid         (router_002_src_valid),                          //          .valid
		.src0_ready         (rsp_demux_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_src0_data),                           //          .data
		.src0_channel       (rsp_demux_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                          //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                          //          .valid
		.src1_data          (rsp_demux_src1_data),                           //          .data
		.src1_channel       (rsp_demux_src1_channel),                        //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                  //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)                     //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                         //      sink.ready
		.sink_channel       (router_003_src_channel),                                       //          .channel
		.sink_data          (router_003_src_data),                                          //          .data
		.sink_startofpacket (router_003_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_003_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                     //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                     //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                      //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                   //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                         //      sink.ready
		.sink_channel       (router_004_src_channel),                                       //          .channel
		.sink_data          (router_004_src_data),                                          //          .data
		.sink_startofpacket (router_004_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_004_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                     //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                     //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                      //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                   //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_003_src1_data),                        //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                         //      sink.ready
		.sink_channel       (router_006_src_channel),                                       //          .channel
		.sink_data          (router_006_src_data),                                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                               //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                     //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                     //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                      //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                   //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                             //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                         //      sink.ready
		.sink_channel       (router_007_src_channel),                                       //          .channel
		.sink_data          (router_007_src_data),                                          //          .data
		.sink_startofpacket (router_007_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_007_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_006 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                         //      sink.ready
		.sink_channel       (router_008_src_channel),                                       //          .channel
		.sink_data          (router_008_src_data),                                          //          .data
		.sink_startofpacket (router_008_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_008_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_007 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                         //      sink.ready
		.sink_channel       (router_009_src_channel),                                       //          .channel
		.sink_data          (router_009_src_data),                                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_008 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                         //      sink.ready
		.sink_channel       (router_010_src_channel),                                       //          .channel
		.sink_data          (router_010_src_data),                                          //          .data
		.sink_startofpacket (router_010_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_010_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_009 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                         //      sink.ready
		.sink_channel       (router_011_src_channel),                                       //          .channel
		.sink_data          (router_011_src_data),                                          //          .data
		.sink_startofpacket (router_011_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_011_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_010 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                         //      sink.ready
		.sink_channel       (router_012_src_channel),                                       //          .channel
		.sink_data          (router_012_src_data),                                          //          .data
		.sink_startofpacket (router_012_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_012_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_011 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                                         //      sink.ready
		.sink_channel       (router_013_src_channel),                                       //          .channel
		.sink_data          (router_013_src_data),                                          //          .data
		.sink_startofpacket (router_013_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_013_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_012 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                                         //      sink.ready
		.sink_channel       (router_014_src_channel),                                       //          .channel
		.sink_data          (router_014_src_data),                                          //          .data
		.sink_startofpacket (router_014_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_014_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_013 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                                         //      sink.ready
		.sink_channel       (router_015_src_channel),                                       //          .channel
		.sink_data          (router_015_src_data),                                          //          .data
		.sink_startofpacket (router_015_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_015_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_013_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_014 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                                         //      sink.ready
		.sink_channel       (router_016_src_channel),                                       //          .channel
		.sink_data          (router_016_src_data),                                          //          .data
		.sink_startofpacket (router_016_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_016_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_014_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_015 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                                         //      sink.ready
		.sink_channel       (router_017_src_channel),                                       //          .channel
		.sink_data          (router_017_src_data),                                          //          .data
		.sink_startofpacket (router_017_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_017_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_015_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_demux_005 rsp_demux_016 (
		.clk                (pll_0_50_outclk0_clk),                                         //       clk.clk
		.reset              (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                                         //      sink.ready
		.sink_channel       (router_018_src_channel),                                       //          .channel
		.sink_data          (router_018_src_data),                                          //          .data
		.sink_startofpacket (router_018_src_startofpacket),                                 //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                                   //          .endofpacket
		.sink_valid         (router_018_src_valid),                                         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                                     //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                                     //          .valid
		.src0_data          (rsp_demux_016_src0_data),                                      //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                                   //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                             //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                                //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                              //          .valid
		.src_data             (rsp_mux_src_data),                               //          .data
		.src_channel          (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready          (mux_pipeline_022_source0_ready),                 //     sink0.ready
		.sink0_valid          (mux_pipeline_022_source0_valid),                 //          .valid
		.sink0_channel        (mux_pipeline_022_source0_channel),               //          .channel
		.sink0_data           (mux_pipeline_022_source0_data),                  //          .data
		.sink0_startofpacket  (mux_pipeline_022_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket    (mux_pipeline_022_source0_endofpacket),           //          .endofpacket
		.sink1_ready          (mux_pipeline_023_source0_ready),                 //     sink1.ready
		.sink1_valid          (mux_pipeline_023_source0_valid),                 //          .valid
		.sink1_channel        (mux_pipeline_023_source0_channel),               //          .channel
		.sink1_data           (mux_pipeline_023_source0_data),                  //          .data
		.sink1_startofpacket  (mux_pipeline_023_source0_startofpacket),         //          .startofpacket
		.sink1_endofpacket    (mux_pipeline_023_source0_endofpacket),           //          .endofpacket
		.sink2_ready          (mux_pipeline_024_source0_ready),                 //     sink2.ready
		.sink2_valid          (mux_pipeline_024_source0_valid),                 //          .valid
		.sink2_channel        (mux_pipeline_024_source0_channel),               //          .channel
		.sink2_data           (mux_pipeline_024_source0_data),                  //          .data
		.sink2_startofpacket  (mux_pipeline_024_source0_startofpacket),         //          .startofpacket
		.sink2_endofpacket    (mux_pipeline_024_source0_endofpacket),           //          .endofpacket
		.sink3_ready          (mux_pipeline_025_source0_ready),                 //     sink3.ready
		.sink3_valid          (mux_pipeline_025_source0_valid),                 //          .valid
		.sink3_channel        (mux_pipeline_025_source0_channel),               //          .channel
		.sink3_data           (mux_pipeline_025_source0_data),                  //          .data
		.sink3_startofpacket  (mux_pipeline_025_source0_startofpacket),         //          .startofpacket
		.sink3_endofpacket    (mux_pipeline_025_source0_endofpacket),           //          .endofpacket
		.sink4_ready          (mux_pipeline_026_source0_ready),                 //     sink4.ready
		.sink4_valid          (mux_pipeline_026_source0_valid),                 //          .valid
		.sink4_channel        (mux_pipeline_026_source0_channel),               //          .channel
		.sink4_data           (mux_pipeline_026_source0_data),                  //          .data
		.sink4_startofpacket  (mux_pipeline_026_source0_startofpacket),         //          .startofpacket
		.sink4_endofpacket    (mux_pipeline_026_source0_endofpacket),           //          .endofpacket
		.sink5_ready          (mux_pipeline_027_source0_ready),                 //     sink5.ready
		.sink5_valid          (mux_pipeline_027_source0_valid),                 //          .valid
		.sink5_channel        (mux_pipeline_027_source0_channel),               //          .channel
		.sink5_data           (mux_pipeline_027_source0_data),                  //          .data
		.sink5_startofpacket  (mux_pipeline_027_source0_startofpacket),         //          .startofpacket
		.sink5_endofpacket    (mux_pipeline_027_source0_endofpacket),           //          .endofpacket
		.sink6_ready          (mux_pipeline_028_source0_ready),                 //     sink6.ready
		.sink6_valid          (mux_pipeline_028_source0_valid),                 //          .valid
		.sink6_channel        (mux_pipeline_028_source0_channel),               //          .channel
		.sink6_data           (mux_pipeline_028_source0_data),                  //          .data
		.sink6_startofpacket  (mux_pipeline_028_source0_startofpacket),         //          .startofpacket
		.sink6_endofpacket    (mux_pipeline_028_source0_endofpacket),           //          .endofpacket
		.sink7_ready          (mux_pipeline_029_source0_ready),                 //     sink7.ready
		.sink7_valid          (mux_pipeline_029_source0_valid),                 //          .valid
		.sink7_channel        (mux_pipeline_029_source0_channel),               //          .channel
		.sink7_data           (mux_pipeline_029_source0_data),                  //          .data
		.sink7_startofpacket  (mux_pipeline_029_source0_startofpacket),         //          .startofpacket
		.sink7_endofpacket    (mux_pipeline_029_source0_endofpacket),           //          .endofpacket
		.sink8_ready          (mux_pipeline_030_source0_ready),                 //     sink8.ready
		.sink8_valid          (mux_pipeline_030_source0_valid),                 //          .valid
		.sink8_channel        (mux_pipeline_030_source0_channel),               //          .channel
		.sink8_data           (mux_pipeline_030_source0_data),                  //          .data
		.sink8_startofpacket  (mux_pipeline_030_source0_startofpacket),         //          .startofpacket
		.sink8_endofpacket    (mux_pipeline_030_source0_endofpacket),           //          .endofpacket
		.sink9_ready          (mux_pipeline_031_source0_ready),                 //     sink9.ready
		.sink9_valid          (mux_pipeline_031_source0_valid),                 //          .valid
		.sink9_channel        (mux_pipeline_031_source0_channel),               //          .channel
		.sink9_data           (mux_pipeline_031_source0_data),                  //          .data
		.sink9_startofpacket  (mux_pipeline_031_source0_startofpacket),         //          .startofpacket
		.sink9_endofpacket    (mux_pipeline_031_source0_endofpacket),           //          .endofpacket
		.sink10_ready         (mux_pipeline_032_source0_ready),                 //    sink10.ready
		.sink10_valid         (mux_pipeline_032_source0_valid),                 //          .valid
		.sink10_channel       (mux_pipeline_032_source0_channel),               //          .channel
		.sink10_data          (mux_pipeline_032_source0_data),                  //          .data
		.sink10_startofpacket (mux_pipeline_032_source0_startofpacket),         //          .startofpacket
		.sink10_endofpacket   (mux_pipeline_032_source0_endofpacket),           //          .endofpacket
		.sink11_ready         (mux_pipeline_033_source0_ready),                 //    sink11.ready
		.sink11_valid         (mux_pipeline_033_source0_valid),                 //          .valid
		.sink11_channel       (mux_pipeline_033_source0_channel),               //          .channel
		.sink11_data          (mux_pipeline_033_source0_data),                  //          .data
		.sink11_startofpacket (mux_pipeline_033_source0_startofpacket),         //          .startofpacket
		.sink11_endofpacket   (mux_pipeline_033_source0_endofpacket),           //          .endofpacket
		.sink12_ready         (mux_pipeline_034_source0_ready),                 //    sink12.ready
		.sink12_valid         (mux_pipeline_034_source0_valid),                 //          .valid
		.sink12_channel       (mux_pipeline_034_source0_channel),               //          .channel
		.sink12_data          (mux_pipeline_034_source0_data),                  //          .data
		.sink12_startofpacket (mux_pipeline_034_source0_startofpacket),         //          .startofpacket
		.sink12_endofpacket   (mux_pipeline_034_source0_endofpacket),           //          .endofpacket
		.sink13_ready         (mux_pipeline_035_source0_ready),                 //    sink13.ready
		.sink13_valid         (mux_pipeline_035_source0_valid),                 //          .valid
		.sink13_channel       (mux_pipeline_035_source0_channel),               //          .channel
		.sink13_data          (mux_pipeline_035_source0_data),                  //          .data
		.sink13_startofpacket (mux_pipeline_035_source0_startofpacket),         //          .startofpacket
		.sink13_endofpacket   (mux_pipeline_035_source0_endofpacket),           //          .endofpacket
		.sink14_ready         (mux_pipeline_036_source0_ready),                 //    sink14.ready
		.sink14_valid         (mux_pipeline_036_source0_valid),                 //          .valid
		.sink14_channel       (mux_pipeline_036_source0_channel),               //          .channel
		.sink14_data          (mux_pipeline_036_source0_data),                  //          .data
		.sink14_startofpacket (mux_pipeline_036_source0_startofpacket),         //          .startofpacket
		.sink14_endofpacket   (mux_pipeline_036_source0_endofpacket),           //          .endofpacket
		.sink15_ready         (mux_pipeline_037_source0_ready),                 //    sink15.ready
		.sink15_valid         (mux_pipeline_037_source0_valid),                 //          .valid
		.sink15_channel       (mux_pipeline_037_source0_channel),               //          .channel
		.sink15_data          (mux_pipeline_037_source0_data),                  //          .data
		.sink15_startofpacket (mux_pipeline_037_source0_startofpacket),         //          .startofpacket
		.sink15_endofpacket   (mux_pipeline_037_source0_endofpacket),           //          .endofpacket
		.sink16_ready         (mux_pipeline_038_source0_ready),                 //    sink16.ready
		.sink16_valid         (mux_pipeline_038_source0_valid),                 //          .valid
		.sink16_channel       (mux_pipeline_038_source0_channel),               //          .channel
		.sink16_data          (mux_pipeline_038_source0_data),                  //          .data
		.sink16_startofpacket (mux_pipeline_038_source0_startofpacket),         //          .startofpacket
		.sink16_endofpacket   (mux_pipeline_038_source0_endofpacket)            //          .endofpacket
	);

	q_sys_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (pll_0_50_outclk0_clk),                           //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (mux_pipeline_039_source0_ready),                 //     sink0.ready
		.sink0_valid         (mux_pipeline_039_source0_valid),                 //          .valid
		.sink0_channel       (mux_pipeline_039_source0_channel),               //          .channel
		.sink0_data          (mux_pipeline_039_source0_data),                  //          .data
		.sink0_startofpacket (mux_pipeline_039_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_039_source0_endofpacket),           //          .endofpacket
		.sink1_ready         (mux_pipeline_040_source0_ready),                 //     sink1.ready
		.sink1_valid         (mux_pipeline_040_source0_valid),                 //          .valid
		.sink1_channel       (mux_pipeline_040_source0_channel),               //          .channel
		.sink1_data          (mux_pipeline_040_source0_data),                  //          .data
		.sink1_startofpacket (mux_pipeline_040_source0_startofpacket),         //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_040_source0_endofpacket),           //          .endofpacket
		.sink2_ready         (mux_pipeline_041_source0_ready),                 //     sink2.ready
		.sink2_valid         (mux_pipeline_041_source0_valid),                 //          .valid
		.sink2_channel       (mux_pipeline_041_source0_channel),               //          .channel
		.sink2_data          (mux_pipeline_041_source0_data),                  //          .data
		.sink2_startofpacket (mux_pipeline_041_source0_startofpacket),         //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_041_source0_endofpacket),           //          .endofpacket
		.sink3_ready         (mux_pipeline_042_source0_ready),                 //     sink3.ready
		.sink3_valid         (mux_pipeline_042_source0_valid),                 //          .valid
		.sink3_channel       (mux_pipeline_042_source0_channel),               //          .channel
		.sink3_data          (mux_pipeline_042_source0_data),                  //          .data
		.sink3_startofpacket (mux_pipeline_042_source0_startofpacket),         //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_042_source0_endofpacket),           //          .endofpacket
		.sink4_ready         (mux_pipeline_043_source0_ready),                 //     sink4.ready
		.sink4_valid         (mux_pipeline_043_source0_valid),                 //          .valid
		.sink4_channel       (mux_pipeline_043_source0_channel),               //          .channel
		.sink4_data          (mux_pipeline_043_source0_data),                  //          .data
		.sink4_startofpacket (mux_pipeline_043_source0_startofpacket),         //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_043_source0_endofpacket)            //          .endofpacket
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (pll_0_50_outclk0_clk),                          //       cr0.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                             //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                             //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                       //          .endofpacket
		.in_data           (cmd_mux_src_data),                              //          .data
		.in_channel        (cmd_mux_src_channel),                           //          .channel
		.out_ready         (agent_pipeline_source0_ready),                  //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                  //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),            //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                   //          .data
		.out_channel       (agent_pipeline_source0_channel),                //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (pll_0_50_outclk0_clk),                                 //       cr0.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                                         //          .data
		.in_channel        (cmd_mux_001_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                              //          .data
		.out_channel       (agent_pipeline_002_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (product_info_0_avalon_slave_0_agent_rp_ready),                 //     sink0.ready
		.in_valid          (product_info_0_avalon_slave_0_agent_rp_valid),                 //          .valid
		.in_startofpacket  (product_info_0_avalon_slave_0_agent_rp_startofpacket),         //          .startofpacket
		.in_endofpacket    (product_info_0_avalon_slave_0_agent_rp_endofpacket),           //          .endofpacket
		.in_data           (product_info_0_avalon_slave_0_agent_rp_data),                  //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_002_src_data),                                         //          .data
		.in_channel        (cmd_mux_002_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                              //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (sysid_qsys_0_control_slave_agent_rp_ready),                    //     sink0.ready
		.in_valid          (sysid_qsys_0_control_slave_agent_rp_valid),                    //          .valid
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rp_startofpacket),            //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rp_endofpacket),              //          .endofpacket
		.in_data           (sysid_qsys_0_control_slave_agent_rp_data),                     //          .data
		.out_ready         (agent_pipeline_005_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                          //     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                          //          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.in_data           (cmd_mux_003_src_data),                           //          .data
		.in_channel        (cmd_mux_003_src_channel),                        //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),               //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),               //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),         //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                //          .data
		.out_channel       (agent_pipeline_006_source0_channel),             //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (pll_0_50_outclk0_clk),                                //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                     //          .data
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_channel       (),                                                    // (terminated)
		.in_channel        (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_004_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_004_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_004_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_004_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_004_src_data),                                         //          .data
		.in_channel        (cmd_mux_004_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                              //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (onchip_memory2_0_s1_agent_rp_ready),                           //     sink0.ready
		.in_valid          (onchip_memory2_0_s1_agent_rp_valid),                           //          .valid
		.in_startofpacket  (onchip_memory2_0_s1_agent_rp_startofpacket),                   //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rp_endofpacket),                     //          .endofpacket
		.in_data           (onchip_memory2_0_s1_agent_rp_data),                            //          .data
		.out_ready         (agent_pipeline_009_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_005_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_005_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_005_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_005_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_005_src_data),                                         //          .data
		.in_channel        (cmd_mux_005_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                              //          .data
		.out_channel       (agent_pipeline_010_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (timer_0_s1_agent_rp_ready),                                    //     sink0.ready
		.in_valid          (timer_0_s1_agent_rp_valid),                                    //          .valid
		.in_startofpacket  (timer_0_s1_agent_rp_startofpacket),                            //          .startofpacket
		.in_endofpacket    (timer_0_s1_agent_rp_endofpacket),                              //          .endofpacket
		.in_data           (timer_0_s1_agent_rp_data),                                     //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_006_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_006_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_006_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_006_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_006_src_data),                                         //          .data
		.in_channel        (cmd_mux_006_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                              //          .data
		.out_channel       (agent_pipeline_012_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (in_fifo_used_s1_agent_rp_ready),                               //     sink0.ready
		.in_valid          (in_fifo_used_s1_agent_rp_valid),                               //          .valid
		.in_startofpacket  (in_fifo_used_s1_agent_rp_startofpacket),                       //          .startofpacket
		.in_endofpacket    (in_fifo_used_s1_agent_rp_endofpacket),                         //          .endofpacket
		.in_data           (in_fifo_used_s1_agent_rp_data),                                //          .data
		.out_ready         (agent_pipeline_013_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_007_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_007_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_007_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_007_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_007_src_data),                                         //          .data
		.in_channel        (cmd_mux_007_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_014_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),                              //          .data
		.out_channel       (agent_pipeline_014_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (in_port_data_s1_agent_rp_ready),                               //     sink0.ready
		.in_valid          (in_port_data_s1_agent_rp_valid),                               //          .valid
		.in_startofpacket  (in_port_data_s1_agent_rp_startofpacket),                       //          .startofpacket
		.in_endofpacket    (in_port_data_s1_agent_rp_endofpacket),                         //          .endofpacket
		.in_data           (in_port_data_s1_agent_rp_data),                                //          .data
		.out_ready         (agent_pipeline_015_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_008_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_008_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_008_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_008_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_008_src_data),                                         //          .data
		.in_channel        (cmd_mux_008_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),                              //          .data
		.out_channel       (agent_pipeline_016_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (in_port_ec_flags_s1_agent_rp_ready),                           //     sink0.ready
		.in_valid          (in_port_ec_flags_s1_agent_rp_valid),                           //          .valid
		.in_startofpacket  (in_port_ec_flags_s1_agent_rp_startofpacket),                   //          .startofpacket
		.in_endofpacket    (in_port_ec_flags_s1_agent_rp_endofpacket),                     //          .endofpacket
		.in_data           (in_port_ec_flags_s1_agent_rp_data),                            //          .data
		.out_ready         (agent_pipeline_017_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_009_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_009_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_009_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_009_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_009_src_data),                                         //          .data
		.in_channel        (cmd_mux_009_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_018_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),                              //          .data
		.out_channel       (agent_pipeline_018_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (out_port_ctrl_s1_agent_rp_ready),                              //     sink0.ready
		.in_valid          (out_port_ctrl_s1_agent_rp_valid),                              //          .valid
		.in_startofpacket  (out_port_ctrl_s1_agent_rp_startofpacket),                      //          .startofpacket
		.in_endofpacket    (out_port_ctrl_s1_agent_rp_endofpacket),                        //          .endofpacket
		.in_data           (out_port_ctrl_s1_agent_rp_data),                               //          .data
		.out_ready         (agent_pipeline_019_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_020 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_010_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_010_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_010_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_010_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_010_src_data),                                         //          .data
		.in_channel        (cmd_mux_010_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_020_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_020_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_020_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_020_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_020_source0_data),                              //          .data
		.out_channel       (agent_pipeline_020_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_021 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (in_port_dig_error_s1_agent_rp_ready),                          //     sink0.ready
		.in_valid          (in_port_dig_error_s1_agent_rp_valid),                          //          .valid
		.in_startofpacket  (in_port_dig_error_s1_agent_rp_startofpacket),                  //          .startofpacket
		.in_endofpacket    (in_port_dig_error_s1_agent_rp_endofpacket),                    //          .endofpacket
		.in_data           (in_port_dig_error_s1_agent_rp_data),                           //          .data
		.out_ready         (agent_pipeline_021_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_021_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_021_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_021_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_021_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_022 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_011_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_011_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_011_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_011_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_011_src_data),                                         //          .data
		.in_channel        (cmd_mux_011_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_022_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_022_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_022_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_022_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_022_source0_data),                              //          .data
		.out_channel       (agent_pipeline_022_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_023 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (uart_0_s1_agent_rp_ready),                                     //     sink0.ready
		.in_valid          (uart_0_s1_agent_rp_valid),                                     //          .valid
		.in_startofpacket  (uart_0_s1_agent_rp_startofpacket),                             //          .startofpacket
		.in_endofpacket    (uart_0_s1_agent_rp_endofpacket),                               //          .endofpacket
		.in_data           (uart_0_s1_agent_rp_data),                                      //          .data
		.out_ready         (agent_pipeline_023_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_023_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_023_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_023_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_023_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_024 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_012_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_012_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_012_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_012_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_012_src_data),                                         //          .data
		.in_channel        (cmd_mux_012_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_024_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_024_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_024_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_024_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_024_source0_data),                              //          .data
		.out_channel       (agent_pipeline_024_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_025 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (out_port_prodnum_s1_agent_rp_ready),                           //     sink0.ready
		.in_valid          (out_port_prodnum_s1_agent_rp_valid),                           //          .valid
		.in_startofpacket  (out_port_prodnum_s1_agent_rp_startofpacket),                   //          .startofpacket
		.in_endofpacket    (out_port_prodnum_s1_agent_rp_endofpacket),                     //          .endofpacket
		.in_data           (out_port_prodnum_s1_agent_rp_data),                            //          .data
		.out_ready         (agent_pipeline_025_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_025_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_025_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_025_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_025_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_026 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_013_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_013_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_013_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_013_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_013_src_data),                                         //          .data
		.in_channel        (cmd_mux_013_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_026_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_026_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_026_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_026_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_026_source0_data),                              //          .data
		.out_channel       (agent_pipeline_026_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_027 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (out_port_batnum_s1_agent_rp_ready),                            //     sink0.ready
		.in_valid          (out_port_batnum_s1_agent_rp_valid),                            //          .valid
		.in_startofpacket  (out_port_batnum_s1_agent_rp_startofpacket),                    //          .startofpacket
		.in_endofpacket    (out_port_batnum_s1_agent_rp_endofpacket),                      //          .endofpacket
		.in_data           (out_port_batnum_s1_agent_rp_data),                             //          .data
		.out_ready         (agent_pipeline_027_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_027_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_027_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_027_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_027_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_028 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_014_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_014_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_014_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_014_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_014_src_data),                                         //          .data
		.in_channel        (cmd_mux_014_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_028_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_028_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_028_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_028_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_028_source0_data),                              //          .data
		.out_channel       (agent_pipeline_028_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_029 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (out_port_lut_data_s1_agent_rp_ready),                          //     sink0.ready
		.in_valid          (out_port_lut_data_s1_agent_rp_valid),                          //          .valid
		.in_startofpacket  (out_port_lut_data_s1_agent_rp_startofpacket),                  //          .startofpacket
		.in_endofpacket    (out_port_lut_data_s1_agent_rp_endofpacket),                    //          .endofpacket
		.in_data           (out_port_lut_data_s1_agent_rp_data),                           //          .data
		.out_ready         (agent_pipeline_029_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_029_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_029_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_029_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_029_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_030 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_015_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_015_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_015_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_015_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_015_src_data),                                         //          .data
		.in_channel        (cmd_mux_015_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_030_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_030_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_030_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_030_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_030_source0_data),                              //          .data
		.out_channel       (agent_pipeline_030_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_031 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (out_port_lut_adr_s1_agent_rp_ready),                           //     sink0.ready
		.in_valid          (out_port_lut_adr_s1_agent_rp_valid),                           //          .valid
		.in_startofpacket  (out_port_lut_adr_s1_agent_rp_startofpacket),                   //          .startofpacket
		.in_endofpacket    (out_port_lut_adr_s1_agent_rp_endofpacket),                     //          .endofpacket
		.in_data           (out_port_lut_adr_s1_agent_rp_data),                            //          .data
		.out_ready         (agent_pipeline_031_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_031_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_031_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_031_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_031_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_032 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_016_src_ready),                                        //     sink0.ready
		.in_valid          (cmd_mux_016_src_valid),                                        //          .valid
		.in_startofpacket  (cmd_mux_016_src_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_mux_016_src_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_mux_016_src_data),                                         //          .data
		.in_channel        (cmd_mux_016_src_channel),                                      //          .channel
		.out_ready         (agent_pipeline_032_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_032_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_032_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_032_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_032_source0_data),                              //          .data
		.out_channel       (agent_pipeline_032_source0_channel),                           //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_033 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (in_port_freq_cnt_s1_agent_rp_ready),                           //     sink0.ready
		.in_valid          (in_port_freq_cnt_s1_agent_rp_valid),                           //          .valid
		.in_startofpacket  (in_port_freq_cnt_s1_agent_rp_startofpacket),                   //          .startofpacket
		.in_endofpacket    (in_port_freq_cnt_s1_agent_rp_endofpacket),                     //          .endofpacket
		.in_data           (in_port_freq_cnt_s1_agent_rp_data),                            //          .data
		.out_ready         (agent_pipeline_033_source0_ready),                             //   source0.ready
		.out_valid         (agent_pipeline_033_source0_valid),                             //          .valid
		.out_startofpacket (agent_pipeline_033_source0_startofpacket),                     //          .startofpacket
		.out_endofpacket   (agent_pipeline_033_source0_endofpacket),                       //          .endofpacket
		.out_data          (agent_pipeline_033_source0_data),                              //          .data
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_channel       (),                                                             // (terminated)
		.in_channel        (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (pll_0_50_outclk0_clk),                          //       cr0.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                          //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                          //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                    //          .endofpacket
		.in_data           (cmd_demux_src0_data),                           //          .data
		.in_channel        (cmd_demux_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_source0_ready),                    //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                    //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),              //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                     //          .data
		.out_channel       (mux_pipeline_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (pll_0_50_outclk0_clk),                          //       cr0.clk
		.reset             (jtag_uart_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                      //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                      //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),              //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                       //          .data
		.in_channel        (cmd_demux_001_src0_channel),                    //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),          //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                 //          .data
		.out_channel       (mux_pipeline_001_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src1_data),                                          //          .data
		.in_channel        (cmd_demux_src1_channel),                                       //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                                //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                                      //          .data
		.in_channel        (cmd_demux_001_src1_channel),                                   //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                                //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src2_data),                                          //          .data
		.in_channel        (cmd_demux_src2_channel),                                       //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                                //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                                      //          .data
		.in_channel        (cmd_demux_001_src2_channel),                                   //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                                //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                           //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                           //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.in_data           (cmd_demux_src3_data),                            //          .data
		.in_channel        (cmd_demux_src3_channel),                         //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                  //          .data
		.out_channel       (mux_pipeline_006_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                       //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                       //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),               //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),                 //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                        //          .data
		.in_channel        (cmd_demux_001_src3_channel),                     //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                  //          .data
		.out_channel       (mux_pipeline_007_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src4_data),                                          //          .data
		.in_channel        (cmd_demux_src4_channel),                                       //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                                //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                                     //     sink0.ready
		.in_valid          (cmd_demux_001_src4_valid),                                     //          .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),                             //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),                               //          .endofpacket
		.in_data           (cmd_demux_001_src4_data),                                      //          .data
		.in_channel        (cmd_demux_001_src4_channel),                                   //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                                //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src5_data),                                          //          .data
		.in_channel        (cmd_demux_src5_channel),                                       //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                                //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src6_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src6_data),                                          //          .data
		.in_channel        (cmd_demux_src6_channel),                                       //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                                //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src7_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src7_data),                                          //          .data
		.in_channel        (cmd_demux_src7_channel),                                       //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),                                //          .data
		.out_channel       (mux_pipeline_012_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src8_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src8_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src8_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src8_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src8_data),                                          //          .data
		.in_channel        (cmd_demux_src8_channel),                                       //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),                                //          .data
		.out_channel       (mux_pipeline_013_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src9_ready),                                         //     sink0.ready
		.in_valid          (cmd_demux_src9_valid),                                         //          .valid
		.in_startofpacket  (cmd_demux_src9_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_demux_src9_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_demux_src9_data),                                          //          .data
		.in_channel        (cmd_demux_src9_channel),                                       //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),                                //          .data
		.out_channel       (mux_pipeline_014_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src10_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src10_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src10_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src10_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src10_data),                                         //          .data
		.in_channel        (cmd_demux_src10_channel),                                      //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),                                //          .data
		.out_channel       (mux_pipeline_015_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src11_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src11_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src11_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src11_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src11_data),                                         //          .data
		.in_channel        (cmd_demux_src11_channel),                                      //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),                                //          .data
		.out_channel       (mux_pipeline_016_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src12_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src12_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src12_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src12_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src12_data),                                         //          .data
		.in_channel        (cmd_demux_src12_channel),                                      //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),                                //          .data
		.out_channel       (mux_pipeline_017_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src13_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src13_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src13_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src13_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src13_data),                                         //          .data
		.in_channel        (cmd_demux_src13_channel),                                      //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),                                //          .data
		.out_channel       (mux_pipeline_018_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src14_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src14_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src14_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src14_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src14_data),                                         //          .data
		.in_channel        (cmd_demux_src14_channel),                                      //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),                                //          .data
		.out_channel       (mux_pipeline_019_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_020 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src15_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src15_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src15_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src15_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src15_data),                                         //          .data
		.in_channel        (cmd_demux_src15_channel),                                      //          .channel
		.out_ready         (mux_pipeline_020_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_020_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_020_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_020_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_020_source0_data),                                //          .data
		.out_channel       (mux_pipeline_020_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_021 (
		.clk               (pll_0_50_outclk0_clk),                                         //       cr0.clk
		.reset             (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src16_ready),                                        //     sink0.ready
		.in_valid          (cmd_demux_src16_valid),                                        //          .valid
		.in_startofpacket  (cmd_demux_src16_startofpacket),                                //          .startofpacket
		.in_endofpacket    (cmd_demux_src16_endofpacket),                                  //          .endofpacket
		.in_data           (cmd_demux_src16_data),                                         //          .data
		.in_channel        (cmd_demux_src16_channel),                                      //          .channel
		.out_ready         (mux_pipeline_021_source0_ready),                               //   source0.ready
		.out_valid         (mux_pipeline_021_source0_valid),                               //          .valid
		.out_startofpacket (mux_pipeline_021_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (mux_pipeline_021_source0_endofpacket),                         //          .endofpacket
		.out_data          (mux_pipeline_021_source0_data),                                //          .data
		.out_channel       (mux_pipeline_021_source0_channel),                             //          .channel
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_error          (1'b0)                                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_022 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                           //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                           //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.in_data           (rsp_demux_src0_data),                            //          .data
		.in_channel        (rsp_demux_src0_channel),                         //          .channel
		.out_ready         (mux_pipeline_022_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_022_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_022_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_022_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_022_source0_data),                  //          .data
		.out_channel       (mux_pipeline_022_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_023 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                        //          .data
		.in_channel        (rsp_demux_001_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_023_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_023_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_023_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_023_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_023_source0_data),                  //          .data
		.out_channel       (mux_pipeline_023_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_024 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                        //          .data
		.in_channel        (rsp_demux_002_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_024_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_024_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_024_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_024_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_024_source0_data),                  //          .data
		.out_channel       (mux_pipeline_024_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_025 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                        //          .data
		.in_channel        (rsp_demux_003_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_025_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_025_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_025_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_025_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_025_source0_data),                  //          .data
		.out_channel       (mux_pipeline_025_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_026 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                        //          .data
		.in_channel        (rsp_demux_004_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_026_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_026_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_026_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_026_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_026_source0_data),                  //          .data
		.out_channel       (mux_pipeline_026_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_027 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                        //          .data
		.in_channel        (rsp_demux_005_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_027_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_027_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_027_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_027_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_027_source0_data),                  //          .data
		.out_channel       (mux_pipeline_027_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_028 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                        //          .data
		.in_channel        (rsp_demux_006_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_028_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_028_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_028_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_028_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_028_source0_data),                  //          .data
		.out_channel       (mux_pipeline_028_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_029 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                        //          .data
		.in_channel        (rsp_demux_007_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_029_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_029_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_029_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_029_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_029_source0_data),                  //          .data
		.out_channel       (mux_pipeline_029_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_030 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_008_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_008_src0_data),                        //          .data
		.in_channel        (rsp_demux_008_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_030_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_030_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_030_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_030_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_030_source0_data),                  //          .data
		.out_channel       (mux_pipeline_030_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_031 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_009_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_009_src0_data),                        //          .data
		.in_channel        (rsp_demux_009_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_031_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_031_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_031_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_031_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_031_source0_data),                  //          .data
		.out_channel       (mux_pipeline_031_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_032 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_010_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_010_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_010_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_010_src0_data),                        //          .data
		.in_channel        (rsp_demux_010_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_032_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_032_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_032_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_032_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_032_source0_data),                  //          .data
		.out_channel       (mux_pipeline_032_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_033 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_011_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_011_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_011_src0_data),                        //          .data
		.in_channel        (rsp_demux_011_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_033_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_033_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_033_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_033_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_033_source0_data),                  //          .data
		.out_channel       (mux_pipeline_033_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_034 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_012_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_012_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_012_src0_data),                        //          .data
		.in_channel        (rsp_demux_012_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_034_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_034_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_034_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_034_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_034_source0_data),                  //          .data
		.out_channel       (mux_pipeline_034_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_035 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_013_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_013_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_013_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_013_src0_data),                        //          .data
		.in_channel        (rsp_demux_013_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_035_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_035_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_035_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_035_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_035_source0_data),                  //          .data
		.out_channel       (mux_pipeline_035_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_036 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_014_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_014_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_014_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_014_src0_data),                        //          .data
		.in_channel        (rsp_demux_014_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_036_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_036_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_036_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_036_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_036_source0_data),                  //          .data
		.out_channel       (mux_pipeline_036_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_037 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_015_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_015_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_015_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_015_src0_data),                        //          .data
		.in_channel        (rsp_demux_015_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_037_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_037_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_037_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_037_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_037_source0_data),                  //          .data
		.out_channel       (mux_pipeline_037_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_038 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_016_src0_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_016_src0_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_016_src0_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_016_src0_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_016_src0_data),                        //          .data
		.in_channel        (rsp_demux_016_src0_channel),                     //          .channel
		.out_ready         (mux_pipeline_038_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_038_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_038_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_038_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_038_source0_data),                  //          .data
		.out_channel       (mux_pipeline_038_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_039 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                           //     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                           //          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.in_data           (rsp_demux_src1_data),                            //          .data
		.in_channel        (rsp_demux_src1_channel),                         //          .channel
		.out_ready         (mux_pipeline_039_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_039_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_039_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_039_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_039_source0_data),                  //          .data
		.out_channel       (mux_pipeline_039_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_040 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_001_src1_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_001_src1_data),                        //          .data
		.in_channel        (rsp_demux_001_src1_channel),                     //          .channel
		.out_ready         (mux_pipeline_040_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_040_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_040_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_040_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_040_source0_data),                  //          .data
		.out_channel       (mux_pipeline_040_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_041 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src1_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_002_src1_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_002_src1_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src1_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_002_src1_data),                        //          .data
		.in_channel        (rsp_demux_002_src1_channel),                     //          .channel
		.out_ready         (mux_pipeline_041_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_041_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_041_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_041_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_041_source0_data),                  //          .data
		.out_channel       (mux_pipeline_041_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_042 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_003_src1_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_003_src1_data),                        //          .data
		.in_channel        (rsp_demux_003_src1_channel),                     //          .channel
		.out_ready         (mux_pipeline_042_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_042_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_042_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_042_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_042_source0_data),                  //          .data
		.out_channel       (mux_pipeline_042_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (100),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (17),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_043 (
		.clk               (pll_0_50_outclk0_clk),                           //       cr0.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src1_ready),                       //     sink0.ready
		.in_valid          (rsp_demux_004_src1_valid),                       //          .valid
		.in_startofpacket  (rsp_demux_004_src1_startofpacket),               //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src1_endofpacket),                 //          .endofpacket
		.in_data           (rsp_demux_004_src1_data),                        //          .data
		.in_channel        (rsp_demux_004_src1_channel),                     //          .channel
		.out_ready         (mux_pipeline_043_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_043_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_043_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_043_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_043_source0_data),                  //          .data
		.out_channel       (mux_pipeline_043_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (jtag_uart_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (product_info_0_avalon_slave_0_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (product_info_0_avalon_slave_0_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (product_info_0_avalon_slave_0_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                        //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (timer_0_s1_agent_rdata_fifo_src_data),                         //     in_0.data
		.in_0_valid     (timer_0_s1_agent_rdata_fifo_src_valid),                        //         .valid
		.in_0_ready     (timer_0_s1_agent_rdata_fifo_src_ready),                        //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (in_fifo_used_s1_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (in_fifo_used_s1_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (in_fifo_used_s1_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (in_port_data_s1_agent_rdata_fifo_src_data),                    //     in_0.data
		.in_0_valid     (in_port_data_s1_agent_rdata_fifo_src_valid),                   //         .valid
		.in_0_ready     (in_port_data_s1_agent_rdata_fifo_src_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (in_port_ec_flags_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (in_port_ec_flags_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (in_port_ec_flags_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (out_port_ctrl_s1_agent_rdata_fifo_src_data),                   //     in_0.data
		.in_0_valid     (out_port_ctrl_s1_agent_rdata_fifo_src_valid),                  //         .valid
		.in_0_ready     (out_port_ctrl_s1_agent_rdata_fifo_src_ready),                  //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (in_port_dig_error_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (in_port_dig_error_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (in_port_dig_error_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart_0_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (uart_0_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (uart_0_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (out_port_prodnum_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (out_port_prodnum_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (out_port_prodnum_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (out_port_batnum_s1_agent_rdata_fifo_src_data),                 //     in_0.data
		.in_0_valid     (out_port_batnum_s1_agent_rdata_fifo_src_valid),                //         .valid
		.in_0_ready     (out_port_batnum_s1_agent_rdata_fifo_src_ready),                //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (out_port_lut_data_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (out_port_lut_data_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (out_port_lut_data_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (out_port_lut_adr_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (out_port_lut_adr_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (out_port_lut_adr_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                             //         .error
	);

	q_sys_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (pll_0_50_outclk0_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (product_info_0_clock_reset_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (in_port_freq_cnt_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (in_port_freq_cnt_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (in_port_freq_cnt_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)                             //         .error
	);

endmodule
